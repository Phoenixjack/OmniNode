void printNowUsingCLibrary(time_t now) {
  struct tm timeinfo;
  gmtime_r(&now, &timeinfo);

  int year = timeinfo.tm_year + 1900; // tm_year starts in year 1900 (!)
  int month = timeinfo.tm_mon + 1; // tm_mon starts at 0 (!)
  int day = timeinfo.tm_mday; // tm_mday starts at 1 though (!)
  int hour = timeinfo.tm_hour;
  int mins = timeinfo.tm_min;
  int sec = timeinfo.tm_sec;
  int day_of_week = timeinfo.tm_wday; // tm_wday starts with Sunday=0
  const char* dow_string = DAYS_OF_WEEK[day_of_week];

  Serial.printf("%04d-%02d-%02dT%02d:%02d:%02d %s",
      year, month, day, hour, mins, sec, dow_string);
  Serial.println(F(" (C lib)"));
}


struct DateTuple {
  DateTuple() = default;

  DateTuple(int16_t y, uint8_t mon, uint8_t d, int32_t secs, uint8_t mod)
      : year(y), month(mon), day(d), seconds(secs), suffix(mod)
  {}

  int16_t year; // [-1,10000]
  uint8_t month; // [1,12]
  uint8_t day; // [1,31]
  int32_t seconds; // negative values allowed
  uint8_t suffix; // kSuffixS, kSuffixW, kSuffixU

  /** Used only for debugging. */
  void log() const {
    if (ACE_TIME_EXTENDED_ZONE_PROCESSOR_DEBUG) {
      int16_t minutes = seconds / 60;
      int8_t second = seconds - int32_t(60) * minutes;
      int8_t hour = minutes / 60;
      int8_t minute = minutes - hour * 60;
      char c = "wsu"[(suffix>>4)];
      if (second) {
        logging::printf("%04d-%02u-%02uT%02d:%02d:%02d%c",
            year, month, day, hour, minute, second, c);
      } else {
        logging::printf("%04d-%02u-%02uT%02d:%02d%c",
            year, month, day, hour, minute, c);
      }
    }
  }
};




#include <time.h>

long timezone = 1;
byte daysavetime = 1;

void setup() {
configTime(3600 * timezone, daysavetime * 3600, "time.nist.gov", "0.pool.ntp.org", "1.pool.ntp.org");
struct tm tmstruct;
tmstruct.tm_year = 0;
  getLocalTime(&tmstruct, 5000);
  Serial.printf("\nNow is : %d-%02d-%02d %02d:%02d:%02d\n", (tmstruct.tm_year) + 1900, (tmstruct.tm_mon) + 1, tmstruct.tm_mday, tmstruct.tm_hour, tmstruct.tm_min, tmstruct.tm_sec);
}
