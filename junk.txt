                  //
#if (defNodeFunction & 8)  // HMC5883
  if (!mag.begin()) {      // There was a problem detecting the HMC5883 ... check your connections
    Serial.println("Ooops, no HMC5883 detected ... Check your wiring!");
    while (1) {};  //
  }
  sensor_t sensor;
  mag.getSensor(&sensor);
  Serial.println("------------------------------------");
  Serial.print("Sensor:       ");
  Serial.println(sensor.name);
  Serial.print("Driver Ver:   ");
  Serial.println(sensor.version);
  Serial.print("Unique ID:    ");
  Serial.println(sensor.sensor_id);
  Serial.print("Max Value:    ");
  Serial.print(sensor.max_value);
  Serial.println(" uT");
  Serial.print("Min Value:    ");
  Serial.print(sensor.min_value);
  Serial.println(" uT");
  Serial.print("Resolution:   ");
  Serial.print(sensor.resolution);
  Serial.println(" uT");
  Serial.print("Mag Dev:      ");
  Serial.println(fltMagneticDeviation);
  Serial.println("------------------------------------");
  Serial.println("");
#endif                       //




                  //
#if (defNodeFunction & 2)   // INA3221
  cmd_getina3221data();     //
#endif                      //
#if (defNodeFunction & 4)   // GPS
  char c = GPS.read();
  // if you want to debug, this is a good time to do it!
  if (GPSECHO)
    if (c) Serial.print(c);
  // if a sentence is received, we can check the checksum, parse it...
  if (GPS.newNMEAreceived()) {
    // a tricky thing here is if we print the NMEA sentence, or data
    // we end up not listening and catching other sentences!
    // so be very wary if using OUTPUT_ALLDATA and trying to print out data
    Serial.print(GPS.lastNMEA());    // this also sets the newNMEAreceived() flag to false
    if (!GPS.parse(GPS.lastNMEA()))  // this also sets the newNMEAreceived() flag to false
      return;                        // we can fail to parse a sentence in which case we should just wait for another
  }
#endif                       //



void cmd_gethmc5883data() {
  sensors_event_t event;
  mag.getEvent(&event);
  Serial.print("X: ");
  Serial.print(event.magnetic.x);
  Serial.print("  ");
  Serial.print("Y: ");
  Serial.print(event.magnetic.y);
  Serial.print("  ");
  Serial.print("Z: ");
  Serial.print(event.magnetic.z);
  Serial.print("  ");
  Serial.println("uT");
  float heading = atan2(event.magnetic.y, event.magnetic.x);  // Hold the module so that Z is pointing 'up' and you can measure the heading with x&y
  heading += fltMagneticDeviation;
  if (heading < 0)  // Correct for when signs are reversed.
    heading += 2 * PI;

  // Check for wrap due to addition of declination.
  if (heading > 2 * PI)
    heading -= 2 * PI;

  // Convert radians to degrees for readability.
  float headingDegrees = heading * 180 / M_PI;

  Serial.print("Heading (degrees): ");
  Serial.println(headingDegrees);
}

void cmd_getina3221data() {
  float current[3];
  float current_compensated[3];
  float voltage[3];
  int PRINT_DEC_POINTS = 3;
  current[0] = ina3221.getCurrent(0);
  current_compensated[0] = ina3221.getCurrentCompensated(0);
  voltage[0] = ina3221.getVoltage(0);
  current[1] = ina3221.getCurrent(1);
  current_compensated[1] = ina3221.getCurrentCompensated(1);
  voltage[1] = ina3221.getVoltage(1);
  current[2] = ina3221.getCurrent(2);
  current_compensated[2] = ina3221.getCurrentCompensated(2);
  voltage[2] = ina3221.getVoltage(2);
  Serial.print("Channel 1: \n Current: ");
  Serial.print(current[0], PRINT_DEC_POINTS);
  Serial.print("A\n Compensated current: ");
  Serial.print(current_compensated[0], PRINT_DEC_POINTS);
  Serial.print("\n Voltage: ");
  Serial.print(voltage[0], PRINT_DEC_POINTS);
  Serial.println("V");
  Serial.print("Channel 2: \n Current: ");
  Serial.print(current[1], PRINT_DEC_POINTS);
  Serial.print("A\n Compensated current: ");
  Serial.print(current_compensated[1], PRINT_DEC_POINTS);
  Serial.print("\n Voltage: ");
  Serial.print(voltage[1], PRINT_DEC_POINTS);
  Serial.println("V");
  Serial.print("Channel 3: \n Current: ");
  Serial.print(current[2], PRINT_DEC_POINTS);
  Serial.print("A\n Compensated current: ");
  Serial.print(current_compensated[2], PRINT_DEC_POINTS);
  Serial.print("\n Voltage: ");
  Serial.print(voltage[2], PRINT_DEC_POINTS);
  Serial.println("V\n");
}


/*
  // approximately every 2 seconds or so, print out the current stats
  if (millis() - timer > 2000) {
    timer = millis(); // reset the timer
    Serial.print("\nTime: ");
    if (GPS.hour < 10) { Serial.print('0'); }
    Serial.print(GPS.hour, DEC); Serial.print(':');
    if (GPS.minute < 10) { Serial.print('0'); }
    Serial.print(GPS.minute, DEC); Serial.print(':');
    if (GPS.seconds < 10) { Serial.print('0'); }
    Serial.print(GPS.seconds, DEC); Serial.print('.');
    if (GPS.milliseconds < 10) {
      Serial.print("00");
    } else if (GPS.milliseconds > 9 && GPS.milliseconds < 100) {
      Serial.print("0");
    }
    Serial.println(GPS.milliseconds);
    Serial.print("Date: ");
    Serial.print(GPS.day, DEC); Serial.print('/');
    Serial.print(GPS.month, DEC); Serial.print("/20");
    Serial.println(GPS.year, DEC);
    Serial.print("Fix: "); Serial.print((int)GPS.fix);
    Serial.print(" quality: "); Serial.println((int)GPS.fixquality);
    if (GPS.fix) {
      Serial.print("Location: ");
      Serial.print(GPS.latitude, 4); Serial.print(GPS.lat);
      Serial.print(", ");
      Serial.print(GPS.longitude, 4); Serial.println(GPS.lon);
      Serial.print("Speed (knots): "); Serial.println(GPS.speed);
      Serial.print("Angle: "); Serial.println(GPS.angle);
      Serial.print("Altitude: "); Serial.println(GPS.altitude);
      Serial.print("Satellites: "); Serial.println((int)GPS.satellites);
      Serial.print("Antenna status: "); Serial.println((int)GPS.antenna);
    }
  }
  
  */
  
