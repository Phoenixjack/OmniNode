const char nodefunctions[] = {
  // an array of char arrays used for looking up node function
  (char *)"packetfwd",  // array index 0
  (char *)"ina3221",    // array index 1
  (char *)"neo6_7",     // array index 2
  (char *)"hmc5883",    // array index 3
  (char *)"bmp280",     // array index 4
  (char *)"bme680",     // array index 5
  (char *)"mpu6050",    // array index 6
  (char *)"adxl345",    // array index 7
  (char *)"as5600"      // array index 8
};                      // example: node with neo6 or neo7 gps AND hmc5883 compass would have defNodeFunction of (0b0000 0100 & 0b0000 1000) = 0b0000 1100 = 12
const int intNumNodeFunctions(sizeof(nodefunctions) / sizeof(char *))


#if (defNodeFunction & 1)        // Packet FWD; applying a mask of binary 0000 0000 0000 0001 to our defNodeFunction. Example: 0000 0000 0000 1100 results in 0000 0000 0000 0000 which is false
#include <SoftwareSerial.h>      // https://docs.arduino.cc/learn/built-in-libraries/software-serial
#endif                           //
#if (defFuncINA3221)             // INA3221; applying a mask of binary 0000 0000 0000 0010 to our defNodeFunction. Example: 0000 0000 0000 1100 results in 0000 0000 0000 0000 which is false
#include <INA3221.h>             // https://github.com/Tinyu-Zhao/INA3221
#endif                           //
#if (defNodeFunction & 4)        // GPS; applying a mask of binary 0000 0000 0000 0100 to our defNodeFunction. Example: 0000 0000 0000 1100 results in 0000 0000 0000 1000 which is not false, ie true
#include <Adafruit_GPS.h>        //
#define GPSECHO false            //
#endif                           //
#if (defNodeFunction & 8)        // HMC5883
#include <Adafruit_HMC5883_U.h>  // https://github.com/adafruit/Adafruit_HMC5883_Unified
#endif                           //
#if (defNodeFunction & 16)       // BMP280
#endif                           //
#if (defNodeFunction & 32)       // BME680
#endif                           //
#if (defNodeFunction & 64)       // MPU6050
#endif                           //
#if (defNodeFunction & 128)      // ADXL345
#endif                           //
#if (defNodeFunction & 256)      // AS5600
#include "AS5600.h"              //
#endif                           //
#if (defNodeFunction & 512)      //
#endif                           //

#if (defNodeFunction & 1)                                        // Packet FWD \
                                                                 //
#endif                                                           //
#if (defFuncINA3221)                                             // INA3221;
INA3221 ina3221(INA3221_ADDR40_GND);                             //
#endif                                                           //
#if (defNodeFunction & 4)                                        // GPS
#define GPSSerial Serial1                                        //
Adafruit_GPS GPS(&GPSSerial);                                    //
#endif                                                           //
#if (defNodeFunction & 8)                                        // HMC5883
Adafruit_HMC5883_Unified mag = Adafruit_HMC5883_Unified(12345);  // adafruit library requires a unique sensor id, so insert randomness
float fltMagneticDeviation = (-10 - (39 / 60)) * PI / 180;       // https://www.magnetic-declination.com/   mag dev for Dahlgren: -10deg39min  field strength: 50272.5nT
#endif                                                           //
#if (defNodeFunction & 16)                                       // BMP280
#endif                                                           //
#if (defNodeFunction & 32)                                       // BME680
#endif                                                           //
#if (defNodeFunction & 64)                                       // MPU6050
#endif                                                           //
#if (defNodeFunction & 128)                                      // ADXL345
#endif                                                           //
#if (defNodeFunction & 256)                                      // AS5600
#include "AS5600.h"                                              //
#endif                                                           //
#if (defNodeFunction & 512)                                      //
#endif                                                           //


String getFunctionName() {  // assembles a human readable string based on defNodeFunction
  return "getfunctionname";
}

#if (defNodeFunction & 1)  // Packet FWD
#endif                     //
#if (defNodeFunction & 2)  // INA3221
  ina3221.begin();
  ina3221.reset();
  ina3221.setShuntRes(10, 10, 10);   // Set shunt resistors to 10 mOhm for all channels
  ina3221.setFilterRes(10, 10, 10);  // Set series filter resistors to 10 Ohm for all channels. They introduce error to the current measurement, but error can be estimated and corrected.
#endif                               //
#if (defNodeFunction & 4)            // GPS
  GPS.begin(4800);
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);  // 1 Hz update rate
  GPS.sendCommand(PGCMD_ANTENNA);
  delay(1000);
  GPSSerial.println(PMTK_Q_RELEASE);
#endif                     //
#if (defNodeFunction & 8)  // HMC5883
  if (!mag.begin()) {      // There was a problem detecting the HMC5883 ... check your connections
    Serial.println("Ooops, no HMC5883 detected ... Check your wiring!");
    while (1) {};  //
  }
  sensor_t sensor;
  mag.getSensor(&sensor);
  Serial.println("------------------------------------");
  Serial.print("Sensor:       ");
  Serial.println(sensor.name);
  Serial.print("Driver Ver:   ");
  Serial.println(sensor.version);
  Serial.print("Unique ID:    ");
  Serial.println(sensor.sensor_id);
  Serial.print("Max Value:    ");
  Serial.print(sensor.max_value);
  Serial.println(" uT");
  Serial.print("Min Value:    ");
  Serial.print(sensor.min_value);
  Serial.println(" uT");
  Serial.print("Resolution:   ");
  Serial.print(sensor.resolution);
  Serial.println(" uT");
  Serial.print("Mag Dev:      ");
  Serial.println(fltMagneticDeviation);
  Serial.println("------------------------------------");
  Serial.println("");

#endif                       //
#if (defNodeFunction & 16)   // BMP280
#endif                       //
#if (defNodeFunction & 32)   // BME680
#endif                       //
#if (defNodeFunction & 64)   // MPU6050
#endif                       //
#if (defNodeFunction & 128)  // ADXL345
#endif                       //
#if (defNodeFunction & 256)  // AS5600
#endif                       //
#if (defNodeFunction & 512)  //
#endif                       //



#if (defNodeFunction & 1)   // Packet FWD
#endif                      //
#if (defNodeFunction & 2)   // INA3221
  cmd_getina3221data();     //
#endif                      //
#if (defNodeFunction & 4)   // GPS
  char c = GPS.read();
  // if you want to debug, this is a good time to do it!
  if (GPSECHO)
    if (c) Serial.print(c);
  // if a sentence is received, we can check the checksum, parse it...
  if (GPS.newNMEAreceived()) {
    // a tricky thing here is if we print the NMEA sentence, or data
    // we end up not listening and catching other sentences!
    // so be very wary if using OUTPUT_ALLDATA and trying to print out data
    Serial.print(GPS.lastNMEA());    // this also sets the newNMEAreceived() flag to false
    if (!GPS.parse(GPS.lastNMEA()))  // this also sets the newNMEAreceived() flag to false
      return;                        // we can fail to parse a sentence in which case we should just wait for another
  }
#endif                       //
#if (defNodeFunction & 8)    // HMC5883
  cmd_gethmc5883data();      //
#endif                       //
#if (defNodeFunction & 16)   // BMP280
#endif                       //
#if (defNodeFunction & 32)   // BME680
#endif                       //
#if (defNodeFunction & 64)   // MPU6050
#endif                       //
#if (defNodeFunction & 128)  // ADXL345
#endif                       //
#if (defNodeFunction & 256)  // AS5600
#endif                       //
#if (defNodeFunction & 512)  //
#endif                       //


void cmd_gethmc5883data() {
  sensors_event_t event;
  mag.getEvent(&event);
  Serial.print("X: ");
  Serial.print(event.magnetic.x);
  Serial.print("  ");
  Serial.print("Y: ");
  Serial.print(event.magnetic.y);
  Serial.print("  ");
  Serial.print("Z: ");
  Serial.print(event.magnetic.z);
  Serial.print("  ");
  Serial.println("uT");
  float heading = atan2(event.magnetic.y, event.magnetic.x);  // Hold the module so that Z is pointing 'up' and you can measure the heading with x&y
  heading += fltMagneticDeviation;
  if (heading < 0)  // Correct for when signs are reversed.
    heading += 2 * PI;

  // Check for wrap due to addition of declination.
  if (heading > 2 * PI)
    heading -= 2 * PI;

  // Convert radians to degrees for readability.
  float headingDegrees = heading * 180 / M_PI;

  Serial.print("Heading (degrees): ");
  Serial.println(headingDegrees);
}

void cmd_getina3221data() {
  float current[3];
  float current_compensated[3];
  float voltage[3];
  int PRINT_DEC_POINTS = 3;
  current[0] = ina3221.getCurrent(0);
  current_compensated[0] = ina3221.getCurrentCompensated(0);
  voltage[0] = ina3221.getVoltage(0);
  current[1] = ina3221.getCurrent(1);
  current_compensated[1] = ina3221.getCurrentCompensated(1);
  voltage[1] = ina3221.getVoltage(1);
  current[2] = ina3221.getCurrent(2);
  current_compensated[2] = ina3221.getCurrentCompensated(2);
  voltage[2] = ina3221.getVoltage(2);
  Serial.print("Channel 1: \n Current: ");
  Serial.print(current[0], PRINT_DEC_POINTS);
  Serial.print("A\n Compensated current: ");
  Serial.print(current_compensated[0], PRINT_DEC_POINTS);
  Serial.print("\n Voltage: ");
  Serial.print(voltage[0], PRINT_DEC_POINTS);
  Serial.println("V");
  Serial.print("Channel 2: \n Current: ");
  Serial.print(current[1], PRINT_DEC_POINTS);
  Serial.print("A\n Compensated current: ");
  Serial.print(current_compensated[1], PRINT_DEC_POINTS);
  Serial.print("\n Voltage: ");
  Serial.print(voltage[1], PRINT_DEC_POINTS);
  Serial.println("V");
  Serial.print("Channel 3: \n Current: ");
  Serial.print(current[2], PRINT_DEC_POINTS);
  Serial.print("A\n Compensated current: ");
  Serial.print(current_compensated[2], PRINT_DEC_POINTS);
  Serial.print("\n Voltage: ");
  Serial.print(voltage[2], PRINT_DEC_POINTS);
  Serial.println("V\n");
}


/*
  // approximately every 2 seconds or so, print out the current stats
  if (millis() - timer > 2000) {
    timer = millis(); // reset the timer
    Serial.print("\nTime: ");
    if (GPS.hour < 10) { Serial.print('0'); }
    Serial.print(GPS.hour, DEC); Serial.print(':');
    if (GPS.minute < 10) { Serial.print('0'); }
    Serial.print(GPS.minute, DEC); Serial.print(':');
    if (GPS.seconds < 10) { Serial.print('0'); }
    Serial.print(GPS.seconds, DEC); Serial.print('.');
    if (GPS.milliseconds < 10) {
      Serial.print("00");
    } else if (GPS.milliseconds > 9 && GPS.milliseconds < 100) {
      Serial.print("0");
    }
    Serial.println(GPS.milliseconds);
    Serial.print("Date: ");
    Serial.print(GPS.day, DEC); Serial.print('/');
    Serial.print(GPS.month, DEC); Serial.print("/20");
    Serial.println(GPS.year, DEC);
    Serial.print("Fix: "); Serial.print((int)GPS.fix);
    Serial.print(" quality: "); Serial.println((int)GPS.fixquality);
    if (GPS.fix) {
      Serial.print("Location: ");
      Serial.print(GPS.latitude, 4); Serial.print(GPS.lat);
      Serial.print(", ");
      Serial.print(GPS.longitude, 4); Serial.println(GPS.lon);
      Serial.print("Speed (knots): "); Serial.println(GPS.speed);
      Serial.print("Angle: "); Serial.println(GPS.angle);
      Serial.print("Altitude: "); Serial.println(GPS.altitude);
      Serial.print("Satellites: "); Serial.println((int)GPS.satellites);
      Serial.print("Antenna status: "); Serial.println((int)GPS.antenna);
    }
  }
  
  */
  
