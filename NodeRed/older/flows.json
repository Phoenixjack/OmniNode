[
    {
        "id": "2b674150e0c6799d",
        "type": "tab",
        "label": "JSONata Functions",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "57d0d4c33d2c16d8",
        "type": "tab",
        "label": "MQTT",
        "disabled": false,
        "info": "Receive MQTT packets\r\n  - listen for announce and LWT messages\r\n  - negotiate incoming data format (CSVtoJSON)\r\n  - negotiate packet reporting intervals\r\n    - initially accept board defaults\r\n    - but allow for pushing commands to update intervals\r\nProcess MQTT packets\r\n  - CSVtoJSON\r\n  - link out to individual flows for \r\n    error checking and processing\r\nBroadcast outgoing:\r\n  - commands\r\n  - queries",
        "env": []
    },
    {
        "id": "8b5fec66c83fc136",
        "type": "tab",
        "label": "Base Station",
        "disabled": true,
        "info": "Use this flow for:\r\n  - local GPIO (buttons/indicators/etc)\r\n  - serial data in/out\r\n  - I2C/SPI",
        "env": []
    },
    {
        "id": "ab5811bd975ab70d",
        "type": "tab",
        "label": "REMOTE Spinny",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "959de4fe523164e6",
        "type": "tab",
        "label": "Environmental Processing",
        "disabled": false,
        "info": "Use this for actual processing of:\r\n  - derived SLP from barometer and known altitude\r\n  - altitude calculations\r\n  - temp/humidity baselines\r\n  - etc\r\n\r\nENSURE THAT ALL LINKS IN/OUT & DASHBOARD\r\nI/O WON'T CRASH IF ENTIRE FLOW IS DISABLED",
        "env": []
    },
    {
        "id": "b26c951e61318a11",
        "type": "tab",
        "label": "File Handling",
        "disabled": false,
        "info": "Accept inputs for:\r\n  - logging level (raw, refined, both)\r\n  - selection of available fields\r\n  - user defined path/filename(s)\r\n\r\nOutput:\r\n  - disable messages for select user interfaces\r\n  - LED indicator of logging status\r\n  - dashboard indicator of logging status\r\n  - data to indicated path/filename(s)\r\n  ",
        "env": []
    },
    {
        "id": "62b2c76c360a5c24",
        "type": "tab",
        "label": "Data Packet Analysis",
        "disabled": false,
        "info": "FOR NOW:\r\n  - (COLLAPSE) raw packet feed\r\n  - Livestream line graph of SNR\r\n  - (COLLAPSE) Breakout of packet data\r\n\r\nFUTURE GROWTH\r\n  - Live Radar plot of data (latest OR average)\r\n  - ",
        "env": []
    },
    {
        "id": "767009226862343e",
        "type": "tab",
        "label": "Internet Requests",
        "disabled": false,
        "info": "Use this flow for internet requests\r\n - not sure if this will double for \r\n   intranet/off grid applications like\r\n   local NTP services, pings, etc\r\n   ",
        "env": []
    },
    {
        "id": "677a07349b91128e",
        "type": "tab",
        "label": "Sandbox",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "c172690cdc5067e9",
        "type": "tab",
        "label": "SimInputs",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b1f062ca9a341f70",
        "type": "tab",
        "label": "Diagnostics Panel",
        "disabled": false,
        "info": "ENSURE SYSTEM WILL WORK WITH THIS ENTIRE \r\nFLOW DISABLED\r\n  - For each Remote Unit: separate groups,\r\n    - individually collapsible\r\n  - For each report:\r\n    - data breakout & headers\r\n    - last report timestamp\r\n    - unit status (on/offline) derived from:\r\n      - any unacknowledged command or query\r\n      - overdue report / missed interval\r\n      - select data outside expected parameters\r\n        - ie azimuth changed x% more than RPM\r\n        - ie timestamp >x% lagged\r\n        - ie timestamp in the future\r\n    - set error status based on that\r\n      - TOTALLY offline\r\n      - Missed report interval\r\n      - Unacknowledged command/query\r\n      - No response / no report = RED\r\n      - Late / no acknowledge but reporting = YELLOW\r\n      - Data out of parameters - TBD",
        "env": []
    },
    {
        "id": "f1061a310f527162",
        "type": "tab",
        "label": "REMOTE BMP",
        "disabled": false,
        "info": "Use this flow for processing/displaying remote BMP data",
        "env": []
    },
    {
        "id": "98470bed41d6c5cf",
        "type": "subflow",
        "name": "SLP-CheckOrFake",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 130,
                "wires": [
                    {
                        "id": "c6e715fbcf754b5a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 920,
                "y": 140,
                "wires": [
                    {
                        "id": "8f4570ad7dc9a251",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "19d629e7c433e6d2",
        "type": "subflow",
        "name": "Toggle-RisingEdge",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 80,
                "wires": [
                    {
                        "id": "b09aec877c95288e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 490,
                "y": 80,
                "wires": [
                    {
                        "id": "8428f369fddfb722",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "14bc35a7e871612e",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata Aggregation functions",
        "style": {
            "label": true
        },
        "nodes": [
            "7f7a4f9ed924376d",
            "01f76c339f4adbd0",
            "156d2db7093d7558",
            "081cd34d6d10eff0",
            "199fed429d430789",
            "2f9225a89d7fc482",
            "4db6caf373859923",
            "e484adc4ab3f4dfe",
            "599ebbfcc3bfb18c",
            "af16cf6a74150575",
            "b40ecdc26eb65a87",
            "c542a10e1e9711be"
        ],
        "x": 634,
        "y": 59,
        "w": 612,
        "h": 202
    },
    {
        "id": "bd78a6345689686e",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata Numeric functions",
        "style": {
            "label": true
        },
        "nodes": [
            "a30467908fac9463",
            "fc277a1902454d3c",
            "7224275fee07915e",
            "f6c9478912e95bc4",
            "48b06fdef4c9ffc7",
            "02cf895c04cc2d17",
            "8cd41f907d7b91e1",
            "5d35112b0d7ffeb0",
            "35d492f50182f0e9",
            "1b8e6db00e94f577",
            "50ee5beef4616939",
            "cb3905a7fc7807dc",
            "b784ce33202f9e4a",
            "2b8feafd3ebed3db",
            "1af0b15b623b4243",
            "5f58f7b332bc5032",
            "6a2a296d28e805e8",
            "27784537ed674d95",
            "46d1ce782ac05500",
            "a1007695caca77de",
            "f5a7b9ba44d6da4f",
            "f0854f7725cd1e0a",
            "7cd53419b0c387ef",
            "fcea2e9a5a9a9a31",
            "0e87c5fd5d165065",
            "a58db5b349b23760",
            "cc2aa57778a71052",
            "d225d4b187f80ae9",
            "cd2f7b9ece57ec42",
            "da137d0fda54aa1d",
            "bcc10f8b59b05223",
            "4aa9214f104589e5",
            "68faa6604649be08",
            "c879b13b62b7e9e9",
            "46054494447c8ae2",
            "e224ce9d130829a1"
        ],
        "x": 14,
        "y": 939,
        "w": 612,
        "h": 522
    },
    {
        "id": "ef756230b8be8f60",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata String functions",
        "style": {
            "label": true
        },
        "nodes": [
            "3cc6261891386b5f",
            "8e042b0206d96ec3",
            "b5288005cfaed881",
            "c4e236b5f403ca46",
            "139d3d075aef541b",
            "97198c59935dad84",
            "4d7f61e7faedcb5a",
            "e48f9f8fb961a5d6",
            "66744dce571a09f0",
            "1cc1025e35c9a45f",
            "0778494e0323db2d",
            "f30e4fadc037c830",
            "3079704ac5de15ab",
            "8a34220c1cf0ddf2",
            "721d1f7a9c3c34ad",
            "ac702313720942fd",
            "20a8bff4c82dc0a6",
            "5358376cf87433d3",
            "fd1ca4d65201e56e",
            "1597936a4dd07adc",
            "bc6a61999fd08781",
            "bc6b032b788377d5",
            "1c0fdc0f44e2d65d",
            "f0028c6d46f58225",
            "634bff34b4bfa755",
            "471d0565d8107992",
            "aaf9bfbca7e66685",
            "1422679d35d613e6",
            "15f7d0253372dacc",
            "3578911993d1359b",
            "0ad7bc5dbbb01e64",
            "12bf1c0706c42cd9",
            "382e989d6beed2b9",
            "6032d7a86bd608af",
            "9e39dce96c0e40ba",
            "ceaf6f20ba283064",
            "6a216142b72c7570",
            "b191f4f849f6932b",
            "a634125d8a135739",
            "03ae99be7404fdd5",
            "ed05c5a681fd1709",
            "72ab71f8ff083acd",
            "f6824991eb4a71e6",
            "7256b2d99c71abb2",
            "280344adbf650555",
            "ed2e6980f986b9ae",
            "8ac685159923c118",
            "fee84a10519aa421",
            "14a8c5089653d59f",
            "58147d798906386f",
            "37889b302715c27e",
            "6f8cef3d757675b7",
            "98056fd4c8ea54b0",
            "265d1b2dc6aae07a",
            "fdccd987154c9d12",
            "aea93a05d365da9c",
            "251698b309d07a7e",
            "faad7e5e44d62653",
            "d13dbe29814dadd4",
            "e8d3957524002c5b",
            "85f562c1f72f7317",
            "2587c0a4b7cf100b",
            "78900f26fea3faf7"
        ],
        "x": 14,
        "y": 39,
        "w": 612,
        "h": 882
    },
    {
        "id": "7f9221a083cba77c",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata Boolean functions",
        "style": {
            "label": true
        },
        "nodes": [
            "e349d1491539c726",
            "4253c825027547ad",
            "6bc8446341b4b5f2",
            "1725374f271e4efc",
            "ba23fe1ffa16ed14",
            "377b870d6377fa6a",
            "db914e64bec8b614",
            "188fe1c2d2ebb8e3",
            "e6ab1014ef3d7b12"
        ],
        "x": 634,
        "y": 279,
        "w": 612,
        "h": 162
    },
    {
        "id": "340943aaa9afde77",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata Array functions",
        "style": {
            "label": true
        },
        "nodes": [
            "f9c483f70a4914e0",
            "654c7ea2cc076b7d",
            "097dda9b77c22bbc",
            "6c7dcaa639c75761",
            "bb52ed5515e1600c",
            "39348bddd6cd6ea4",
            "6587273cf41528ac",
            "37bc59e118a6145b",
            "e4bc41c71f22c31c",
            "af1434a6c955ae35",
            "c19e927408c93b3c",
            "31e9ea391e2d85e1",
            "17602f594fda49bf",
            "09b2c334fbdb315e",
            "b73901b3c9abd775",
            "d1b7e717ae08481a",
            "9e8177571be8f99f",
            "8b10eec1d8499638",
            "3382776fb18d904d",
            "7159dde8aba9e05c",
            "da8f480b32e83de4"
        ],
        "x": 634,
        "y": 459,
        "w": 612,
        "h": 322
    },
    {
        "id": "c88dadefed23d4b9",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata Date/Time functions",
        "style": {
            "label": true
        },
        "nodes": [
            "fd352b5e5dc6694b",
            "2df69d3de31443a9",
            "7270656ece6828a3",
            "5c92eeb77a6194d8",
            "a25502239ecce614",
            "74023126b34ed888",
            "cfed144c068126e1",
            "011afb255d074158",
            "027fa6ccac0cbc56",
            "c7751bd2f8c49d94",
            "e4cf415c1974fc31",
            "4c12d0e6c7d4268e"
        ],
        "x": 634,
        "y": 1259,
        "w": 612,
        "h": 202
    },
    {
        "id": "b9473f481d46341e",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata Higher order functions",
        "style": {
            "label": true
        },
        "nodes": [
            "18d6a3564775eda6",
            "50eaf8e14a07f52a",
            "d5893c4cb59a4bdd",
            "36b74a0ba9d50269",
            "b82c63ced822b93b",
            "351f1fe279abfa7f",
            "ce71c4e4ac746a82",
            "5b3f848b04096e1c",
            "40b1d4409f6b8dd5",
            "9ad04f517b2aa836",
            "ec88ad1de0080364",
            "23811eafe28ed4b0"
        ],
        "x": 1254,
        "y": 59,
        "w": 612,
        "h": 202
    },
    {
        "id": "d4f828aaee7233fb",
        "type": "group",
        "z": "2b674150e0c6799d",
        "name": "JSONata Object functions",
        "style": {
            "label": true
        },
        "nodes": [
            "61eba193709b4747",
            "b81ac77059018d6a",
            "cae58acf1d4d93b0",
            "c0a1f8ffaea953f2",
            "51eb088026f66aa7",
            "4c8ea5fc5fa0df83",
            "6b58edf53c9aeb7e",
            "ccf9e24c2cfc12cf",
            "431b43d750db4608",
            "48f3baac75b8cb33",
            "802e2e41ec6aaa2d",
            "7d381368a9723eb3",
            "fc6db6f01385990e",
            "a8a96fff189b0f6a",
            "3a58277f580af7a4",
            "39dc8115391725fd",
            "6599d5d264063dd4",
            "b1aea701f0274f22",
            "8c5ea777d24b40b6",
            "a43595f67aa34ea0",
            "a89af6cedd3f2e0d",
            "5b772280cd54e62a",
            "f84533d7ab3f5a83",
            "6461cdef7011b35b",
            "988336dcd37a967f",
            "16d4c7d19f1d655b",
            "cfeb74d0e7f0153e",
            "9e99aca1b6592c26"
        ],
        "x": 634,
        "y": 799,
        "w": 612,
        "h": 442
    },
    {
        "id": "1cbea94f561892a3",
        "type": "group",
        "z": "677a07349b91128e",
        "name": "Initial trigger, immediate reset, then 5s delay message IFF not retriggered",
        "style": {
            "label": true
        },
        "nodes": [
            "9ccdf268.c96ff",
            "38950a5.28d15f6",
            "2c532f67.0330e",
            "e4e42b96.97a338",
            "3b9b7caa3e759d9d"
        ],
        "x": 34,
        "y": 1239,
        "w": 732,
        "h": 162
    },
    {
        "id": "4a0d547b66fbd88b",
        "type": "group",
        "z": "677a07349b91128e",
        "name": "Pass array after all 3 parts arrive OR 5sec timeout, then single payload",
        "style": {
            "label": true
        },
        "nodes": [
            "8ccddb9a.a55f38",
            "47b769c5.cb0e28",
            "f9afb265.b11b7",
            "2d269127.4f04ce",
            "d6fbe805.0e4628"
        ],
        "x": 34,
        "y": 1069,
        "w": 592,
        "h": 162
    },
    {
        "id": "4da6ef81bb3d9b74",
        "type": "group",
        "z": "677a07349b91128e",
        "name": "Pass array after ANY 2 parts arrive",
        "style": {
            "label": true
        },
        "nodes": [
            "76b71eb1294b357c",
            "7ce53678664ee9d2",
            "06dcf02b6a812ed2",
            "5076e063e335c79b",
            "53558d462edb01de"
        ],
        "x": 34,
        "y": 899,
        "w": 592,
        "h": 162
    },
    {
        "id": "b8f7ccc797b080a1",
        "type": "group",
        "z": "677a07349b91128e",
        "name": "INITIALLY, only pass array after 3 parts arrive. Afterwards, any single input retriggers whole message",
        "style": {
            "label": true
        },
        "nodes": [
            "5cda08a00c0f1d64",
            "e3018ed9e33e91df",
            "65968ab95df8d39d",
            "e98016ccaba1cc55",
            "e514244bd2fe70ad"
        ],
        "x": 34,
        "y": 729,
        "w": 633,
        "h": 162
    },
    {
        "id": "92d8c5e984951659",
        "type": "group",
        "z": "677a07349b91128e",
        "name": "Block unchanged values",
        "style": {
            "label": true
        },
        "nodes": [
            "6079638d.df403c",
            "87129503.c7b358",
            "5e2ffc27.c61dd4",
            "2dc49f96.3070c",
            "2576027248dca650"
        ],
        "x": 34,
        "y": 579,
        "w": 632,
        "h": 142
    },
    {
        "id": "a761589dd070b8db",
        "type": "group",
        "z": "ab5811bd975ab70d",
        "name": "Start/Stop Rotation",
        "style": {
            "label": true
        },
        "nodes": [
            "f0c6f278bc296acd",
            "5041ee7da1df64ed",
            "24794b3e14ad0bf7",
            "f78729ed40c0ebfc",
            "9ce0c0ebf5aa08dd"
        ],
        "x": 54,
        "y": 409,
        "w": 812,
        "h": 142
    },
    {
        "id": "b8fc1f7984c5dcf8",
        "type": "group",
        "z": "677a07349b91128e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "eaf91a6b.a55da8",
            "61fbfe34.14a02",
            "bf0cb02.d8e4b5",
            "153eb0ff.5622df"
        ],
        "x": 34,
        "y": 1409,
        "w": 612,
        "h": 142
    },
    {
        "id": "47be5e2857c9a0e0",
        "type": "group",
        "z": "677a07349b91128e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "791a95ae.26555c",
            "ca252362.2b25d",
            "fe3067d4.300288",
            "a08cf05c.aea2",
            "64289929.b60d78",
            "bd497a1e.4aff58",
            "fd9977f7.520068",
            "f32e8db7.9554a",
            "d1a9924.18b1e7",
            "89881af3.d907c8",
            "213d42e.e087cbe",
            "bbe5e8ae545777dc"
        ],
        "x": 34,
        "y": 1969,
        "w": 762,
        "h": 382
    },
    {
        "id": "d9e9470f866ed0fc",
        "type": "group",
        "z": "677a07349b91128e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cf27351f.392d88",
            "cd1ac74a.a149a8",
            "d97b97d0.c4cfe8",
            "a1914d09.e7ba2",
            "75fefe32.3e47d",
            "75eaadfb.bed014",
            "fc2e6dfc.2b0e9"
        ],
        "x": 34,
        "y": 1709,
        "w": 612,
        "h": 252
    },
    {
        "id": "c87294c995d4add0",
        "type": "group",
        "z": "677a07349b91128e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fe821493.2e0e28",
            "931f94e8.592cd8",
            "bb2b0dad.b24b5",
            "baf2e48.2b97418"
        ],
        "x": 34,
        "y": 1559,
        "w": 712,
        "h": 142
    },
    {
        "id": "201efc57174b8607",
        "type": "group",
        "z": "677a07349b91128e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8aef54dec2684757",
            "f4a2238279d79ddc",
            "c2f5e6d627f299ec",
            "64f4fe3e4a94f3d0"
        ],
        "x": 34,
        "y": 2709,
        "w": 727,
        "h": 82
    },
    {
        "id": "6edda39437db838e",
        "type": "group",
        "z": "677a07349b91128e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ad0926de.26a49",
            "c941333.51fc15",
            "ee7a9310.023e58",
            "f72d19a0.4615e8",
            "e7332173.f40ac8",
            "b95b0b21.615e2",
            "11105327.b13ee5",
            "fccc4c17.8cc668",
            "f646fc04.b042f8",
            "e040c9ca.d87e18",
            "bce45467.abbc2",
            "b5e35173.54ef1",
            "5a45bddc.198614",
            "729d46e9.f2e86",
            "453f43aa.10f854",
            "5ee3991e.5952b"
        ],
        "x": 34,
        "y": 2799,
        "w": 732,
        "h": 502
    },
    {
        "id": "ba6049e8356985c4",
        "type": "group",
        "z": "677a07349b91128e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ae01eb30.2a687",
            "de6bf955.a53eb8",
            "6cdaaf73.e2a6c",
            "c5a9bf9f.41ee88",
            "5b058b8a.e3c2bc",
            "41b7585d.2273b8",
            "caaf7b55.f4eaf",
            "62649a3b.6f89fc",
            "61486286.f925bc",
            "3a6b7f67.431c98",
            "5d345790.b90158",
            "bded06c.02ccc78",
            "4973e61c.2759e",
            "fdd620b4.d28188",
            "9dc4592e.8b8b68",
            "aecf0463ab678d27",
            "0aa2ca5a201251cd",
            "20ab98c220edce2e",
            "b15e33fc4e57517e",
            "f335cc36d0bbef1a",
            "5c6a4608b4f28f6f",
            "2d059d98cc87bc64",
            "2e605c3ae2d34212",
            "1cc8e46ad86e1e7f",
            "8adb43a95858e66a",
            "f5c8435a4b4ee9ad",
            "747d1ae842e938ef",
            "c5c001b43e0b45a1",
            "2a32a68b4f88cb4b",
            "7e6f850dc6342971"
        ],
        "x": 34,
        "y": 3319,
        "w": 1262,
        "h": 452
    },
    {
        "id": "61eedda5c16950aa",
        "type": "group",
        "z": "677a07349b91128e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c0f0a6e086dc9271",
            "f6e84f6f90010220",
            "e4e60d8775cc723d",
            "6bdc75e913758458",
            "d4da5b523229f5ed",
            "98c7ad7c868130df",
            "0d29d1d022792b4e",
            "870f5502121840ac",
            "fee743f632e8c60d",
            "e0805655e5c51577",
            "8adfc58da959dcde",
            "258651d5bd48c3d5",
            "0cf73c063e96addf",
            "9290cc9d161f9cf7",
            "7e47939d2a47d184",
            "5fd6557fa0d3143e",
            "0d4918adb74a3321",
            "c1c4a91001503b10",
            "f8404f976bdff26a",
            "a949413f4cc16341",
            "66da319c6428cd86",
            "977aeb15687165ee"
        ],
        "x": 34,
        "y": 2359,
        "w": 952,
        "h": 312
    },
    {
        "id": "e7b7f2db937ef6c1",
        "type": "group",
        "z": "677a07349b91128e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "bd1b9414.8b32b8",
            "d8e9f39e.653ea",
            "2a388509.ad5742",
            "f036c088.c54bd8",
            "57ac7186.93afd8",
            "9730e6c0.d46aa",
            "9e818396.ce9d2"
        ],
        "x": 34,
        "y": 3799,
        "w": 672,
        "h": 202
    },
    {
        "id": "6be5a2871c697279",
        "type": "group",
        "z": "677a07349b91128e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fd2d7768.345b98",
            "676a128f.8a03dc",
            "5d19cb24.ac3444",
            "320b54d6.e604d4",
            "4bee5fb8153d09d7"
        ],
        "x": 34,
        "y": 4009,
        "w": 892,
        "h": 162
    },
    {
        "id": "361d37e243341e22",
        "type": "group",
        "z": "677a07349b91128e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1a60a19a.718526",
            "122377f3.e507f8",
            "2a06fe8f.883d92",
            "c129d4e9.65ec6",
            "a72c351c.98ba48",
            "548c8549.cc9904",
            "a9176a45.c66998"
        ],
        "x": 34,
        "y": 4179,
        "w": 1317,
        "h": 157
    },
    {
        "id": "6a2e73bbc08baef0",
        "type": "group",
        "z": "677a07349b91128e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1c8465fc.10e082",
            "7e4cca20.588e7c",
            "b887c6d1.43c668",
            "24b7b946.fcc9b6",
            "64d645c5.fe848c",
            "a72010f2.69313",
            "d5600b9a.fd9288"
        ],
        "x": 34,
        "y": 4344,
        "w": 667,
        "h": 247
    },
    {
        "id": "9ad53e0e62e39b88",
        "type": "mqtt-broker",
        "name": "",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "cb3750f073b2c511",
        "type": "ui_group",
        "name": "Current Packet Data",
        "tab": "1c4fb7574b8f9f06",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": true,
        "className": ""
    },
    {
        "id": "aa11c4f13607df56",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "9144e19663a1c10b",
        "type": "ui_tab",
        "name": "Control",
        "icon": "build",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1c4fb7574b8f9f06",
        "type": "ui_tab",
        "name": "Analytics",
        "icon": "assessment",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4af9272470ada9be",
        "type": "ui_group",
        "name": "Turntable",
        "tab": "9144e19663a1c10b",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "2c5cce41d226e3f1",
        "type": "ui_tab",
        "name": "Weather",
        "icon": "cloud",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "089168f1c00e84e5",
        "type": "tasmota-mqtt-broker",
        "name": "tasmotamqttbroker",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "keepalive": "60",
        "cleansession": true
    },
    {
        "id": "e04c2f356633ecc7",
        "type": "ui_group",
        "name": "Beacon",
        "tab": "9144e19663a1c10b",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "ef6cab5afa2bc3c1",
        "type": "ui_group",
        "name": "Online",
        "tab": "2c5cce41d226e3f1",
        "order": 2,
        "disp": true,
        "width": 10,
        "collapse": true,
        "className": ""
    },
    {
        "id": "b59dcbeac6b4e8f7",
        "type": "ui_group",
        "name": "Base Station Sensor",
        "tab": "2c5cce41d226e3f1",
        "order": 3,
        "disp": true,
        "width": 6,
        "collapse": true,
        "className": ""
    },
    {
        "id": "6fd579ecbeb3943a",
        "type": "ui_group",
        "name": "Logging Control",
        "tab": "1c4fb7574b8f9f06",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b8ba42ee98b00870",
        "type": "serial-port",
        "serialport": "/dev/tty1",
        "serialbaud": "57600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "3ae866301af1c330",
        "type": "ui_group",
        "name": "RemoteBMP",
        "tab": "1c4fb7574b8f9f06",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "c689a17e.a806a8",
        "type": "mqtt-broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "verifyservercert": true,
        "compatmode": true,
        "keepalive": "15",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": null,
        "birthPayload": "",
        "willTopic": "",
        "willQos": "0",
        "willRetain": null,
        "willPayload": ""
    },
    {
        "id": "cd6a6011.f60598",
        "type": "ui_group",
        "name": "Device List",
        "tab": "cce679d3.9909c",
        "order": 2,
        "disp": true,
        "width": "18",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cce679d3.9909c",
        "type": "ui_tab",
        "name": "Remote Nodes",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5cfe21d2.307938",
        "type": "ui_group",
        "name": "SimPackets",
        "tab": "3616a722.b89bc8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fdb6c31c.4f2818",
        "type": "ui_group",
        "name": "Azimuth",
        "tab": "3616a722.b89bc8",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "3616a722.b89bc8",
        "type": "ui_tab",
        "name": "SimInputs",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "949a843238d4b25c",
        "type": "ui_spacer",
        "z": "c172690cdc5067e9",
        "name": "spacer",
        "group": "fdb6c31c.4f2818",
        "order": 5,
        "width": 8,
        "height": 1
    },
    {
        "id": "42008314307eaf8f",
        "type": "ui_spacer",
        "z": "c172690cdc5067e9",
        "name": "spacer",
        "group": "fdb6c31c.4f2818",
        "order": 12,
        "width": 8,
        "height": 1
    },
    {
        "id": "dfb4a60f.d788f8",
        "type": "ui_group",
        "name": "Data Export",
        "tab": "48418b79.0f5834",
        "order": 1,
        "disp": true,
        "width": "12"
    },
    {
        "id": "48418b79.0f5834",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "d05692c2ff4fa099",
        "type": "ui_spacer",
        "z": "62b2c76c360a5c24",
        "name": "spacer",
        "group": "cb3750f073b2c511",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "4d444e30f8f71c27",
        "type": "ui_spacer",
        "z": "62b2c76c360a5c24",
        "name": "spacer",
        "group": "cb3750f073b2c511",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "93649734fb784af7",
        "type": "ui_spacer",
        "z": "62b2c76c360a5c24",
        "name": "spacer",
        "group": "cb3750f073b2c511",
        "order": 18,
        "width": 2,
        "height": 1
    },
    {
        "id": "d017ad618bede0d7",
        "type": "ui_spacer",
        "z": "62b2c76c360a5c24",
        "name": "spacer",
        "group": "cb3750f073b2c511",
        "order": 20,
        "width": 2,
        "height": 1
    },
    {
        "id": "762d718c08898d8c",
        "type": "ui_spacer",
        "z": "62b2c76c360a5c24",
        "name": "spacer",
        "group": "cb3750f073b2c511",
        "order": 22,
        "width": 2,
        "height": 1
    },
    {
        "id": "9ba7f0336163d310",
        "type": "ui_spacer",
        "z": "62b2c76c360a5c24",
        "name": "spacer",
        "group": "6fd579ecbeb3943a",
        "order": 4,
        "width": 6,
        "height": 1
    },
    {
        "id": "c6e715fbcf754b5a",
        "type": "switch",
        "z": "98470bed41d6c5cf",
        "name": "Is SLP Null?",
        "property": "payload.properties.seaLevelPressure.value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 130,
        "wires": [
            [
                "6ca98cba74cde90e"
            ],
            [
                "8f4570ad7dc9a251"
            ]
        ],
        "outputLabels": [
            "NULL",
            "VALID"
        ]
    },
    {
        "id": "8f4570ad7dc9a251",
        "type": "change",
        "z": "98470bed41d6c5cf",
        "name": "Set Global SLPPa",
        "rules": [
            {
                "t": "set",
                "p": "SLPPa",
                "pt": "global",
                "to": "payload.properties.seaLevelPressure.value",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "6ca98cba74cde90e",
        "type": "switch",
        "z": "98470bed41d6c5cf",
        "name": "Is BP Null?",
        "property": "payload.properties.barometricPressure.value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 100,
        "wires": [
            [
                "45f5724519785c01"
            ],
            [
                "f5b9a90567477797"
            ]
        ],
        "outputLabels": [
            "NULL",
            "VALID"
        ]
    },
    {
        "id": "f5b9a90567477797",
        "type": "change",
        "z": "98470bed41d6c5cf",
        "name": "Calc SLP",
        "rules": [
            {
                "t": "set",
                "p": "payload.properties.seaLevelPressure.value",
                "pt": "msg",
                "to": "payload.properties.barometricPressure.value-150",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.properties.seaLevelPressure.qualityControl",
                "pt": "msg",
                "to": "BS",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 110,
        "wires": [
            [
                "8f4570ad7dc9a251"
            ]
        ],
        "info": "Currently just a guesstimate.\r\nProper way would be to extrapolate from known sensor altitude of 4 meters"
    },
    {
        "id": "45f5724519785c01",
        "type": "change",
        "z": "98470bed41d6c5cf",
        "name": "Calc BP",
        "rules": [
            {
                "t": "set",
                "p": "payload.properties.barometricPressure.value",
                "pt": "msg",
                "to": "SLPPa+150",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "payload.properties.barometricPressure.qualityControl",
                "pt": "msg",
                "to": "BS",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 80,
        "wires": [
            [
                "f5b9a90567477797"
            ]
        ],
        "info": "Currently just a guesstimate.\r\nProper way would be to extrapolate from known sensor altitude of 4 meters"
    },
    {
        "id": "b09aec877c95288e",
        "type": "raisingEdge",
        "z": "19d629e7c433e6d2",
        "name": "",
        "property": "payload",
        "threshold": ".5",
        "showState": true,
        "x": 200,
        "y": 80,
        "wires": [
            [
                "8428f369fddfb722"
            ]
        ]
    },
    {
        "id": "8428f369fddfb722",
        "type": "function",
        "z": "19d629e7c433e6d2",
        "name": "function 1",
        "func": "var lastreceived = msg.payload || 0;\nvar currentstate = flow.get(\"buttontogglestate\") || 0;\n//node.warn(\"incoming\" + lastreceived);\nif (lastreceived == 1) {\n  //node.warn(\"lastreceived was 1\");\n  if (currentstate == 1) {\n      currentstate = 0;\n      //node.warn(\"000000\");\n  } else {\n      currentstate = 1;\n      //node.warn(\"111111\");\n  }\n}\nflow.set(\"buttontogglestate\", currentstate);\nmsg.payload = currentstate;\n//node.warn(\"outgoing\" + currentstate);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7f7a4f9ed924376d",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 100,
        "wires": [
            [
                "156d2db7093d7558"
            ]
        ]
    },
    {
        "id": "01f76c339f4adbd0",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 100,
        "wires": []
    },
    {
        "id": "156d2db7093d7558",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "$sum(arr)",
        "func": "// $sum(array)\n\nconst data = {\n    example: [\n        { value: 4 },\n        { value: 7 },\n        { value: 13 },\n        { value: 10 },\n    ],\n};\n\nmsg.topic = (data.example[0].value + data.example[1].value + data.example[2].value + data.example[3].value);\n\n// Returns the arithmetic sum of an array of numbers\nconst expression = jsonata(\"$sum(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 100,
        "wires": [
            [
                "01f76c339f4adbd0"
            ]
        ]
    },
    {
        "id": "081cd34d6d10eff0",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "$max(arr)",
        "func": "// $max(array)\n\nconst data = {\n    \"example\": {\n        \"value\": [ 4, 7, 13 ],\n    },\n};\n\n// Returns the maximum number in an array of numbers\nconst expression = jsonata(\"$max(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 140,
        "wires": [
            [
                "2f9225a89d7fc482"
            ]
        ]
    },
    {
        "id": "199fed429d430789",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 140,
        "wires": [
            [
                "081cd34d6d10eff0"
            ]
        ]
    },
    {
        "id": "2f9225a89d7fc482",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 140,
        "wires": []
    },
    {
        "id": "4db6caf373859923",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "$min(arr)",
        "func": "// $min(array)\n\nconst data = {\n    \"example\": {\n        \"value\": [ 4, 7, 13 ],\n    },\n};\n\n// Returns the minimum number in an array of numbers\nconst expression = jsonata(\"$min(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 180,
        "wires": [
            [
                "b40ecdc26eb65a87"
            ]
        ]
    },
    {
        "id": "e484adc4ab3f4dfe",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "$average(arr)",
        "func": "// $average(array)\n\nconst value = [];\nvalue[0] = 4;\nvalue[1] = 7;\nvalue[2] = 13;\n\nconst data = { \"example\": { value }};\n\n// Returns the mean value of an array of numbers\nconst expression = jsonata(\"$average(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 220,
        "wires": [
            [
                "c542a10e1e9711be"
            ]
        ]
    },
    {
        "id": "599ebbfcc3bfb18c",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 180,
        "wires": [
            [
                "4db6caf373859923"
            ]
        ]
    },
    {
        "id": "af16cf6a74150575",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 220,
        "wires": [
            [
                "e484adc4ab3f4dfe"
            ]
        ]
    },
    {
        "id": "b40ecdc26eb65a87",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 180,
        "wires": []
    },
    {
        "id": "c542a10e1e9711be",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "14bc35a7e871612e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 220,
        "wires": []
    },
    {
        "id": "a30467908fac9463",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$number(arg)",
        "func": "// $number(argument)\n// Argument can be string or boolean\n\nconst example = [];\nexample[0] = true;\nexample[1] = false;\nexample[2] = \"2\";\n\n// Casts the arg parameter to a number\nconst expression = [];\nexpression[0] = jsonata(`$number(${example[0]})`);\nexpression[1] = jsonata(`$number(${example[1]})`);\nexpression[2] = jsonata(`$number(${example[2]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 980,
        "wires": [
            [
                "fc277a1902454d3c"
            ]
        ]
    },
    {
        "id": "fc277a1902454d3c",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 980,
        "wires": []
    },
    {
        "id": "7224275fee07915e",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$abs(num)",
        "func": "// $abs(number)\n\nconst example = [];\nexample[0] = 2;\nexample[1] = -3;\n\n// Returns the absolute value of the number\nconst expression = [];\nexpression[0] = jsonata(`$abs(${example[0]})`);\nexpression[1] = jsonata(`$abs(${example[1]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1020,
        "wires": [
            [
                "02cf895c04cc2d17"
            ]
        ]
    },
    {
        "id": "f6c9478912e95bc4",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 980,
        "wires": [
            [
                "a30467908fac9463"
            ]
        ]
    },
    {
        "id": "48b06fdef4c9ffc7",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1020,
        "wires": [
            [
                "7224275fee07915e"
            ]
        ]
    },
    {
        "id": "02cf895c04cc2d17",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1020,
        "wires": []
    },
    {
        "id": "8cd41f907d7b91e1",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$floor(num)",
        "func": "// $floor(number)\n\nconst example = [];\nexample[0] = 4;\nexample[1] = 4.4;\nexample[2] = 4.8;\nexample[3] = -4.4;\n\n// Returns the value of number rounded down to the nearest integer\nconst expression = [];\nexpression[0] = jsonata(`$floor(${example[0]})`);\nexpression[1] = jsonata(`$floor(${example[1]})`);\nexpression[2] = jsonata(`$floor(${example[2]})`);\nexpression[3] = jsonata(`$floor(${example[3]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1060,
        "wires": [
            [
                "b784ce33202f9e4a"
            ]
        ]
    },
    {
        "id": "5d35112b0d7ffeb0",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$ceil(num)",
        "func": "// $ceil(number)\n\nconst example = [];\nexample[0] = 4;\nexample[1] = 4.4;\nexample[2] = 4.8;\nexample[3] = -4.4;\n\n// Returns the value of number rounded up to the nearest integer\nconst expression = [];\nexpression[0] = jsonata(`$ceil(${example[0]})`);\nexpression[1] = jsonata(`$ceil(${example[1]})`);\nexpression[2] = jsonata(`$ceil(${example[2]})`);\nexpression[3] = jsonata(`$ceil(${example[3]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "1af0b15b623b4243"
            ]
        ]
    },
    {
        "id": "35d492f50182f0e9",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$round(num, pre)",
        "func": "// $round(num [, precision])\n\nconst example = [];\nexample[0] = 3.14159265;\nexample[1] = 425;\n\n// Returns the value of the number parameter\n// rounded to decimal places specified by optional precision parameter\nconst expression = [];\nexpression[0] = jsonata(`$round(${example[0]})`);\nexpression[1] = jsonata(`$round(${example[0]},2)`);\nexpression[2] = jsonata(`$round(${example[1]},-1)`);\nexpression[3] = jsonata(`$round(${example[1]},-2)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 1140,
        "wires": [
            [
                "2b8feafd3ebed3db"
            ]
        ]
    },
    {
        "id": "1b8e6db00e94f577",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1060,
        "wires": [
            [
                "8cd41f907d7b91e1"
            ]
        ]
    },
    {
        "id": "50ee5beef4616939",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1100,
        "wires": [
            [
                "5d35112b0d7ffeb0"
            ]
        ]
    },
    {
        "id": "cb3905a7fc7807dc",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1140,
        "wires": [
            [
                "35d492f50182f0e9"
            ]
        ]
    },
    {
        "id": "b784ce33202f9e4a",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1060,
        "wires": []
    },
    {
        "id": "2b8feafd3ebed3db",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1140,
        "wires": []
    },
    {
        "id": "1af0b15b623b4243",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1100,
        "wires": []
    },
    {
        "id": "5f58f7b332bc5032",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$power(base , exp)",
        "func": "// $power(base , exponent)\n\nconst example = 5;\n\n// Returns the value of base raised to the power of exponent\nconst expression = [];\nexpression[0] = jsonata(`$power(${example}, 0)`);\nexpression[1] = jsonata(`$power(${example}, 1)`);\nexpression[2] = jsonata(`$power(${example}, 2)`);\nexpression[3] = jsonata(`$power(${example}, -1)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 1180,
        "wires": [
            [
                "27784537ed674d95"
            ]
        ]
    },
    {
        "id": "6a2a296d28e805e8",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1180,
        "wires": [
            [
                "5f58f7b332bc5032"
            ]
        ]
    },
    {
        "id": "27784537ed674d95",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1180,
        "wires": []
    },
    {
        "id": "46d1ce782ac05500",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$sqrt(num)",
        "func": "const example = [];\nexample[0] = 16;\nexample[1] = 25;\n\n// Returns the square root of the value of the number\nconst expression = [];\nexpression[0] = jsonata(`$sqrt(${example[0]})`);\nexpression[1] = jsonata(`$sqrt(${example[1]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1220,
        "wires": [
            [
                "f5a7b9ba44d6da4f"
            ]
        ]
    },
    {
        "id": "a1007695caca77de",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1220,
        "wires": [
            [
                "46d1ce782ac05500"
            ]
        ]
    },
    {
        "id": "f5a7b9ba44d6da4f",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1220,
        "wires": []
    },
    {
        "id": "f0854f7725cd1e0a",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$random()",
        "func": "// $random()\n\n// Returns a pseudo random number (0 ≤ n < 1)\nconst expression = jsonata(\"$random()\");\n\nmsg.payload = [];\nmsg.payload[0] = expression.evaluate();\nmsg.payload[1] = jsonata(\"$random()\").evaluate();\nmsg.payload[2] = jsonata(`$round(${msg.payload[1]}, 2)`).evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1260,
        "wires": [
            [
                "fcea2e9a5a9a9a31"
            ]
        ]
    },
    {
        "id": "7cd53419b0c387ef",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1260,
        "wires": [
            [
                "f0854f7725cd1e0a"
            ]
        ]
    },
    {
        "id": "fcea2e9a5a9a9a31",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1260,
        "wires": []
    },
    {
        "id": "0e87c5fd5d165065",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$formatNumber(num, pic)",
        "func": "// $formatNumber(num, picture [, options])\n\nconst example = [];\nexample[0] = 3.14159265;\nexample[1] = 1234.5678;\n\n// Casts the number to a string and formats it to a decimal representation \n// as specified by the picture string\nconst expression = [];\nexpression[0] = jsonata(`$formatNumber(${example[0]}, \"#.#\")`);\nexpression[1] = jsonata(`$formatNumber(${example[0]}, \"#.00\")`);\nexpression[2] = jsonata(`$formatNumber(${example[1]}, \"#,###.##\")`);\nexpression[3] = jsonata(`$formatNumber(${example[1]}, \"0,000.00%\")`);\nexpression[4] = jsonata(`$formatNumber(${example[1]}, \"#,###.####pm\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 1300,
        "wires": [
            [
                "cc2aa57778a71052"
            ]
        ]
    },
    {
        "id": "a58db5b349b23760",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1300,
        "wires": [
            [
                "0e87c5fd5d165065"
            ]
        ]
    },
    {
        "id": "cc2aa57778a71052",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1300,
        "wires": []
    },
    {
        "id": "d225d4b187f80ae9",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$formatBase(num, rad)",
        "func": "// $formatBase(num, radix)\n// If radix is not specified, then it defaults to base 10\n// radix can be between 2 and 36\n\nconst example = [];\nexample[0] = 10;\nexample[1] = 15;\n\n// Casts the number to a string and formats it to an integer\n// represented in the number base specified by the radix\nconst expression = [];\nexpression[0] = jsonata(`$formatBase(${example[0]})`);\nexpression[1] = jsonata(`$formatBase(${example[0]}, 2)`);\nexpression[2] = jsonata(`$formatBase(${example[0]}, 16)`);\nexpression[3] = jsonata(`$formatBase(${example[1]}, 2)`);\nexpression[4] = jsonata(`$formatBase(${example[1]}, 16)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 1340,
        "wires": [
            [
                "da137d0fda54aa1d"
            ]
        ]
    },
    {
        "id": "cd2f7b9ece57ec42",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1340,
        "wires": [
            [
                "d225d4b187f80ae9"
            ]
        ]
    },
    {
        "id": "da137d0fda54aa1d",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1340,
        "wires": []
    },
    {
        "id": "bcc10f8b59b05223",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$formatInteger(num, pic)",
        "func": "// $formatInteger(num, picture)\n\nconst example = [];\nexample[0] = 12;\nexample[1] = 115;\n\n// Casts the number to a string, formats it to an integer representation as specified by the picture\nconst expression = [];\nexpression[0] = jsonata(`$formatInteger(${example[0]}, \"w\")`);\nexpression[1] = jsonata(`$formatInteger(${example[0]}, \"I\")`);\nexpression[2] = jsonata(`$formatInteger(${example[1]}, \"w\")`);\nexpression[3] = jsonata(`$formatInteger(${example[1]}, \"I\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 1380,
        "wires": [
            [
                "68faa6604649be08"
            ]
        ]
    },
    {
        "id": "4aa9214f104589e5",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 1380,
        "wires": [
            [
                "bcc10f8b59b05223"
            ]
        ]
    },
    {
        "id": "68faa6604649be08",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1380,
        "wires": []
    },
    {
        "id": "c879b13b62b7e9e9",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "$parseInteger(str, pic)",
        "func": "// $parseInteger(string, picture)\n\nconst example = [];\nexample[0] = \"five\";\nexample[1] = \"two thousand, one hundred and fifteen\";\nexample[2] = \"123,456,789\";\nexample[3] = \"VIII\";\n\n// Parses the contents of the string parameter to an integer\n// using the format specified by the picture\nconst expression = [];\nexpression[0] = jsonata(`$parseInteger(\"${example[0]}\", \"w\")`);\nexpression[1] = jsonata(`$parseInteger(\"${example[1]}\", \"w\")`);\nexpression[2] = jsonata(`$parseInteger(\"${example[2]}\", \"#,###,##0\")`);\nexpression[3] = jsonata(`$parseInteger(\"${example[3]}\", \"I\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 1420,
        "wires": [
            [
                "e224ce9d130829a1"
            ]
        ]
    },
    {
        "id": "46054494447c8ae2",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 1420,
        "wires": [
            [
                "c879b13b62b7e9e9"
            ]
        ]
    },
    {
        "id": "e224ce9d130829a1",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "bd78a6345689686e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1420,
        "wires": []
    },
    {
        "id": "3cc6261891386b5f",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "b5288005cfaed881"
            ]
        ]
    },
    {
        "id": "8e042b0206d96ec3",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 80,
        "wires": []
    },
    {
        "id": "b5288005cfaed881",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$string(arg, pre)",
        "func": "// $string(arg, prettify)\n// Argument can be boolean, number, array, null\n// Prettify is boolean, if true, then \"prettified\" JSON is produced\n\nconst example = [];\nexample[0] = true;\nexample[1] = [ 1, \"'false'\", false ];\nexample[2] = null;\nexample[3] = new Date();\nconst data = {\n    example: {\n        test: {\n            pos1: \"success\",\n            pos2: \"failure\",\n        },\n    },\n};\n\n// Casts the arg parameter to a string\nconst expression = [];\nexpression[0] = jsonata(`$string(\"${example[0]}\")`);\nexpression[1] = jsonata(`$string(\"${example[1]}\")`);\nexpression[2] = jsonata(`$string(\"${example[2]}\")`);\nexpression[3] = jsonata(`$string(\"${example[3]}\")`);\nexpression[4] = jsonata(\"$string(example)\");\nexpression[5] = jsonata(\"$string(example, true)\");\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate(data);\nmsg.payload[5] = expression[5].evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 80,
        "wires": [
            [
                "8e042b0206d96ec3"
            ]
        ]
    },
    {
        "id": "c4e236b5f403ca46",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "97198c59935dad84"
            ]
        ]
    },
    {
        "id": "139d3d075aef541b",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 120,
        "wires": []
    },
    {
        "id": "97198c59935dad84",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$length(str)",
        "func": "// $length(string)\n\nconst example = [];\nexample[0] = \"hello world\";\nexample[1] = [\"test array\"];\nexample[2] = false;\nexample[3] = null;\n\n// Returns the number of characters in the string\nconst expression = [];\nexpression[0] = jsonata(`$length(\"${example[0]}\")`);\nexpression[1] = jsonata(`$length(\"${example[1]}\")`);\nexpression[2] = jsonata(`$length(\"${example[2]}\")`);\nexpression[3] = jsonata(`$length(\"${example[3]}\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 120,
        "wires": [
            [
                "139d3d075aef541b"
            ]
        ]
    },
    {
        "id": "4d7f61e7faedcb5a",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$substring(str ,sta, len)",
        "func": "// $substring(string, start[, length])\n\nconst example = [ \"hello world\", \"goodbye friend\" ];\n\n// Returns a string containing the characters from start\n// If length is specified, then the substring will be equal to the length in characters\n// If start is negative then it indicates the number of characters from the end\nconst expression = [];\nexpression[0] = jsonata(`$substring(\"${example[0]}\", 2)`);\nexpression[1] = jsonata(`$substring(\"${example[0]}\", 3, 5)`);\nexpression[2] = jsonata(`$substring(\"${example[0]}\", -5)`);\nexpression[3] = jsonata(`$substring(\"${example[0]}\", -5, 3)`);\nexpression[5] = jsonata(`$substring(\"${example[1]}\", 4, 3)`);\nexpression[4] = jsonata(`$substring(\"${example[1]}\", -10, 3)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\nmsg.payload[5] = expression[5].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 160,
        "wires": [
            [
                "66744dce571a09f0"
            ]
        ]
    },
    {
        "id": "e48f9f8fb961a5d6",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "4d7f61e7faedcb5a"
            ]
        ]
    },
    {
        "id": "66744dce571a09f0",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "1cc1025e35c9a45f",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$substringBefore(str ,cha)",
        "func": "// $substringBefore(string, characters)\n\nconst example = [];\nexample[0] = `hello \nworld`;\n\n// Returns the substring before the first occurrence of the character sequence\nconst expression = [];\nexpression[0] = jsonata(`$substringBefore(\"${example[0]}\", \" \")`);\nexpression[1] = jsonata(`$substringBefore(\"${example[0]}\", \"l\")`);\nexpression[2] = jsonata(`$substringBefore(\"${example[0]}\", \"o\")`);\nexpression[3] = jsonata(`$substringBefore(\"${example[0]}\", \"r\")`);\nexpression[4] = jsonata(`$substringBefore(\"${example[0]}\", \"\\n\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 200,
        "wires": [
            [
                "f30e4fadc037c830"
            ]
        ]
    },
    {
        "id": "0778494e0323db2d",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "1cc1025e35c9a45f"
            ]
        ]
    },
    {
        "id": "f30e4fadc037c830",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 200,
        "wires": []
    },
    {
        "id": "3079704ac5de15ab",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$substringAfter(str ,cha)",
        "func": "// $substringAfter(string, characters)\n\nconst example = [`hello \nworld`];\n\n// Returns the substring after the first occurrence of the character sequence\nconst expression = [\n    jsonata(`$substringAfter(\"${example[0]}\", \" \")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"l\")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"o\")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"r\")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"\\n\")`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n    expression[2].evaluate(),\n    expression[3].evaluate(),\n    expression[4].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 240,
        "wires": [
            [
                "8a34220c1cf0ddf2"
            ]
        ]
    },
    {
        "id": "8a34220c1cf0ddf2",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 240,
        "wires": []
    },
    {
        "id": "721d1f7a9c3c34ad",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "3079704ac5de15ab"
            ]
        ]
    },
    {
        "id": "ac702313720942fd",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$uppercase(str)",
        "func": "// $uppercase(string)\n\nconst example = \"Hello World\";\n\n// Returns a string with all the characters converted to uppercase\nconst expression = jsonata(`$uppercase(\"${example}\")`);\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 280,
        "wires": [
            [
                "5358376cf87433d3"
            ]
        ]
    },
    {
        "id": "20a8bff4c82dc0a6",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "ac702313720942fd"
            ]
        ]
    },
    {
        "id": "5358376cf87433d3",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 280,
        "wires": []
    },
    {
        "id": "fd1ca4d65201e56e",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$lowercase(str)",
        "func": "// $lowercase(string)\n\nconst example = \"Hello World\";\n\n// Returns a string with all the characters converted to lowercase\nconst expression = jsonata(`$lowercase(\"${example}\")`);\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 320,
        "wires": [
            [
                "bc6a61999fd08781"
            ]
        ]
    },
    {
        "id": "1597936a4dd07adc",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "fd1ca4d65201e56e"
            ]
        ]
    },
    {
        "id": "bc6a61999fd08781",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 320,
        "wires": []
    },
    {
        "id": "bc6b032b788377d5",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$trim(str)",
        "func": "// $trim(string)\n\nconst example = `Hello\nWorld\n`;\n\n// Normalizes and trims all whitespace characters in string\n// All tabs, carriage returns, and line feeds are replaced with spaces.\n// Contiguous sequences of spaces are reduced to a single space.\n// Trailing and leading spaces are removed\nconst expression = jsonata(`$trim(\"${example}\")`);\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 280,
        "y": 360,
        "wires": [
            [
                "f0028c6d46f58225"
            ]
        ]
    },
    {
        "id": "1c0fdc0f44e2d65d",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "bc6b032b788377d5"
            ]
        ]
    },
    {
        "id": "f0028c6d46f58225",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 360,
        "wires": []
    },
    {
        "id": "634bff34b4bfa755",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$pad(str, wid, cha)",
        "func": "// $pad(string, width [, character])\n\nconst data = {\n    example: \"Hello\",\n    char: \"X\",\n    width: -7,\n};\n\n// Returns a copy of the string str with extra padding\n// It's total number of characters is at least the absolute value of the width\n// If width is a positive number, then the string is padded to the right\n// If negative, it is padded to the left\n// char argument specifies the padding character, default is space\nconst expression = [\n    jsonata(\"$pad(example, 7)\"),\n    jsonata(\"$pad(example, -7)\"),\n    jsonata(\"$pad(example, 7, '#')\"),\n    jsonata(\"$pad(example, width, char)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 400,
        "wires": [
            [
                "aaf9bfbca7e66685"
            ]
        ]
    },
    {
        "id": "471d0565d8107992",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "634bff34b4bfa755"
            ]
        ]
    },
    {
        "id": "aaf9bfbca7e66685",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 400,
        "wires": []
    },
    {
        "id": "1422679d35d613e6",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$contains(str, pat)",
        "func": "// $contains(string, pattern)\n// pattern can be a string or a regular expression (regex)\n\nconst example = \"Hello World\";\nconst regex = [ /wo/, /wo/i ];\n\n// Returns true if str is matched by pattern, otherwise it returns false\nconst expression = [\n    jsonata(`$contains(\"${example}\", \"orl\")`),\n    jsonata(`$contains(\"${example}\", \"goodbye\")`),\n    jsonata(`$contains(\"${example}\", ${regex[0]})`),\n    jsonata(`$contains(\"${example}\", ${regex[1]})`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n    expression[2].evaluate(),\n    expression[3].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 440,
        "wires": [
            [
                "12bf1c0706c42cd9"
            ]
        ]
    },
    {
        "id": "15f7d0253372dacc",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$split(str, sep, lim)",
        "func": "// $split(string, separator [, limit])\n// Separator parameter can either be a string or a regular expression (regex)\n// Limit parameter is a number that specifies the maximum of substrings to include in the result\n\nconst example = \"Hello World\";\nconst regex = /l/;\n\n// Splits the str parameter into an array of substrings by the separator parameter\nconst expression = [\n    jsonata(`$split(\"${example}\", \" \")`),\n    jsonata(`$split(\"${example}\", \"l\")`),\n    jsonata(`$split(\"${example}\", \"l\", 2)`),\n    jsonata(`$split(\"${example}\", ${regex})`),\n    jsonata(`$split(\"${example}\", ${regex}, 3)`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n    expression[2].evaluate(),\n    expression[3].evaluate(),\n    expression[4].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 480,
        "wires": [
            [
                "382e989d6beed2b9"
            ]
        ]
    },
    {
        "id": "3578911993d1359b",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "1422679d35d613e6"
            ]
        ]
    },
    {
        "id": "0ad7bc5dbbb01e64",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 480,
        "wires": [
            [
                "15f7d0253372dacc"
            ]
        ]
    },
    {
        "id": "12bf1c0706c42cd9",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 440,
        "wires": []
    },
    {
        "id": "382e989d6beed2b9",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 480,
        "wires": []
    },
    {
        "id": "6032d7a86bd608af",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$join(arr, sep)",
        "func": "// $join(array[, separator])\n\nconst data = {\n    example: [ \"Hello\", \"World\", \"Goodbye\", \"Moon\" ],\n};\n\n// Joins an array of component strings into a single concatenated string\nconst expression = [\n    jsonata(\"$join(example)\"),\n    jsonata(\"$join(example, '-')\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 520,
        "wires": [
            [
                "ceaf6f20ba283064"
            ]
        ]
    },
    {
        "id": "9e39dce96c0e40ba",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 520,
        "wires": [
            [
                "6032d7a86bd608af"
            ]
        ]
    },
    {
        "id": "ceaf6f20ba283064",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 520,
        "wires": []
    },
    {
        "id": "6a216142b72c7570",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$match(str, pat, lim)",
        "func": "// $match(str, pattern [, limit])\n\nlet data = {\n    example: \"ababbabbcc\",\n};\n\n// Applies the string to the pattern regular expression and returns an array of objects\nconst expression = [\n    jsonata(\"$match(example, /a(b+)/)\"),\n    jsonata(\"$match(example, /a(b+)/, 1)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 560,
        "wires": [
            [
                "a634125d8a135739"
            ]
        ]
    },
    {
        "id": "b191f4f849f6932b",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "6a216142b72c7570"
            ]
        ]
    },
    {
        "id": "a634125d8a135739",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 560,
        "wires": []
    },
    {
        "id": "03ae99be7404fdd5",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$replace(str, pat, rep, lim)",
        "func": "// $replace(string, pattern, replacement [, limit])\n// Pattern parameter can either be a string or a regular expression (regex)\n\nconst example = \"Hello world\";\nconst example2 = \"Billy Bob\";\nconst regex = /(\\w+)\\s(\\w+)/;\n\n// Finds occurrences of pattern within string and replaces them with replacement\nconst expression = [\n    jsonata(`$replace(\"${example}\", \"Hello\", \"Goodbye cruel\")`),\n    jsonata(`$replace(\"${example2}\", ${regex}, \"$2, $1\")`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 600,
        "wires": [
            [
                "72ab71f8ff083acd"
            ]
        ]
    },
    {
        "id": "ed05c5a681fd1709",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 600,
        "wires": [
            [
                "03ae99be7404fdd5"
            ]
        ]
    },
    {
        "id": "72ab71f8ff083acd",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 600,
        "wires": []
    },
    {
        "id": "f6824991eb4a71e6",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$eval(exp, con)",
        "func": "// $eval(expression [, context])\n// Expression parameter must be a string\n\nconst data = {\n    example: [ 4, 5, 6 ],\n};\n\n// Parses and evaluates expression which contains literal JSON\n// or a JSONata expression using the current context as the context for evaluation.\nconst expression = [\n    jsonata(\"$eval('[1,2,3]')\"),\n    jsonata(\"$eval('example')\"),\n    jsonata(\"$eval('[$string(7),$string(8),$string(9)]')\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(data),\n    expression[2].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 640,
        "wires": [
            [
                "280344adbf650555"
            ]
        ]
    },
    {
        "id": "7256b2d99c71abb2",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "f6824991eb4a71e6"
            ]
        ]
    },
    {
        "id": "280344adbf650555",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 640,
        "wires": []
    },
    {
        "id": "ed2e6980f986b9ae",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$base64encode(str)",
        "func": "// $base64encode(string)\n\nconst data = {\n    example: [\n    \"Hello world\",\n    \"This is my secret phrase.\",\n    \"{theKey: 'This is a JSON string example'};\",\n    ],\n};\n\n// Converts an ASCII string to a base 64 representation\nconst expression = [\n    jsonata(\"$base64encode(example[0])\"),\n    jsonata(\"$base64encode(example[1])\"),\n    jsonata(\"$base64encode(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 680,
        "wires": [
            [
                "fee84a10519aa421"
            ]
        ]
    },
    {
        "id": "8ac685159923c118",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 680,
        "wires": [
            [
                "ed2e6980f986b9ae"
            ]
        ]
    },
    {
        "id": "fee84a10519aa421",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 680,
        "wires": []
    },
    {
        "id": "14a8c5089653d59f",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$base64decode(str)",
        "func": "// $base64decode(string)\n\nconst data = {\n    example: [\n    \"SGVsbG8gd29ybGQ=\",\n    \"VGhpcyBpcyBteSBzZWNyZXQgcGhyYXNlLg==\",\n    \"e3RoZUtleTogJ1RoaXMgaXMgYSBKU09OIHN0cmluZyBleGFtcGxlJ307\",\n    ],\n};\n\n// Converts base 64 encoded bytes to a string, using a UTF-8 Unicode codepage\nconst expression = [\n    jsonata(\"$base64decode(example[0])\"),\n    jsonata(\"$base64decode(example[1])\"),\n    jsonata(\"$base64decode(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 720,
        "wires": [
            [
                "37889b302715c27e"
            ]
        ]
    },
    {
        "id": "58147d798906386f",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 720,
        "wires": [
            [
                "14a8c5089653d59f"
            ]
        ]
    },
    {
        "id": "37889b302715c27e",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 720,
        "wires": []
    },
    {
        "id": "6f8cef3d757675b7",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$encodeUrlComponent(str)",
        "func": "// $encodeUrlComponent(string)\n\nconst data = {\n    example: [\n    \"https://www.youtube.com/watch?v=ksGeUD26Mw0\",\n    \"?v=ksGeUD26Mw0\",\n    \"{theKey: 'This is a JSON string example'};\",\n    ],\n};\n\n// Encodes URL component by replacing certain characters with the UTF-8 encoding of the character using escape sequences\nconst expression = [\n    jsonata(\"$encodeUrlComponent(example[0])\"),\n    jsonata(\"$encodeUrlComponent(example[1])\"),\n    jsonata(\"$encodeUrlComponent(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 340,
        "y": 760,
        "wires": [
            [
                "aea93a05d365da9c"
            ]
        ]
    },
    {
        "id": "98056fd4c8ea54b0",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$encodeUrl(str)",
        "func": "// $encodeUrl(string)\n\nconst data = {\n    example: [\n    \"Hello world\",\n    \"https://nodered.org/docs/ & not a real url \",\n    \"{theKey: 'This is a JSON string example'};\",\n    ],\n};\n\n// Encodes URL by replacing certain characters with the UTF-8 encoding of the character using escape sequences\nconst expression = [\n    jsonata(\"$encodeUrl(example[0])\"),\n    jsonata(\"$encodeUrl(example[1])\"),\n    jsonata(\"$encodeUrl(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 840,
        "wires": [
            [
                "251698b309d07a7e"
            ]
        ]
    },
    {
        "id": "265d1b2dc6aae07a",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "6f8cef3d757675b7"
            ]
        ]
    },
    {
        "id": "fdccd987154c9d12",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 840,
        "wires": [
            [
                "98056fd4c8ea54b0"
            ]
        ]
    },
    {
        "id": "aea93a05d365da9c",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 760,
        "wires": []
    },
    {
        "id": "251698b309d07a7e",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 840,
        "wires": []
    },
    {
        "id": "faad7e5e44d62653",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$decodeUrlComponent(str)",
        "func": "// $decodeUrlComponent(string)\n\nconst data = {\n    example: [\n    \"https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DksGeUD26Mw0\",\n    \"%3Fv%3DksGeUD26Mw0\",\n    \"%7BtheKey%3A%20'This%20is%20a%20JSON%20string%20example'%7D%3B\",\n    ],\n};\n\n// Decodes a URL component previously created by encodeUrlComponent\nconst expression = [\n    jsonata(\"$decodeUrlComponent(example[0])\"),\n    jsonata(\"$decodeUrlComponent(example[1])\"),\n    jsonata(\"$decodeUrlComponent(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 340,
        "y": 800,
        "wires": [
            [
                "e8d3957524002c5b"
            ]
        ]
    },
    {
        "id": "d13dbe29814dadd4",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "faad7e5e44d62653"
            ]
        ]
    },
    {
        "id": "e8d3957524002c5b",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 800,
        "wires": []
    },
    {
        "id": "85f562c1f72f7317",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "$decodeUrl(str)",
        "func": "// $decodeUrl(string)\n\nconst data = {\n    example: [\n    \"Hello%20world\",\n    \"https://nodered.org/docs/%20&%20not%20a%20real%20url%20\",\n    \"%7BtheKey:%20'This%20is%20a%20JSON%20string%20example'%7D;\",\n    ],\n};\n\n// Decodes a URL previously created by encodeUrl\nconst expression = [\n    jsonata(\"$decodeUrl(example[0])\"),\n    jsonata(\"$decodeUrl(example[1])\"),\n    jsonata(\"$decodeUrl(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 880,
        "wires": [
            [
                "78900f26fea3faf7"
            ]
        ]
    },
    {
        "id": "2587c0a4b7cf100b",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 880,
        "wires": [
            [
                "85f562c1f72f7317"
            ]
        ]
    },
    {
        "id": "78900f26fea3faf7",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "ef756230b8be8f60",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 880,
        "wires": []
    },
    {
        "id": "e349d1491539c726",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "$boolean(arg)",
        "func": "// $boolean(arg)\n\n/*\nArgument type\t    Result\nBoolean\t            unchanged\nstring: empty\t    false\nstring: non-empty\ttrue\nnumber: 0\t        false\nnumber: non-zero\ttrue\nnull\t            false\narray: empty\t    false\narray: any true\t    true\narray: all false\tfalse\nobject: empty\t    false\nobject: non-empty\ttrue\nfunction\t        false\n*/\n\nconst data = {\n    example: [\n    true,\n    false,\n    \"\",\n    \"Hello world\",\n    0,\n    1,\n    null,\n    [],\n    [ false, true ],\n    [false],\n    {},\n    { \"non\": \"empty\" },\n    function test() { return; },\n    ],\n};\n\n// Casts the argument to a Boolean\nconst expression = [\n    jsonata(\"$boolean(example[0])\"),\n    jsonata(\"$boolean(example[1])\"),\n    jsonata(\"$boolean(example[2])\"),\n    jsonata(\"$boolean(example[3])\"),\n    jsonata(\"$boolean(example[4])\"),\n    jsonata(\"$boolean(example[5])\"),\n    jsonata(\"$boolean(example[6])\"),\n    jsonata(\"$boolean(example[7])\"),\n    jsonata(\"$boolean(example[8])\"),\n    jsonata(\"$boolean(example[9])\"),\n    jsonata(\"$boolean(example[10])\"),\n    jsonata(\"$boolean(example[11])\"),\n    jsonata(\"$boolean(example[12])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n    expression[8].evaluate(data),\n    expression[9].evaluate(data),\n    expression[10].evaluate(data),\n    expression[11].evaluate(data),\n    expression[12].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 320,
        "wires": [
            [
                "6bc8446341b4b5f2"
            ]
        ]
    },
    {
        "id": "4253c825027547ad",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 320,
        "wires": [
            [
                "e349d1491539c726"
            ]
        ]
    },
    {
        "id": "6bc8446341b4b5f2",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 320,
        "wires": []
    },
    {
        "id": "1725374f271e4efc",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "$not(arg)",
        "func": "// $not(arg)\n\n/*\nArgument type\t    Result\nBoolean\t            opposite\nstring: empty\t    true\nstring: non-empty\tfalse\nnumber: 0\t        true\nnumber: non-zero\tfalse\nnull\t            true\narray: empty\t    true\narray: any true\t    false\narray: all false\ttrue\nobject: empty\t    true\nobject: non-empty\tfalse\nfunction\t        true\n*/\n\nconst data = {\n    example: [\n    true,\n    false,\n    \"\",\n    \"Hello world\",\n    0,\n    1,\n    null,\n    [],\n    [ false, true ],\n    [false],\n    {},\n    { \"non\": \"empty\" },\n    function test() { return; },\n    ],\n};\n\n// Returns Boolean NOT on the argument, the revese of $boolean()\nconst expression = [\n    jsonata(\"$not(example[0])\"),\n    jsonata(\"$not(example[1])\"),\n    jsonata(\"$not(example[2])\"),\n    jsonata(\"$not(example[3])\"),\n    jsonata(\"$not(example[4])\"),\n    jsonata(\"$not(example[5])\"),\n    jsonata(\"$not(example[6])\"),\n    jsonata(\"$not(example[7])\"),\n    jsonata(\"$not(example[8])\"),\n    jsonata(\"$not(example[9])\"),\n    jsonata(\"$not(example[10])\"),\n    jsonata(\"$not(example[11])\"),\n    jsonata(\"$not(example[12])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n    expression[8].evaluate(data),\n    expression[9].evaluate(data),\n    expression[10].evaluate(data),\n    expression[11].evaluate(data),\n    expression[12].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 360,
        "wires": [
            [
                "377b870d6377fa6a"
            ]
        ]
    },
    {
        "id": "ba23fe1ffa16ed14",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 360,
        "wires": [
            [
                "1725374f271e4efc"
            ]
        ]
    },
    {
        "id": "377b870d6377fa6a",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 360,
        "wires": []
    },
    {
        "id": "db914e64bec8b614",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "$exists(arg)",
        "func": "// $exists(arg)\n\nconst data = {\n    example: [\n    true,\n    false,\n    \"\",\n    \"Hello world\",\n    0,\n    1,\n    null,\n    [],\n    [ false, true ],\n    [false],\n    {},\n    { \"non\": \"empty\" },\n    function test() { return; },\n    ],\n};\n\n// Returns Boolean, true if the arg expression evaluates to a value\n// or false if the expression does not match anything\nconst expression = [\n    jsonata(\"$exists(example[0])\"),\n    jsonata(\"$exists(example[1])\"),\n    jsonata(\"$exists(example[2])\"),\n    jsonata(\"$exists(example[3])\"),\n    jsonata(\"$exists(example[4])\"),\n    jsonata(\"$exists(example[5])\"),\n    jsonata(\"$exists(example[6])\"),\n    jsonata(\"$exists(example[7])\"),\n    jsonata(\"$exists(example[8])\"),\n    jsonata(\"$exists(example[9])\"),\n    jsonata(\"$exists(example[10])\"),\n    jsonata(\"$exists(example[11])\"),\n    jsonata(\"$exists(example[12])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n    expression[8].evaluate(data),\n    expression[9].evaluate(data),\n    expression[10].evaluate(data),\n    expression[11].evaluate(data),\n    expression[12].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 400,
        "wires": [
            [
                "e6ab1014ef3d7b12"
            ]
        ]
    },
    {
        "id": "188fe1c2d2ebb8e3",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 400,
        "wires": [
            [
                "db914e64bec8b614"
            ]
        ]
    },
    {
        "id": "e6ab1014ef3d7b12",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "7f9221a083cba77c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 400,
        "wires": []
    },
    {
        "id": "f9c483f70a4914e0",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "$count(arr)",
        "func": "// $count(array)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [\"Hello World\"],\n    example3: [ true, null, \"\", {}],\n};\n\n// Returns the number of items in the array\nconst expression = [\n    jsonata(\"$count(example1)\"),\n    jsonata(\"$count(example2)\"),\n    jsonata(\"$count(example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 500,
        "wires": [
            [
                "097dda9b77c22bbc"
            ]
        ]
    },
    {
        "id": "654c7ea2cc076b7d",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 500,
        "wires": [
            [
                "f9c483f70a4914e0"
            ]
        ]
    },
    {
        "id": "097dda9b77c22bbc",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 500,
        "wires": []
    },
    {
        "id": "6c7dcaa639c75761",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "$append(arr1, arr2)",
        "func": "// $append(array1, array2)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [\"Hello World\"],\n    example3: [ true, null, \"\", {}],\n};\n\n// Returns an array containing the values in array1 followed by the values in array2.\n// If either parameter is not an array, then it is treated as a singleton array containing that value\nconst expression = [\n    jsonata(\"$append(example1, [6,7,8,9])\"),\n    jsonata(\"$append(example2, 'This is JSONata')\"),\n    jsonata(\"$append(example3, false)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 540,
        "wires": [
            [
                "39348bddd6cd6ea4"
            ]
        ]
    },
    {
        "id": "bb52ed5515e1600c",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 540,
        "wires": [
            [
                "6c7dcaa639c75761"
            ]
        ]
    },
    {
        "id": "39348bddd6cd6ea4",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 540,
        "wires": []
    },
    {
        "id": "6587273cf41528ac",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "$sort(arr, fun)",
        "func": "// $sort(array [, function])\n\nconst data = {\n    example1: [ 4, 3, 5, 1, 2 ],\n    example2: [ \"Hello World\", \"a\", \"test\" ],\n};\n\n// Returns an array containing all the values in the array, but sorted into order\nconst expression = [\n    jsonata(\"$sort(example1, function($l, $r) {$l > $r})\"),\n    jsonata(\"$sort(example1, function($l, $r) {$l < $r})\"),\n    jsonata(\"$sort(example2, function($l, $r) {$l < $r})\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 580,
        "wires": [
            [
                "e4bc41c71f22c31c"
            ]
        ]
    },
    {
        "id": "37bc59e118a6145b",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 580,
        "wires": [
            [
                "6587273cf41528ac"
            ]
        ]
    },
    {
        "id": "e4bc41c71f22c31c",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 580,
        "wires": []
    },
    {
        "id": "af1434a6c955ae35",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "$reverse(arr)",
        "func": "// $reverse(array)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [ \"A\", \"B\", \"C\", \"D\" ],\n};\n\n// Returns an array containing all the values from the array, but in reverse order\nconst expression = [\n    jsonata(\"$reverse(example1)\"),\n    jsonata(\"$reverse(example2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 620,
        "wires": [
            [
                "31e9ea391e2d85e1"
            ]
        ]
    },
    {
        "id": "c19e927408c93b3c",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 620,
        "wires": [
            [
                "af1434a6c955ae35"
            ]
        ]
    },
    {
        "id": "31e9ea391e2d85e1",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 620,
        "wires": []
    },
    {
        "id": "17602f594fda49bf",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "$shuffle(arr)",
        "func": "// $shuffle(array)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [ \"A\", \"B\", \"C\", \"D\" ],\n};\n\n// Returns an array containing all the values in the array, but shuffled into random order\nconst expression = [\n    jsonata(\"$shuffle(example1)\"),\n    jsonata(\"$shuffle(example2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 660,
        "wires": [
            [
                "b73901b3c9abd775"
            ]
        ]
    },
    {
        "id": "09b2c334fbdb315e",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 660,
        "wires": [
            [
                "17602f594fda49bf"
            ]
        ]
    },
    {
        "id": "b73901b3c9abd775",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 660,
        "wires": []
    },
    {
        "id": "d1b7e717ae08481a",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "$distinct(arr)",
        "func": "// $distinct(array)\n\nconst data = {\n    example1: [ 1, 2, 1, 2, 3, 4, 1, 5, 4 ],\n    example2: [ \"A\", \"A\", \"B\", \"C\", \"D\", \"D\" ],\n};\n\n// Returns an array containing all the values in the array, but with any duplicates removed\nconst expression = [\n    jsonata(\"$distinct(example1)\"),\n    jsonata(\"$distinct(example2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 700,
        "wires": [
            [
                "8b10eec1d8499638"
            ]
        ]
    },
    {
        "id": "9e8177571be8f99f",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 700,
        "wires": [
            [
                "d1b7e717ae08481a"
            ]
        ]
    },
    {
        "id": "8b10eec1d8499638",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 700,
        "wires": []
    },
    {
        "id": "3382776fb18d904d",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "$zip(arr1, ...)",
        "func": "// $zip(array1, ...)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns a convolved (zipped) array containing grouped arrays \n// of values from the array1 ... arrayN arguments from index 0, 1, 2, etc\nconst expression = [\n    jsonata(\"$zip(example1, example2)\"),\n    jsonata(\"$zip(example2, example1)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 740,
        "wires": [
            [
                "da8f480b32e83de4"
            ]
        ]
    },
    {
        "id": "7159dde8aba9e05c",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 740,
        "wires": [
            [
                "3382776fb18d904d"
            ]
        ]
    },
    {
        "id": "da8f480b32e83de4",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "340943aaa9afde77",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 740,
        "wires": []
    },
    {
        "id": "fd352b5e5dc6694b",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "$now()",
        "func": "// $now([picture [, timezone]])\n\nconst data = {\n    example1: \"[M01]/[D01]/[Y0001] [h#1]:[m01][P]\",\n    example2: \"[H01]:[m01]:[s01] [z]\",\n    example3: \"-0600\",\n};\n\n// Generates a UTC timestamp in ISO 8601 compatible format and returns it as a string\n// If the optional picture and timezone parameters are supplied,\n// then the current timestamp is formatted as described by the $fromMillis() function\nconst expression = [\n    jsonata(\"$now()\"),\n    jsonata(\"$now(example1, example3)\"),\n    jsonata(\"$now(example2, example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 890,
        "y": 1300,
        "wires": [
            [
                "7270656ece6828a3"
            ]
        ]
    },
    {
        "id": "2df69d3de31443a9",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1300,
        "wires": [
            [
                "fd352b5e5dc6694b"
            ]
        ]
    },
    {
        "id": "7270656ece6828a3",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1300,
        "wires": []
    },
    {
        "id": "5c92eeb77a6194d8",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "$millis()",
        "func": "// $millis()\n\n// Returns the number of milliseconds since the Unix Epoch (1 January, 1970 UTC) as a number\nconst expression = jsonata(\"$millis()\");\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 1340,
        "wires": [
            [
                "74023126b34ed888"
            ]
        ]
    },
    {
        "id": "a25502239ecce614",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1340,
        "wires": [
            [
                "5c92eeb77a6194d8"
            ]
        ]
    },
    {
        "id": "74023126b34ed888",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1340,
        "wires": []
    },
    {
        "id": "cfed144c068126e1",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "$fromMillis(num, pic, tim)",
        "func": "// $fromMillis(number [, picture [, timezone]])\n\nconst data = {\n    number: 1647393801477,\n    picture1: \"[M01]/[D01]/[Y0001] [h#1]:[m01][P]\",\n    picture2: \"[H01]:[m01]:[s01] [z]\",\n    timezone: \"-0600\",\n};\n\n// Generates a UTC timestamp in ISO 8601 compatible format and returns it as a string\n// If the optional picture and timezone parameters are supplied,\n// then the current timestamp is formatted as described by the $fromMillis() function\nconst expression = [\n    jsonata(\"$fromMillis(number)\"),\n    jsonata(\"$fromMillis(number, picture1)\"),\n    jsonata(\"$fromMillis(number, picture2, timezone)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 950,
        "y": 1380,
        "wires": [
            [
                "027fa6ccac0cbc56"
            ]
        ]
    },
    {
        "id": "011afb255d074158",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1380,
        "wires": [
            [
                "cfed144c068126e1"
            ]
        ]
    },
    {
        "id": "027fa6ccac0cbc56",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1380,
        "wires": []
    },
    {
        "id": "c7751bd2f8c49d94",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "$toMillis(tim, pic)",
        "func": "// $toMillis(timestamp [, picture])\n\nconst data = {\n    number1: \"2022-03-16T01:23:21.477Z\",\n    number2: \"03/16/2022 1:23am\",\n    number3: \"19:23:21\",\n    picture1: \"[M01]/[D01]/[Y0001] [h#1]:[m01][P]\",\n    picture2: \"[H01]:[m01]:[s01]\",\n};\n\n// Generates a UTC timestamp in ISO 8601 compatible format and returns it as a string\n// If the optional picture and timezone parameters are supplied,\n// then the current timestamp is formatted as described by the $fromMillis() function\nconst expression = [\n    jsonata(\"$toMillis(number1)\"),\n    jsonata(\"$toMillis(number2, picture1)\"),\n    jsonata(\"$toMillis(number3, picture2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 1420,
        "wires": [
            [
                "4c12d0e6c7d4268e"
            ]
        ]
    },
    {
        "id": "e4cf415c1974fc31",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1420,
        "wires": [
            [
                "c7751bd2f8c49d94"
            ]
        ]
    },
    {
        "id": "4c12d0e6c7d4268e",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "c88dadefed23d4b9",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1420,
        "wires": []
    },
    {
        "id": "18d6a3564775eda6",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "$map(arr, fun)",
        "func": "// $map(array, function)\n// function(value [, index [, array]])\n\nconst data = {\n    \"example1\": [ 1, 2, 3, 4, 5 ],\n    \"example2\": [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns an array containing the results of applying the function parameter to each value in the array parameter\nconst expression = [\n    jsonata(\"$map(example1, $string)\"),\n    jsonata(\"$map(example1, function($v, $i, $a) { $v + 2 })\"),\n    jsonata(\"$map(example2, function($v, $i, $a) { 'Item ' & ($i+1) & ' of ' & $count($a) & ': ' & $v })\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1540,
        "y": 100,
        "wires": [
            [
                "d5893c4cb59a4bdd"
            ]
        ]
    },
    {
        "id": "50eaf8e14a07f52a",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 100,
        "wires": [
            [
                "18d6a3564775eda6"
            ]
        ]
    },
    {
        "id": "d5893c4cb59a4bdd",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 100,
        "wires": []
    },
    {
        "id": "36b74a0ba9d50269",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "$filter(arr, fun)",
        "func": "// $filter(array, function)\n// function(value [, index [, array]])\n\nconst data = {\n    \"example1\": [ 1, 2, 3, 4, 5 ],\n    \"example2\": [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns an array containing only the values in the array parameter that satisfy the function predicate\nconst expression = [\n    jsonata(\"$filter(example1, function($v, $i, $a) { $v > 2 })\"),\n    jsonata(\"$filter(example2, function($v, $i, $a) { $v != 'C' })\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1540,
        "y": 140,
        "wires": [
            [
                "351f1fe279abfa7f"
            ]
        ]
    },
    {
        "id": "b82c63ced822b93b",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 140,
        "wires": [
            [
                "36b74a0ba9d50269"
            ]
        ]
    },
    {
        "id": "351f1fe279abfa7f",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 140,
        "wires": []
    },
    {
        "id": "ce71c4e4ac746a82",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "$single(arr, fun)",
        "func": "// $single(array, function)\n// function(value [, index [, array]])\n\nconst data = {\n    \"example1\": [ 1, 2, 3, 4, 5 ],\n    \"example2\": [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns the one and only one value in the array parameter that satisfy the function predicate\n// Throws an exception if the number of matching values is not exactly one\nconst expression = [\n    jsonata(\"$single(example1, function($v, $i, $a) { $v = 2 })\"),\n    jsonata(\"$single(example2, function($v, $i, $a) { $v = 'C' })\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1540,
        "y": 180,
        "wires": [
            [
                "40b1d4409f6b8dd5"
            ]
        ]
    },
    {
        "id": "5b3f848b04096e1c",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 180,
        "wires": [
            [
                "ce71c4e4ac746a82"
            ]
        ]
    },
    {
        "id": "40b1d4409f6b8dd5",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 180,
        "wires": []
    },
    {
        "id": "9ad04f517b2aa836",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "$reduce(arr, fun, ini)",
        "func": "// $reduce(array, function [, init])\n// function($accumulator, $value[, $index[, $array]])\n\nconst data = {\n    \"example\": [ 1, 2, 3, 4, 5 ],\n};\n\n// Returns an aggregated value derived from applying the function parameter successively to each value in array\n// in combination with the result of the previous application of the function\nconst expression = [\n    jsonata(\"$reduce(example, function($i, $j){$i + $j})\"),\n    jsonata(\"$reduce(example, function($i, $j){$i * $j})\"),\n    jsonata(\"$reduce(example, function($i, $j){$i + $j}, 405)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1560,
        "y": 220,
        "wires": [
            [
                "23811eafe28ed4b0"
            ]
        ]
    },
    {
        "id": "ec88ad1de0080364",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 220,
        "wires": [
            [
                "9ad04f517b2aa836"
            ]
        ]
    },
    {
        "id": "23811eafe28ed4b0",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "b9473f481d46341e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 220,
        "wires": []
    },
    {
        "id": "61eba193709b4747",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$keys(obj)",
        "func": "// $keys(object)\n\nconst data = {\n    example1: {\n        \"A\": 1,\n        \"B\": 2,\n        \"C\": 3,\n        \"D\": 4,\n        \"E\": 5,\n    },\n    example2: {\n        \"payload\": \"Success\",\n        \"topic\": \"test\",\n    },\n    example3: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"A\": 3 },\n        { \"C\": 4 },\n        { \"B\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Returns an array containing the keys in the object.\n// If the argument is an array of objects, then the returned contains\n// a de-duplicated list of all the keys in all of the objects.\nconst expression = [\n    jsonata(\"$keys(example1)\"),\n    jsonata(\"$keys(example2)\"),\n    jsonata(\"$keys(example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 840,
        "wires": [
            [
                "cae58acf1d4d93b0"
            ]
        ]
    },
    {
        "id": "b81ac77059018d6a",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 840,
        "wires": [
            [
                "61eba193709b4747"
            ]
        ]
    },
    {
        "id": "cae58acf1d4d93b0",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 840,
        "wires": []
    },
    {
        "id": "c0a1f8ffaea953f2",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$lookup(obj, key)",
        "func": "// $lookup(object, key)\n\nconst data = {\n    example1: {\n        \"A\": 1,\n        \"B\": 2,\n        \"C\": 3,\n        \"D\": 4,\n        \"E\": 5,\n    },\n    example2: {\n        \"payload\": \"Success\",\n        \"topic\": \"test\",\n    },\n    example3: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"C\": 3 },\n        { \"D\": 4 },\n        { \"E\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Returns the value associated with key in object.\n// If the first argument is an array of objects,\n// then all objects in the array are searched,\n// and the values associated with all occurrences of key are returned\nconst expression = [\n    jsonata(\"$lookup(example1, 'B')\"),\n    jsonata(\"$lookup(example2, 'payload')\"),\n    jsonata(\"$lookup(example3, 'A')\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 880,
        "wires": [
            [
                "4c8ea5fc5fa0df83"
            ]
        ]
    },
    {
        "id": "51eb088026f66aa7",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 880,
        "wires": [
            [
                "c0a1f8ffaea953f2"
            ]
        ]
    },
    {
        "id": "4c8ea5fc5fa0df83",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 880,
        "wires": []
    },
    {
        "id": "6b58edf53c9aeb7e",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$spread(obj)",
        "func": "// $spread(object)\n\nconst data = {\n    example1: {\n        \"A\": 1,\n        \"B\": 2,\n        \"C\": 3,\n        \"D\": 4,\n        \"E\": 5,\n    },\n    example2: {\n        \"payload\": \"Success\",\n        \"topic\": \"test\",\n    },\n    example3: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"C\": 3 },\n        { \"D\": 4 },\n        { \"E\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Splits an object containing key/value pairs into an array of objects,\n// each of which has a single key/value pair from the input object.\n// If the parameter is an array of objects,\n// then the resultant array contains an object for every key/value pair in every object in the array\nconst expression = [\n    jsonata(\"$spread(example1)\"),\n    jsonata(\"$spread(example2)\"),\n    jsonata(\"$spread(example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 920,
        "wires": [
            [
                "431b43d750db4608"
            ]
        ]
    },
    {
        "id": "ccf9e24c2cfc12cf",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 920,
        "wires": [
            [
                "6b58edf53c9aeb7e"
            ]
        ]
    },
    {
        "id": "431b43d750db4608",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 920,
        "wires": []
    },
    {
        "id": "48f3baac75b8cb33",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$merge([obj])",
        "func": "// $merge(array<object>)\n\nconst data = {\n    example1: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"C\": 3 },\n        { \"D\": 4 },\n        { \"E\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Merges an array of objects into a single object containing all the key/value pairs\n// from each of the objects in the input array.\n// If any of the input objects contain the same key,\n// then the returned object will contain the value of the last one in the array.\n// It is an error if the input array contains an item that is not an object.\nconst expression = jsonata(\"$merge(example1)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 960,
        "wires": [
            [
                "7d381368a9723eb3"
            ]
        ]
    },
    {
        "id": "802e2e41ec6aaa2d",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 960,
        "wires": [
            [
                "48f3baac75b8cb33"
            ]
        ]
    },
    {
        "id": "7d381368a9723eb3",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 960,
        "wires": []
    },
    {
        "id": "fc6db6f01385990e",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$type(val)",
        "func": "// $type(value)\n\nconst data = {\n    example: [\n    null,\n    1,\n    \"Hello world\",\n    true,\n    [ 0, 1, 2 ],\n    { \"payload\": \"success\" },\n    function test() { return; },\n    undefined,\n    ],\n};\n\n// Evaluates the type of value and returns it's type as a string\n// Returns(non - string) undefined when value is undefined\nconst expression = [\n    jsonata(\"$type(example[0])\"),\n    jsonata(\"$type(example[1])\"),\n    jsonata(\"$type(example[2])\"),\n    jsonata(\"$type(example[3])\"),\n    jsonata(\"$type(example[4])\"),\n    jsonata(\"$type(example[5])\"),\n    jsonata(\"$type(example[6])\"),\n    jsonata(\"$type(example[7])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 1200,
        "wires": [
            [
                "3a58277f580af7a4"
            ]
        ]
    },
    {
        "id": "a8a96fff189b0f6a",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1200,
        "wires": [
            [
                "fc6db6f01385990e"
            ]
        ]
    },
    {
        "id": "3a58277f580af7a4",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1200,
        "wires": []
    },
    {
        "id": "39dc8115391725fd",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$sift(obj, fun)",
        "func": "// $sift(object, function)\n// The function that is supplied must have the following signature:\n// function(value [, key [, object]])\n\nconst data = {\n    \"Customer1\": {\n        \"CustomerID\": 12345,\n        \"Name\": \"Billy Bob\",\n        \"Model\": \"Y\",\n    },\n    \"Employee1\": {\n        \"EmployeeID\": 24680,\n        \"Name\": \"Fred Rock\",\n        \"Model\": \"3\",\n    },\n    \"Employee2\": {\n        \"EmployeeID\": 13579,\n        \"Name\": \"Ash Luis\",\n        \"Model\": \"S\",\n    },\n    \"Customer2\": {\n        \"CustomerID\": 54321,\n        \"Name\": \"Amber Daniels\",\n        \"Model\": \"X\",\n    },\n    \"Customer3\": {\n        \"CustomerID\": 98765,\n        \"Name\": \"April Star\",\n        \"Model\": \"3\",\n    },\n};\n\n// Returns an object that contains only the key/value pairs from the object parameter\n// that satisfy the predicate function passed in as the second parameter.\n// If object is not specified, then the context value is used as the value of object.\nconst expression = [\n    jsonata(\"$sift(function($v, $k) {$k ~> /^Customer/})\"),\n    jsonata(\"$sift(function($v, $k) {$k ~> /^Employee/})\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 1000,
        "wires": [
            [
                "b1aea701f0274f22"
            ]
        ]
    },
    {
        "id": "6599d5d264063dd4",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1000,
        "wires": [
            [
                "39dc8115391725fd"
            ]
        ]
    },
    {
        "id": "b1aea701f0274f22",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1000,
        "wires": []
    },
    {
        "id": "8c5ea777d24b40b6",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$each(obj, fun)",
        "func": "// $each(object, function)\n// function(value, name)\n\nconst data = {\n    \"Customer1\": {\n        \"CustomerID\": 12345,\n        \"Name\": \"Billy Bob\",\n        \"Model\": \"Y\",\n    },\n    \"Employee1\": {\n        \"EmployeeID\": 24680,\n        \"Name\": \"Fred Rock\",\n        \"Model\": \"3\",\n    },\n    \"Employee2\": {\n        \"EmployeeID\": 13579,\n        \"Name\": \"Ash Luis\",\n        \"Model\": \"S\",\n    },\n    \"Customer2\": {\n        \"CustomerID\": 54321,\n        \"Name\": \"Amber Daniels\",\n        \"Model\": \"X\",\n    },\n    \"Customer3\": {\n        \"CustomerID\": 98765,\n        \"Name\": \"April Star\",\n        \"Model\": \"3\",\n    },\n};\n\n// Returns an array of the values return by the function\n// when applied to each key/value pair in the object.\nconst expression = [\n    jsonata(\"$each(function($v, $k) {$k & ': ' & $v})\"),\n    jsonata(\"$each(function($v, $k) {$k})\"),\n    jsonata(\"$each(function($v, $k) {$v})\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 1040,
        "wires": [
            [
                "a89af6cedd3f2e0d"
            ]
        ]
    },
    {
        "id": "a43595f67aa34ea0",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1040,
        "wires": [
            [
                "8c5ea777d24b40b6"
            ]
        ]
    },
    {
        "id": "a89af6cedd3f2e0d",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1040,
        "wires": []
    },
    {
        "id": "5b772280cd54e62a",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$error(mes)",
        "func": "// $error(message)\n\n// HACKY WORKAROUND for message parameter to be usable\nnode.error(jsonata(\"$error('Error 12345')\").ast().arguments[0].value);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 1080,
        "wires": [
            [
                "6461cdef7011b35b"
            ]
        ]
    },
    {
        "id": "f84533d7ab3f5a83",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1080,
        "wires": [
            [
                "5b772280cd54e62a"
            ]
        ]
    },
    {
        "id": "6461cdef7011b35b",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1080,
        "wires": []
    },
    {
        "id": "988336dcd37a967f",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 730,
        "y": 1120,
        "wires": [
            [
                "9e99aca1b6592c26"
            ]
        ]
    },
    {
        "id": "16d4c7d19f1d655b",
        "type": "inject",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 730,
        "y": 1160,
        "wires": [
            [
                "9e99aca1b6592c26"
            ]
        ]
    },
    {
        "id": "cfeb74d0e7f0153e",
        "type": "debug",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1140,
        "wires": []
    },
    {
        "id": "9e99aca1b6592c26",
        "type": "function",
        "z": "2b674150e0c6799d",
        "g": "d4f828aaee7233fb",
        "name": "$assert(con, mes)",
        "func": "// $assert(condition, message)\n\n// If condition is true, the function returns { \"payload\": \"assertation is true\" }.\n// If condition is false, an error is thrown, with the message as the message of the error.\nmsg.payload = jsonata(`$assert(${msg.payload} % 2 = 0, \"Number must be even\")`);\n\n// HACKY WORKAROUND for message parameter to be usable\n// 'if condition' must be relevant to 'assert condition'\nif (msg.payload.ast().arguments[0].lhs.lhs.value % 2 == 0) return { \"payload\": \"assertation is true\" };\nelse node.error(`${msg.payload.ast().arguments[1].value}`);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 1140,
        "wires": [
            [
                "cfeb74d0e7f0153e"
            ]
        ]
    },
    {
        "id": "1aa173400b86378f",
        "type": "comment",
        "z": "2b674150e0c6799d",
        "name": "This flow requires the npm module jsonata",
        "info": "run 'npm i jsonata' from your .node-red directory\nand set functionExternalModules to true in your settings.js file",
        "x": 800,
        "y": 40,
        "wires": []
    },
    {
        "id": "0c843858cf6d378b",
        "type": "mqtt in",
        "z": "57d0d4c33d2c16d8",
        "name": "",
        "topic": "node/temppress",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "9ad53e0e62e39b88",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 330,
        "wires": [
            [
                "614005024043cef2"
            ]
        ]
    },
    {
        "id": "614005024043cef2",
        "type": "csv",
        "z": "57d0d4c33d2c16d8",
        "name": "RemoteBMPParser",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "bmpmillis,bmppacketnum,bmpwifirssi,temp-C,pressure-Pa,altitude-m",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 300,
        "y": 330,
        "wires": [
            [
                "199e5b06ee1b16dc"
            ]
        ]
    },
    {
        "id": "199e5b06ee1b16dc",
        "type": "link out",
        "z": "57d0d4c33d2c16d8",
        "name": "MQTT_JSON_RemoteBMP",
        "mode": "link",
        "links": [
            "6347590b8df2896a"
        ],
        "x": 435,
        "y": 330,
        "wires": []
    },
    {
        "id": "74e20abacdd63640",
        "type": "mqtt in",
        "z": "57d0d4c33d2c16d8",
        "name": "Packet In",
        "topic": "node/ponyexpress",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "9ad53e0e62e39b88",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 100,
        "wires": [
            [
                "3019debcd8add1bc"
            ]
        ]
    },
    {
        "id": "c4ad62588ca27714",
        "type": "csv",
        "z": "57d0d4c33d2c16d8",
        "name": "CSVtoJSON",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "PonyExpressmillis,PonyExpressPacketNum,PonyExpressWiFi,Loc,4300PacketNum,GroupID,UnitID,TempC,Voltage,RcvNoise,RcvRSSI,LastRSSI,LastNoise,GPS",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 430,
        "y": 40,
        "wires": [
            [
                "5bf6a441fb707746"
            ]
        ]
    },
    {
        "id": "8b11575d3c2a262e",
        "type": "debug",
        "z": "57d0d4c33d2c16d8",
        "name": "Raw Packet Rcvd",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 450,
        "y": 100,
        "wires": []
    },
    {
        "id": "5bf6a441fb707746",
        "type": "link out",
        "z": "57d0d4c33d2c16d8",
        "name": "MQTT_JSON_HealthPacket",
        "mode": "link",
        "links": [
            "d16c0abb29e6e8da"
        ],
        "x": 655,
        "y": 40,
        "wires": []
    },
    {
        "id": "07d619eed3b17597",
        "type": "csv",
        "z": "57d0d4c33d2c16d8",
        "name": "AzimuthParser",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "Azimuthmillis,AzimuthPacketNum,AzimuthWiFi,Azimuth,MagnetStr",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 310,
        "y": 210,
        "wires": [
            [
                "1875360d4ecf3e76"
            ]
        ]
    },
    {
        "id": "210755cebc8438d2",
        "type": "mqtt in",
        "z": "57d0d4c33d2c16d8",
        "name": "",
        "topic": "node/azimuth",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "9ad53e0e62e39b88",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 240,
        "wires": [
            [
                "07d619eed3b17597"
            ]
        ]
    },
    {
        "id": "1875360d4ecf3e76",
        "type": "link out",
        "z": "57d0d4c33d2c16d8",
        "name": "MQTT_JSON_Azimuth",
        "mode": "link",
        "links": [
            "74eb5c5e12d8d8c9"
        ],
        "x": 455,
        "y": 210,
        "wires": []
    },
    {
        "id": "87d02daec09ff70a",
        "type": "inject",
        "z": "57d0d4c33d2c16d8",
        "name": "Azimuth",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "500,2049,-50,115.5,1000",
        "payloadType": "str",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "07d619eed3b17597"
            ]
        ],
        "info": "Data Payload: CSV\r\nmillis = unsigned long integer\r\nazimuth = nnn.n float\r\ndegrees per sec = nn.n float"
    },
    {
        "id": "3914524703addcbd",
        "type": "inject",
        "z": "57d0d4c33d2c16d8",
        "name": "Packet V1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "800,2,-55,H,73,8,4,28.6,3.312,-191,-42,-29,-129,0",
        "payloadType": "str",
        "x": 110,
        "y": 40,
        "wires": [
            [
                "3019debcd8add1bc"
            ]
        ],
        "info": "H,9,8,4,20.3,3.041,-31,-110,-118,-33,0\r\nH,73,8,4,28.6,3.312,-191,-42,-29,-129,0"
    },
    {
        "id": "4472cd6486be4e16",
        "type": "inject",
        "z": "57d0d4c33d2c16d8",
        "name": "Azimuth",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "700,2080,-50,115.5,1000",
        "payloadType": "str",
        "x": 110,
        "y": 210,
        "wires": [
            [
                "07d619eed3b17597"
            ]
        ],
        "info": "Data Payload: CSV\r\nmillis = unsigned long integer\r\nazimuth = nnn.n float\r\ndegrees per sec = nn.n float"
    },
    {
        "id": "3019debcd8add1bc",
        "type": "change",
        "z": "57d0d4c33d2c16d8",
        "name": "join",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 70,
        "wires": [
            [
                "8b11575d3c2a262e",
                "c4ad62588ca27714"
            ]
        ]
    },
    {
        "id": "105bd3f652e9ec3e",
        "type": "inject",
        "z": "57d0d4c33d2c16d8",
        "name": "Packet V1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "900,3,-58,H,74,8,4,28.7,3.350,-195,-40,-28,-130,0",
        "payloadType": "str",
        "x": 110,
        "y": 70,
        "wires": [
            [
                "3019debcd8add1bc"
            ]
        ],
        "info": "H,9,8,4,20.3,3.041,-31,-110,-118,-33,0\r\nH,73,8,4,28.6,3.312,-191,-42,-29,-129,0"
    },
    {
        "id": "54b337204b07978d",
        "type": "comment",
        "z": "8b5fec66c83fc136",
        "name": "TIME - NTP, GPS, local RTC",
        "info": "",
        "x": 170,
        "y": 70,
        "wires": []
    },
    {
        "id": "9772a4de0f79a686",
        "type": "comment",
        "z": "8b5fec66c83fc136",
        "name": "BMP/DHT Sensors",
        "info": "",
        "x": 140,
        "y": 170,
        "wires": []
    },
    {
        "id": "4be528249f6b25b5",
        "type": "comment",
        "z": "8b5fec66c83fc136",
        "name": "Serial Data In/Out",
        "info": "",
        "x": 140,
        "y": 270,
        "wires": []
    },
    {
        "id": "adf3be321f659888",
        "type": "comment",
        "z": "8b5fec66c83fc136",
        "name": "Physical Buttons/Switches",
        "info": "",
        "x": 170,
        "y": 380,
        "wires": []
    },
    {
        "id": "019edd31868c754f",
        "type": "comment",
        "z": "8b5fec66c83fc136",
        "name": "Visual LED Indicators",
        "info": "",
        "x": 160,
        "y": 450,
        "wires": []
    },
    {
        "id": "5ef310323d88da51",
        "type": "link out",
        "z": "8b5fec66c83fc136",
        "name": "BaseBMPout",
        "mode": "link",
        "links": [],
        "x": 815,
        "y": 340,
        "wires": []
    },
    {
        "id": "6923bf5dd3f01d17",
        "type": "Bme280",
        "z": "8b5fec66c83fc136",
        "name": "",
        "bus": "1",
        "address": "0x76",
        "topic": "bmp280",
        "extra": true,
        "preasure": "1016.9",
        "x": 510,
        "y": 210,
        "wires": [
            [
                "b0f7a7fa6526a17f"
            ]
        ]
    },
    {
        "id": "5b8f5a748006c47a",
        "type": "debug",
        "z": "8b5fec66c83fc136",
        "name": "BMP Processed",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 310,
        "wires": []
    },
    {
        "id": "1e530fdfaa457a73",
        "type": "inject",
        "z": "8b5fec66c83fc136",
        "name": "query bmp",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 210,
        "wires": [
            [
                "6bd0d783471e05e5"
            ]
        ]
    },
    {
        "id": "6b79592842446ae8",
        "type": "ui_text",
        "z": "8b5fec66c83fc136",
        "group": "b59dcbeac6b4e8f7",
        "order": 1,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "C",
        "format": "{{msg.payload.temperature_C}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 850,
        "y": 130,
        "wires": []
    },
    {
        "id": "6bd0d783471e05e5",
        "type": "ui_button",
        "z": "8b5fec66c83fc136",
        "name": "",
        "group": "b59dcbeac6b4e8f7",
        "order": 8,
        "width": 2,
        "height": 1,
        "passthru": true,
        "label": "Query BMP!",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "payload",
        "topicType": "msg",
        "x": 360,
        "y": 210,
        "wires": [
            [
                "6923bf5dd3f01d17"
            ]
        ]
    },
    {
        "id": "bf657b0509eb731c",
        "type": "ui_text",
        "z": "8b5fec66c83fc136",
        "group": "b59dcbeac6b4e8f7",
        "order": 5,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "hPa",
        "format": "{{msg.payload.pressure_hPa}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 850,
        "y": 190,
        "wires": []
    },
    {
        "id": "2ea78f333e1580b4",
        "type": "ui_text",
        "z": "8b5fec66c83fc136",
        "group": "b59dcbeac6b4e8f7",
        "order": 2,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "F",
        "format": "{{msg.payload.temperature_F}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 850,
        "y": 160,
        "wires": []
    },
    {
        "id": "b0f7a7fa6526a17f",
        "type": "change",
        "z": "8b5fec66c83fc136",
        "name": "Round",
        "rules": [
            {
                "t": "set",
                "p": "payload.temperature_C",
                "pt": "msg",
                "to": "$round(payload.temperature_C, 1)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.temperature_F",
                "pt": "msg",
                "to": "$round(payload.temperature_F, 1)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.pressure_hPa",
                "pt": "msg",
                "to": "$round(payload.pressure_hPa, 2)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.altitude_M",
                "pt": "msg",
                "to": "$round(payload.altitude_M, 2)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.altitude_F",
                "pt": "msg",
                "to": "$round(payload.altitude_M*3.28084, 2)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.pressure_Hg",
                "pt": "msg",
                "to": "$round(payload.pressure_Hg, 1)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 210,
        "wires": [
            [
                "6b79592842446ae8",
                "2ea78f333e1580b4",
                "bf657b0509eb731c",
                "4e876996aa8f7eca",
                "75ccf66a7e55d06d",
                "5b8f5a748006c47a",
                "084797957b2bfd9d",
                "e5931997eb3643c4",
                "5ef310323d88da51"
            ]
        ]
    },
    {
        "id": "4e876996aa8f7eca",
        "type": "ui_text",
        "z": "8b5fec66c83fc136",
        "group": "b59dcbeac6b4e8f7",
        "order": 3,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Est Alt (m)",
        "format": "{{msg.payload.altitude_M}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 870,
        "y": 250,
        "wires": []
    },
    {
        "id": "75ccf66a7e55d06d",
        "type": "ui_text",
        "z": "8b5fec66c83fc136",
        "group": "b59dcbeac6b4e8f7",
        "order": 4,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Est Alt (F)",
        "format": "{{msg.payload.altitude_F}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 860,
        "y": 280,
        "wires": []
    },
    {
        "id": "084797957b2bfd9d",
        "type": "ui_text",
        "z": "8b5fec66c83fc136",
        "group": "b59dcbeac6b4e8f7",
        "order": 6,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "inHg",
        "format": "{{msg.payload.pressure_Hg}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 850,
        "y": 220,
        "wires": []
    },
    {
        "id": "e5931997eb3643c4",
        "type": "change",
        "z": "8b5fec66c83fc136",
        "name": "Set GlobalVar for BaseAltitude",
        "rules": [
            {
                "t": "set",
                "p": "BaseBMPAltitude",
                "pt": "global",
                "to": "payload.altitude_M",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "636e859bcbdcd73a",
        "type": "inject",
        "z": "8b5fec66c83fc136",
        "name": "NTP",
        "props": [
            {
                "p": "currenttime",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 280,
        "y": 110,
        "wires": [
            [
                "891461868e0fe946",
                "c225e8df8141e97d"
            ]
        ]
    },
    {
        "id": "c225e8df8141e97d",
        "type": "mqtt out",
        "z": "8b5fec66c83fc136",
        "name": "Broadcast Time",
        "topic": "base/currenttime",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9ad53e0e62e39b88",
        "x": 530,
        "y": 130,
        "wires": []
    },
    {
        "id": "891461868e0fe946",
        "type": "debug",
        "z": "8b5fec66c83fc136",
        "name": "Time Broadcast",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 90,
        "wires": []
    },
    {
        "id": "1c60c3c6d8ae3250",
        "type": "serial in",
        "z": "8b5fec66c83fc136",
        "name": "",
        "serial": "b8ba42ee98b00870",
        "x": 210,
        "y": 330,
        "wires": [
            [
                "dc2e3b6ff84400ca"
            ]
        ]
    },
    {
        "id": "dc2e3b6ff84400ca",
        "type": "debug",
        "z": "8b5fec66c83fc136",
        "name": "serial in",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 330,
        "wires": []
    },
    {
        "id": "5041ee7da1df64ed",
        "type": "ui_switch",
        "z": "ab5811bd975ab70d",
        "g": "a761589dd070b8db",
        "name": "Toggle Turntable",
        "label": "",
        "tooltip": "Toggle Turntable",
        "group": "4af9272470ada9be",
        "order": 4,
        "width": 1,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "cmnd/tasmota_2DDAEA/POWER",
        "topicType": "msg",
        "style": "",
        "onvalue": "ON",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "OFF",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 490,
        "y": 510,
        "wires": [
            [
                "24794b3e14ad0bf7",
                "f0c6f278bc296acd"
            ]
        ]
    },
    {
        "id": "24794b3e14ad0bf7",
        "type": "Tasmota Switch",
        "z": "ab5811bd975ab70d",
        "g": "a761589dd070b8db",
        "broker": "089168f1c00e84e5",
        "device": "tasmota_2DDAEA",
        "name": "Start/Stop Turntable",
        "outputs": 1,
        "uidisabler": true,
        "fullTopic": "",
        "cmndPrefix": "",
        "statPrefix": "",
        "telePrefix": "",
        "qos": 1,
        "retain": false,
        "x": 500,
        "y": 450,
        "wires": [
            [
                "5041ee7da1df64ed"
            ]
        ]
    },
    {
        "id": "f0c6f278bc296acd",
        "type": "ui_button_state",
        "z": "ab5811bd975ab70d",
        "g": "a761589dd070b8db",
        "group": "4af9272470ada9be",
        "name": "Turntable Indicator",
        "order": 3,
        "onClass": "",
        "offClass": "",
        "width": 5,
        "height": 1,
        "options": [
            {
                "label": "Toggle Turntable",
                "value": "ON",
                "onColor": "#25db00",
                "offColor": "#ff0000"
            }
        ],
        "x": 750,
        "y": 510,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f78729ed40c0ebfc",
        "type": "rpi-gpio in",
        "z": "ab5811bd975ab70d",
        "g": "a761589dd070b8db",
        "name": "Rotate Button",
        "pin": "25",
        "intype": "up",
        "debounce": "25",
        "read": true,
        "bcm": true,
        "x": 150,
        "y": 460,
        "wires": [
            [
                "9ce0c0ebf5aa08dd"
            ]
        ]
    },
    {
        "id": "9ce0c0ebf5aa08dd",
        "type": "rpi-gpio out",
        "z": "ab5811bd975ab70d",
        "d": true,
        "g": "a761589dd070b8db",
        "name": "Rotation Indicator",
        "pin": "13",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 270,
        "y": 510,
        "wires": []
    },
    {
        "id": "5e0d0f9e01dc6bb0",
        "type": "ui_gauge",
        "z": "ab5811bd975ab70d",
        "name": "Adj Azimuth",
        "group": "4af9272470ada9be",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "compass",
        "title": "Adjusted Azimuth",
        "label": "degrees",
        "format": "{{msg.payload.AdjAzimuth}}",
        "min": 0,
        "max": "360",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 750,
        "y": 300,
        "wires": []
    },
    {
        "id": "ce4dc0af1bd944d6",
        "type": "link out",
        "z": "ab5811bd975ab70d",
        "name": "filtered azimuth input",
        "mode": "link",
        "links": [
            "d9e67e3156b20653"
        ],
        "x": 695,
        "y": 240,
        "wires": []
    },
    {
        "id": "fc45a22f79fec7dc",
        "type": "change",
        "z": "ab5811bd975ab70d",
        "name": "set topic & purge",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "azimuth",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "qos",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "retain",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "parts",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "columns",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 80,
        "wires": [
            [
                "3dd2c0780b62683e",
                "aacf8acebb2b8002"
            ]
        ]
    },
    {
        "id": "82a7ef9cd077f082",
        "type": "debug",
        "z": "ab5811bd975ab70d",
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 330,
        "wires": []
    },
    {
        "id": "4b16be364a2ecba9",
        "type": "rbe",
        "z": "ab5811bd975ab70d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload.Azimuth",
        "topi": "topic",
        "x": 570,
        "y": 290,
        "wires": [
            [
                "5e0d0f9e01dc6bb0",
                "ce4dc0af1bd944d6",
                "82a7ef9cd077f082",
                "240a6ce1085a904f"
            ]
        ]
    },
    {
        "id": "3dd2c0780b62683e",
        "type": "link out",
        "z": "ab5811bd975ab70d",
        "name": "Parsed Azimuth with Topic",
        "mode": "link",
        "links": [
            "2d9803f6fd2764ec",
            "0c6412f9e8a56bd1",
            "06c4c56747936dba"
        ],
        "x": 645,
        "y": 80,
        "wires": []
    },
    {
        "id": "74eb5c5e12d8d8c9",
        "type": "link in",
        "z": "ab5811bd975ab70d",
        "name": "Parsed Azimuth Input",
        "links": [
            "1875360d4ecf3e76"
        ],
        "x": 315,
        "y": 80,
        "wires": [
            [
                "fc45a22f79fec7dc"
            ]
        ]
    },
    {
        "id": "d8158db20a896781",
        "type": "ui_button",
        "z": "ab5811bd975ab70d",
        "name": "",
        "group": "4af9272470ada9be",
        "order": 6,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Load Value",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "load",
        "payloadType": "str",
        "topic": "azimuthcorrection",
        "topicType": "msg",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "1a73d62bd88547d1"
            ]
        ]
    },
    {
        "id": "577597927c3d2450",
        "type": "ui_text_input",
        "z": "ab5811bd975ab70d",
        "name": "",
        "label": "Az Offset",
        "tooltip": "",
        "group": "4af9272470ada9be",
        "order": 5,
        "width": 4,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "payload",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 170,
        "y": 180,
        "wires": [
            [
                "f9d5e75d54e1c491"
            ]
        ]
    },
    {
        "id": "457d65d18a8c8ec4",
        "type": "function",
        "z": "ab5811bd975ab70d",
        "name": "Apply offset",
        "func": "var correctioncommand = msg.payload.manualazimuthoffset.azimuthcorrection;\nvar currentazimuth = msg.payload.azimuth.Azimuth;\nvar azimuthoffset = msg.payload.manualazimuthoffset.azimuthoffset;\nvar correctedazimuth = currentazimuth + azimuthoffset;\nif (correctedazimuth < 0) {\n    correctedazimuth += 360;\n}\nif (correctedazimuth >= 360) {\n    correctedazimuth -= 360;\n}\nmsg.payload.azimuth.AdjAzimuth = correctedazimuth;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 290,
        "wires": [
            [
                "894511641e9fbffc"
            ]
        ]
    },
    {
        "id": "f9d5e75d54e1c491",
        "type": "function",
        "z": "ab5811bd975ab70d",
        "name": "Check offset",
        "func": "var azimuthoffset = flow.get('azimuthoffset') || 0;\nif (Math.abs(azimuthoffset) >= 360) {\n    azimuthoffset = 0; \n    // if offset is more than 1 full rev\n    // then just reject the offset\n}\nflow.set('azimuthoffset', azimuthoffset);\nmsg.topic = \"azimuthoffset\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 180,
        "wires": [
            [
                "23b2cba69ee4cabc"
            ]
        ]
    },
    {
        "id": "894511641e9fbffc",
        "type": "change",
        "z": "ab5811bd975ab70d",
        "name": "cleanup",
        "rules": [
            {
                "t": "move",
                "p": "payload.azimuth.Azimuthmillis",
                "pt": "msg",
                "to": "payload.Azimuthmillis",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.azimuth.AzimuthPacketNum",
                "pt": "msg",
                "to": "payload.AzimuthPacketNum",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.azimuth.AzimuthWiFi",
                "pt": "msg",
                "to": "payload.AzimuthWiFi",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.azimuth.Azimuth",
                "pt": "msg",
                "to": "payload.Azimuth",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.azimuth.MagnetStr",
                "pt": "msg",
                "to": "payload.MagnetStr",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.azimuth.AdjAzimuth",
                "pt": "msg",
                "to": "payload.AdjAzimuth",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.manualazimuthoffset.azimuthoffset",
                "pt": "msg",
                "to": "payload.azimuthoffset",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload.manualazimuthoffset",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.azimuth",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 290,
        "wires": [
            [
                "4b16be364a2ecba9"
            ]
        ]
    },
    {
        "id": "aacf8acebb2b8002",
        "type": "join",
        "z": "ab5811bd975ab70d",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 720,
        "y": 140,
        "wires": [
            [
                "457d65d18a8c8ec4"
            ]
        ]
    },
    {
        "id": "23b2cba69ee4cabc",
        "type": "join",
        "z": "ab5811bd975ab70d",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 460,
        "y": 160,
        "wires": [
            [
                "31df3da76f9be667"
            ]
        ]
    },
    {
        "id": "31df3da76f9be667",
        "type": "change",
        "z": "ab5811bd975ab70d",
        "name": "cleanup",
        "rules": [
            {
                "t": "delete",
                "p": "event",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "manualazimuthoffset",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 160,
        "wires": [
            [
                "aacf8acebb2b8002"
            ]
        ]
    },
    {
        "id": "1a73d62bd88547d1",
        "type": "change",
        "z": "ab5811bd975ab70d",
        "name": "set topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "azimuthcorrection",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 140,
        "wires": [
            [
                "23b2cba69ee4cabc"
            ]
        ]
    },
    {
        "id": "240a6ce1085a904f",
        "type": "ui_gauge",
        "z": "ab5811bd975ab70d",
        "name": "Azimuth",
        "group": "4af9272470ada9be",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "compass",
        "title": "azimuth",
        "label": "degrees",
        "format": "{{msg.payload.Azimuth}}",
        "min": 0,
        "max": "360",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 740,
        "y": 270,
        "wires": []
    },
    {
        "id": "4eefb16640917b93",
        "type": "comment",
        "z": "ab5811bd975ab70d",
        "name": "",
        "info": "",
        "x": 160,
        "y": 340,
        "wires": []
    },
    {
        "id": "c00bd1147305906a",
        "type": "ui_text",
        "z": "959de4fe523164e6",
        "group": "ef6cab5afa2bc3c1",
        "order": 5,
        "width": 5,
        "height": 1,
        "name": "Overview",
        "label": "Overview",
        "format": "{{payload.properties.textDescription}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 820,
        "y": 190,
        "wires": []
    },
    {
        "id": "fc42121d1bf48ed6",
        "type": "ui_text",
        "z": "959de4fe523164e6",
        "group": "ef6cab5afa2bc3c1",
        "order": 8,
        "width": 5,
        "height": 1,
        "name": "TempC",
        "label": "Temp in C",
        "format": "{{payload.properties.temperature.value}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 820,
        "y": 220,
        "wires": []
    },
    {
        "id": "c26d2ec77af147f3",
        "type": "ui_text",
        "z": "959de4fe523164e6",
        "group": "ef6cab5afa2bc3c1",
        "order": 12,
        "width": 5,
        "height": 1,
        "name": "SLPhPa",
        "label": "Sea Level Pressure hPa",
        "format": "{{payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 820,
        "y": 400,
        "wires": []
    },
    {
        "id": "55a5482f0e6addfe",
        "type": "inject",
        "z": "959de4fe523164e6",
        "name": "Inject Old Info",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"@context\":[\"https://geojson.org/geojson-ld/geojson-context.jsonld\",{\"@version\":\"1.1\",\"wx\":\"https://api.weather.gov/ontology#\",\"s\":\"https://schema.org/\",\"geo\":\"http://www.opengis.net/ont/geosparql#\",\"unit\":\"http://codes.wmo.int/common/unit/\",\"@vocab\":\"https://api.weather.gov/ontology#\",\"geometry\":{\"@id\":\"s:GeoCoordinates\",\"@type\":\"geo:wktLiteral\"},\"city\":\"s:addressLocality\",\"state\":\"s:addressRegion\",\"distance\":{\"@id\":\"s:Distance\",\"@type\":\"s:QuantitativeValue\"},\"bearing\":{\"@type\":\"s:QuantitativeValue\"},\"value\":{\"@id\":\"s:value\"},\"unitCode\":{\"@id\":\"s:unitCode\",\"@type\":\"@id\"},\"forecastOffice\":{\"@type\":\"@id\"},\"forecastGridData\":{\"@type\":\"@id\"},\"publicZone\":{\"@type\":\"@id\"},\"county\":{\"@type\":\"@id\"}}],\"id\":\"https://api.weather.gov/stations/KNYG/observations/2023-06-21T17:51:00+00:00\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[-77.3,38.5]},\"properties\":{\"@id\":\"https://api.weather.gov/stations/KNYG/observations/2023-06-21T17:51:00+00:00\",\"@type\":\"wx:ObservationStation\",\"elevation\":{\"unitCode\":\"wmoUnit:m\",\"value\":4},\"station\":\"https://api.weather.gov/stations/KNYG\",\"timestamp\":\"2023-06-21T17:51:00+00:00\",\"rawMessage\":\"KNYG 211751Z 04017G27KT 2 1/2SM -RA BR FEW008 BKN012 OVC024 19/17 A3011 RMK AO2 PK WND 05029/1736 SFC VIS 3 PNO $\",\"textDescription\":\"Light Rain and Fog/Mist\",\"icon\":\"https://api.weather.gov/icons/land/day/rain?size=medium\",\"presentWeather\":[{\"intensity\":\"light\",\"modifier\":null,\"weather\":\"rain\",\"rawString\":\"-RA\"},{\"intensity\":null,\"modifier\":null,\"weather\":\"fog_mist\",\"rawString\":\"BR\"}],\"temperature\":{\"unitCode\":\"wmoUnit:degC\",\"value\":19,\"qualityControl\":\"V\"},\"dewpoint\":{\"unitCode\":\"wmoUnit:degC\",\"value\":17,\"qualityControl\":\"V\"},\"windDirection\":{\"unitCode\":\"wmoUnit:degree_(angle)\",\"value\":null,\"qualityControl\":\"Z\"},\"windSpeed\":{\"unitCode\":\"wmoUnit:km_h-1\",\"value\":null,\"qualityControl\":\"Z\"},\"windGust\":{\"unitCode\":\"wmoUnit:km_h-1\",\"value\":null,\"qualityControl\":\"Z\"},\"barometricPressure\":{\"unitCode\":\"wmoUnit:Pa\",\"value\":101970,\"qualityControl\":\"V\"},\"seaLevelPressure\":{\"unitCode\":\"wmoUnit:Pa\",\"value\":null,\"qualityControl\":\"Z\"},\"visibility\":{\"unitCode\":\"wmoUnit:m\",\"value\":4020,\"qualityControl\":\"C\"},\"maxTemperatureLast24Hours\":{\"unitCode\":\"wmoUnit:degC\",\"value\":null},\"minTemperatureLast24Hours\":{\"unitCode\":\"wmoUnit:degC\",\"value\":null},\"precipitationLastHour\":{\"unitCode\":\"wmoUnit:mm\",\"value\":null,\"qualityControl\":\"Z\"},\"precipitationLast3Hours\":{\"unitCode\":\"wmoUnit:mm\",\"value\":null,\"qualityControl\":\"Z\"},\"precipitationLast6Hours\":{\"unitCode\":\"wmoUnit:mm\",\"value\":null,\"qualityControl\":\"Z\"},\"relativeHumidity\":{\"unitCode\":\"wmoUnit:percent\",\"value\":88.185541322848,\"qualityControl\":\"V\"},\"windChill\":{\"unitCode\":\"wmoUnit:degC\",\"value\":null,\"qualityControl\":\"V\"},\"heatIndex\":{\"unitCode\":\"wmoUnit:degC\",\"value\":null,\"qualityControl\":\"V\"},\"cloudLayers\":[{\"base\":{\"unitCode\":\"wmoUnit:m\",\"value\":240},\"amount\":\"FEW\"},{\"base\":{\"unitCode\":\"wmoUnit:m\",\"value\":370},\"amount\":\"BKN\"},{\"base\":{\"unitCode\":\"wmoUnit:m\",\"value\":730},\"amount\":\"OVC\"}]}}",
        "payloadType": "json",
        "x": 220,
        "y": 300,
        "wires": [
            [
                "a33b55c8aaef659e"
            ]
        ],
        "info": "Cached JSON data to avoid repeated requests to NWS API"
    },
    {
        "id": "8ec74613525dc7d0",
        "type": "mqtt out",
        "z": "959de4fe523164e6",
        "name": "Broadcast SLP",
        "topic": "base/SLP",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9ad53e0e62e39b88",
        "x": 840,
        "y": 430,
        "wires": []
    },
    {
        "id": "2eb91c37fc2cb860",
        "type": "change",
        "z": "959de4fe523164e6",
        "name": "strip down to SLP",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$round(payload.properties.seaLevelPressure.value/100, 2)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 410,
        "wires": [
            [
                "8ec74613525dc7d0",
                "c26d2ec77af147f3"
            ]
        ]
    },
    {
        "id": "57d98b8d88f48c88",
        "type": "link in",
        "z": "959de4fe523164e6",
        "name": "customNWS",
        "links": [
            "7620cb87b489999b"
        ],
        "x": 285,
        "y": 220,
        "wires": [
            [
                "a33b55c8aaef659e"
            ]
        ]
    },
    {
        "id": "a33b55c8aaef659e",
        "type": "subflow:98470bed41d6c5cf",
        "z": "959de4fe523164e6",
        "name": "SLP: Check or Fake it",
        "x": 430,
        "y": 260,
        "wires": [
            [
                "2eb91c37fc2cb860",
                "fc42121d1bf48ed6",
                "c00bd1147305906a",
                "bb309b6bb59eaa08",
                "cf2ae776b2331087",
                "fa2a5feec928965e",
                "42bf3093f6f260f3",
                "7d2e74dca2e573db",
                "7ee2bb50b3afcc30",
                "47482a641b73e07d",
                "3759ad69ac11dadd"
            ]
        ]
    },
    {
        "id": "42bf3093f6f260f3",
        "type": "ui_text",
        "z": "959de4fe523164e6",
        "group": "ef6cab5afa2bc3c1",
        "order": 10,
        "width": 5,
        "height": 1,
        "name": "Wind Speed",
        "label": "Wind Speed km/h",
        "format": "{{payload.properties.windSpeed.value}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 250,
        "wires": []
    },
    {
        "id": "fa2a5feec928965e",
        "type": "ui_text",
        "z": "959de4fe523164e6",
        "group": "ef6cab5afa2bc3c1",
        "order": 11,
        "width": 5,
        "height": 1,
        "name": "Wind Gust",
        "label": "Wind Gust km/h",
        "format": "{{payload.properties.windGust.value}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 280,
        "wires": []
    },
    {
        "id": "cf2ae776b2331087",
        "type": "ui_text",
        "z": "959de4fe523164e6",
        "group": "ef6cab5afa2bc3c1",
        "order": 14,
        "width": 5,
        "height": 1,
        "name": "Baro Press",
        "label": "Baro Press hPa",
        "format": "{{payload.properties.barometricPressure.value/100}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 310,
        "wires": []
    },
    {
        "id": "bb309b6bb59eaa08",
        "type": "ui_text",
        "z": "959de4fe523164e6",
        "group": "ef6cab5afa2bc3c1",
        "order": 9,
        "width": 5,
        "height": 1,
        "name": "Dew Point",
        "label": "Dew Point C",
        "format": "{{payload.properties.dewpoint.value}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 340,
        "wires": []
    },
    {
        "id": "7d2e74dca2e573db",
        "type": "change",
        "z": "959de4fe523164e6",
        "name": "Get NWSID",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$substring(payload.properties.rawMessage, 0, 4)\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 160,
        "wires": [
            [
                "ab57fe2319b9712e"
            ]
        ]
    },
    {
        "id": "ab57fe2319b9712e",
        "type": "ui_text",
        "z": "959de4fe523164e6",
        "group": "ef6cab5afa2bc3c1",
        "order": 4,
        "width": 5,
        "height": 1,
        "name": "NWSID",
        "label": "Selected NWS-ID",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 820,
        "y": 160,
        "wires": []
    },
    {
        "id": "f50a1b7f749da451",
        "type": "ui_text",
        "z": "959de4fe523164e6",
        "group": "ef6cab5afa2bc3c1",
        "order": 7,
        "width": 5,
        "height": 1,
        "name": "timestamp",
        "label": "Time",
        "format": "{{mytimes}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 130,
        "wires": []
    },
    {
        "id": "72ed85d9343ffdfe",
        "type": "simpletime",
        "z": "959de4fe523164e6",
        "name": "time",
        "mydate": false,
        "myymd": true,
        "myyear": false,
        "mymonth": false,
        "mymonthn": false,
        "mydom": false,
        "mydoy": false,
        "myday": false,
        "myhourpm": false,
        "myhour": false,
        "mytime": false,
        "mytimes": true,
        "myminute": false,
        "myminutes": false,
        "mysecond": false,
        "mymillis": false,
        "myepoch": false,
        "myrawdate": false,
        "mypm": false,
        "x": 680,
        "y": 110,
        "wires": [
            [
                "e1e56220cfaf4b2e",
                "f50a1b7f749da451"
            ]
        ]
    },
    {
        "id": "7ee2bb50b3afcc30",
        "type": "change",
        "z": "959de4fe523164e6",
        "name": "just time",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.properties.timestamp",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 110,
        "wires": [
            [
                "72ed85d9343ffdfe",
                "d61bddaacf5d3939"
            ]
        ]
    },
    {
        "id": "e1e56220cfaf4b2e",
        "type": "ui_text",
        "z": "959de4fe523164e6",
        "group": "ef6cab5afa2bc3c1",
        "order": 6,
        "width": 5,
        "height": 1,
        "name": "datestamp",
        "label": "Last Update",
        "format": "{{myymd}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 100,
        "wires": []
    },
    {
        "id": "47482a641b73e07d",
        "type": "debug",
        "z": "959de4fe523164e6",
        "name": "raw wx",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 70,
        "wires": []
    },
    {
        "id": "9d8896fce4eed4a0",
        "type": "ui_text_input",
        "z": "959de4fe523164e6",
        "name": "",
        "label": "Manual SLP",
        "tooltip": "",
        "group": "b59dcbeac6b4e8f7",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "payload.properties.seaLevelPressure.value",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "b85877b0b5916766"
            ]
        ]
    },
    {
        "id": "b85877b0b5916766",
        "type": "change",
        "z": "959de4fe523164e6",
        "name": "SLP_QC",
        "rules": [
            {
                "t": "set",
                "p": "payload.properties.seaLevelPressure.qualityControl",
                "pt": "msg",
                "to": "Manual",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 260,
        "wires": [
            [
                "a33b55c8aaef659e"
            ]
        ]
    },
    {
        "id": "3759ad69ac11dadd",
        "type": "ui_text",
        "z": "959de4fe523164e6",
        "group": "ef6cab5afa2bc3c1",
        "order": 13,
        "width": 5,
        "height": 1,
        "name": "SLP Source",
        "label": "SLP Source",
        "format": "{{payload.properties.seaLevelPressure.qualityControl}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 370,
        "wires": []
    },
    {
        "id": "d61bddaacf5d3939",
        "type": "ui_text",
        "z": "959de4fe523164e6",
        "group": "ef6cab5afa2bc3c1",
        "order": 6,
        "width": 5,
        "height": 1,
        "name": "DT Stamp",
        "label": "DT Stamp",
        "format": "{{payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 850,
        "y": 40,
        "wires": []
    },
    {
        "id": "c08d564f4f1097d0",
        "type": "file",
        "z": "b26c951e61318a11",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1050,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "54efb6be1f0b10a8",
        "type": "function",
        "z": "b26c951e61318a11",
        "name": "Disable Controls",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "40a8321657084214",
        "type": "link in",
        "z": "b26c951e61318a11",
        "name": "Data To Write",
        "links": [
            "db7703d124f6ea92"
        ],
        "x": 195,
        "y": 290,
        "wires": [
            [
                "8399089cb98496cf",
                "48c8623868f9aae3"
            ]
        ]
    },
    {
        "id": "8399089cb98496cf",
        "type": "gate",
        "z": "b26c951e61318a11",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": true,
        "storeName": "memory",
        "x": 300,
        "y": 290,
        "wires": [
            [
                "281209e5bd0f1df5"
            ]
        ]
    },
    {
        "id": "36cf9f0f5abc9d7f",
        "type": "ui_switch",
        "z": "b26c951e61318a11",
        "name": "Logging Control",
        "label": "Logging",
        "tooltip": "",
        "group": "6fd579ecbeb3943a",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "control",
        "topicType": "str",
        "style": "",
        "onvalue": "open",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "close",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 120,
        "y": 430,
        "wires": [
            [
                "8399089cb98496cf",
                "c03b3b091becb99c",
                "af936b30d2164598",
                "d53e834a3110b910"
            ]
        ]
    },
    {
        "id": "af936b30d2164598",
        "type": "switch",
        "z": "b26c951e61318a11",
        "name": "Control En/Disable",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "close",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "open",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 380,
        "y": 360,
        "wires": [
            [
                "f0b125c805416d52"
            ],
            [
                "54efb6be1f0b10a8"
            ]
        ],
        "outputLabels": [
            "off",
            "on"
        ]
    },
    {
        "id": "f0b125c805416d52",
        "type": "function",
        "z": "b26c951e61318a11",
        "name": "Enable Controls",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "523162e59b6e9f59",
        "type": "ui_text_input",
        "z": "b26c951e61318a11",
        "name": "",
        "label": "File Save As",
        "tooltip": "",
        "group": "6fd579ecbeb3943a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "filename",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 510,
        "y": 110,
        "wires": [
            [
                "2eb6558674ea2f70"
            ]
        ]
    },
    {
        "id": "c03b3b091becb99c",
        "type": "trigger",
        "z": "b26c951e61318a11",
        "name": "timing",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "str",
        "duration": "-0.75",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "close",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 360,
        "y": 460,
        "wires": [
            [
                "f34cd31e1bce8f02"
            ]
        ]
    },
    {
        "id": "f34cd31e1bce8f02",
        "type": "trigger",
        "z": "b26c951e61318a11",
        "name": "on/off",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "num",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "close",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 490,
        "y": 460,
        "wires": [
            [
                "ee3e8f7e516da0a3",
                "b10906e52490860e"
            ]
        ]
    },
    {
        "id": "ee3e8f7e516da0a3",
        "type": "rpi-gpio out",
        "z": "b26c951e61318a11",
        "name": "Logging Indicator ON",
        "pin": "26",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 670,
        "y": 430,
        "wires": []
    },
    {
        "id": "69ec1259a9e3f8e2",
        "type": "debug",
        "z": "b26c951e61318a11",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "filename",
        "targetType": "msg",
        "statusVal": "filename",
        "statusType": "auto",
        "x": 990,
        "y": 100,
        "wires": []
    },
    {
        "id": "31c18ab11cf27634",
        "type": "fs-file-lister",
        "z": "b26c951e61318a11",
        "name": "",
        "start": "/",
        "pattern": "*.*",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": false,
        "depth": 0,
        "stat": false,
        "showWarnings": true,
        "x": 110,
        "y": 690,
        "wires": [
            []
        ]
    },
    {
        "id": "012a07070eb98baa",
        "type": "fs-list",
        "z": "b26c951e61318a11",
        "name": "",
        "path": "payload",
        "pathType": "msg",
        "pattern": "*",
        "patternType": "str",
        "filter": "all",
        "recursive": false,
        "follow": true,
        "property": "list",
        "propertyType": "msg",
        "x": 110,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "90d36778dbf2e460",
        "type": "fs-stats",
        "z": "b26c951e61318a11",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "attr": "",
        "follow": true,
        "property": "stats",
        "propertyType": "msg",
        "x": 90,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "2eb6558674ea2f70",
        "type": "change",
        "z": "b26c951e61318a11",
        "name": "Set FN",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 110,
        "wires": [
            [
                "cc4806a07220f648"
            ]
        ]
    },
    {
        "id": "e96359abeffb0b89",
        "type": "ui_toast",
        "z": "b26c951e61318a11",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 100,
        "y": 830,
        "wires": []
    },
    {
        "id": "4f06f048f6c372a1",
        "type": "ui_ui-light",
        "z": "b26c951e61318a11",
        "action": "set",
        "actionType": "str",
        "write": "payload",
        "writeType": "msg",
        "name": "Recording Dash Indicator",
        "group": "6fd579ecbeb3943a",
        "order": 3,
        "width": 1,
        "height": 1,
        "x": 1040,
        "y": 490,
        "wires": [
            []
        ]
    },
    {
        "id": "be03826cbe750e43",
        "type": "hidden-ui-load",
        "z": "b26c951e61318a11",
        "group": "6fd579ecbeb3943a",
        "order": 0,
        "name": "",
        "x": 120,
        "y": 150,
        "wires": [
            [
                "931a701d102f69ba"
            ]
        ]
    },
    {
        "id": "d835703c3e632fa7",
        "type": "change",
        "z": "b26c951e61318a11",
        "name": "Set default FN",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "\"log_\" & myymd & \".txt\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 150,
        "wires": [
            [
                "cc4806a07220f648"
            ]
        ]
    },
    {
        "id": "931a701d102f69ba",
        "type": "moment",
        "z": "b26c951e61318a11",
        "name": "",
        "topic": "",
        "input": "",
        "inputType": "msg",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "",
        "locale": "en-GB",
        "output": "payload",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 300,
        "y": 150,
        "wires": [
            [
                "8613ed0384a1fc23"
            ]
        ]
    },
    {
        "id": "8613ed0384a1fc23",
        "type": "simpletime",
        "z": "b26c951e61318a11",
        "name": "",
        "mydate": false,
        "myymd": true,
        "myyear": false,
        "mymonth": false,
        "mymonthn": false,
        "mydom": false,
        "mydoy": false,
        "myday": false,
        "myhourpm": false,
        "myhour": false,
        "mytime": false,
        "mytimes": false,
        "myminute": false,
        "myminutes": false,
        "mysecond": false,
        "mymillis": false,
        "myepoch": false,
        "myrawdate": false,
        "mypm": false,
        "x": 490,
        "y": 150,
        "wires": [
            [
                "d835703c3e632fa7"
            ]
        ]
    },
    {
        "id": "cc4806a07220f648",
        "type": "change",
        "z": "b26c951e61318a11",
        "name": "Prefix dir",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "\"data_logs/\" & filename",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "filename",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "filename",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 130,
        "wires": [
            [
                "69ec1259a9e3f8e2",
                "281209e5bd0f1df5"
            ]
        ]
    },
    {
        "id": "b10906e52490860e",
        "type": "switch",
        "z": "b26c951e61318a11",
        "name": "Blink Light",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 490,
        "wires": [
            [
                "245e9c032cb505cb"
            ],
            [
                "710959d061309f8a"
            ]
        ],
        "outputLabels": [
            "on",
            "off"
        ]
    },
    {
        "id": "245e9c032cb505cb",
        "type": "change",
        "z": "b26c951e61318a11",
        "name": "On color",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#FF0000",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 470,
        "wires": [
            [
                "4f06f048f6c372a1"
            ]
        ]
    },
    {
        "id": "710959d061309f8a",
        "type": "change",
        "z": "b26c951e61318a11",
        "name": "Off color",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#F9E006",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 510,
        "wires": [
            [
                "4f06f048f6c372a1"
            ]
        ]
    },
    {
        "id": "848a8340adb3b02f",
        "type": "hidden-ui-load",
        "z": "b26c951e61318a11",
        "group": "6fd579ecbeb3943a",
        "order": 0,
        "name": "",
        "x": 450,
        "y": 590,
        "wires": [
            [
                "2f9a53d6ac39c81c"
            ]
        ]
    },
    {
        "id": "2f9a53d6ac39c81c",
        "type": "change",
        "z": "b26c951e61318a11",
        "name": "Disabled color",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#C0C0C0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 590,
        "wires": [
            [
                "1e44e15b66e5e299"
            ]
        ]
    },
    {
        "id": "5a535484ab9f455d",
        "type": "inject",
        "z": "b26c951e61318a11",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 620,
        "wires": [
            [
                "2f9a53d6ac39c81c"
            ]
        ]
    },
    {
        "id": "d53e834a3110b910",
        "type": "switch",
        "z": "b26c951e61318a11",
        "name": "Turn off dash indicator",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "close",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 410,
        "y": 560,
        "wires": [
            [
                "2f9a53d6ac39c81c"
            ]
        ],
        "outputLabels": [
            "off"
        ]
    },
    {
        "id": "1e44e15b66e5e299",
        "type": "delay",
        "z": "b26c951e61318a11",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 810,
        "y": 590,
        "wires": [
            [
                "4f06f048f6c372a1"
            ]
        ]
    },
    {
        "id": "86843a0e1752ec1f",
        "type": "debug",
        "z": "b26c951e61318a11",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 230,
        "wires": []
    },
    {
        "id": "fe89222662910f31",
        "type": "csv",
        "z": "b26c951e61318a11",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "systemtime,PonyExpressmillis,PonyExpressPacketNum,4300PacketNum,RcvNoise,RcvRSSI,Azimuthmillis,AzimuthPacketNum,Azimuth,AdjAzimuth",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 890,
        "y": 260,
        "wires": [
            [
                "86843a0e1752ec1f",
                "c08d564f4f1097d0",
                "d82fcedaf977759a",
                "2682151f88139681"
            ]
        ]
    },
    {
        "id": "281209e5bd0f1df5",
        "type": "join",
        "z": "b26c951e61318a11",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 520,
        "y": 260,
        "wires": [
            [
                "a5928d5a3b2ec11d",
                "ea2be1b563c17a87"
            ]
        ]
    },
    {
        "id": "a5928d5a3b2ec11d",
        "type": "change",
        "z": "b26c951e61318a11",
        "name": "Format for logging",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload.filename",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 260,
        "wires": [
            [
                "fe89222662910f31"
            ]
        ]
    },
    {
        "id": "ea2be1b563c17a87",
        "type": "debug",
        "z": "b26c951e61318a11",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 230,
        "wires": []
    },
    {
        "id": "d82fcedaf977759a",
        "type": "ui_text",
        "z": "b26c951e61318a11",
        "group": "6fd579ecbeb3943a",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Path/filename",
        "format": "{{msg.filename}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1070,
        "y": 290,
        "wires": []
    },
    {
        "id": "2682151f88139681",
        "type": "ui_text",
        "z": "b26c951e61318a11",
        "group": "6fd579ecbeb3943a",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Payload",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1050,
        "y": 320,
        "wires": []
    },
    {
        "id": "48c8623868f9aae3",
        "type": "debug",
        "z": "b26c951e61318a11",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 260,
        "wires": []
    },
    {
        "id": "34d67f1892ff461e",
        "type": "debug",
        "z": "62b2c76c360a5c24",
        "name": "Az + Data packet",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload.SNR",
        "statusType": "msg",
        "x": 930,
        "y": 360,
        "wires": []
    },
    {
        "id": "f421e4d33abc8ac6",
        "type": "join",
        "z": "62b2c76c360a5c24",
        "name": "",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 610,
        "y": 340,
        "wires": [
            [
                "098925466105b83e"
            ]
        ]
    },
    {
        "id": "d9e67e3156b20653",
        "type": "link in",
        "z": "62b2c76c360a5c24",
        "name": "azimuth input",
        "links": [
            "ce4dc0af1bd944d6"
        ],
        "x": 185,
        "y": 430,
        "wires": [
            [
                "155718a3928ace59",
                "396f4bafb84e85d2",
                "e6b1a3cad173128e",
                "af9d300b4875bc82",
                "279e4ac223304bbe",
                "aad12288530c57e1",
                "e16185a78af1daed",
                "ce0561046c530da6"
            ]
        ]
    },
    {
        "id": "db7703d124f6ea92",
        "type": "link out",
        "z": "62b2c76c360a5c24",
        "name": "joined packet",
        "mode": "link",
        "links": [
            "d79ed0345c61d481",
            "40a8321657084214"
        ],
        "x": 855,
        "y": 310,
        "wires": []
    },
    {
        "id": "155718a3928ace59",
        "type": "ui_text",
        "z": "62b2c76c360a5c24",
        "group": "cb3750f073b2c511",
        "order": 7,
        "width": 4,
        "height": 1,
        "name": "Azimuth",
        "label": "Azimuth",
        "format": "{{msg.payload.Azimuth}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 620,
        "y": 390,
        "wires": []
    },
    {
        "id": "d16c0abb29e6e8da",
        "type": "link in",
        "z": "62b2c76c360a5c24",
        "name": "HealthPacket_Processing",
        "links": [
            "5bf6a441fb707746"
        ],
        "x": 165,
        "y": 190,
        "wires": [
            [
                "dec9f0b9693b4927"
            ]
        ]
    },
    {
        "id": "a3db8a5776fcee71",
        "type": "debug",
        "z": "62b2c76c360a5c24",
        "name": "Cleaned Data Packet",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 80,
        "wires": []
    },
    {
        "id": "a9223b302fef9ddc",
        "type": "ui_text",
        "z": "62b2c76c360a5c24",
        "group": "cb3750f073b2c511",
        "order": 6,
        "width": 4,
        "height": 1,
        "name": "4300 Packet#",
        "label": "4300 Packet#",
        "format": "{{msg.payload[\"4300PacketNum\"]}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 640,
        "y": 140,
        "wires": []
    },
    {
        "id": "8c77c30daee8c6b3",
        "type": "ui_text",
        "z": "62b2c76c360a5c24",
        "group": "cb3750f073b2c511",
        "order": 8,
        "width": 4,
        "height": 1,
        "name": "DUT Rcv Noise",
        "label": "DUT RCV Noise",
        "format": "{{msg.payload.RcvNoise}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 640,
        "y": 170,
        "wires": []
    },
    {
        "id": "6443407ca30f772a",
        "type": "ui_text",
        "z": "62b2c76c360a5c24",
        "group": "cb3750f073b2c511",
        "order": 10,
        "width": 4,
        "height": 1,
        "name": "DUT RSSI",
        "label": "DUT RSSI",
        "format": "{{msg.payload.RcvRSSI}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 630,
        "y": 200,
        "wires": []
    },
    {
        "id": "fe5f020b1a94f290",
        "type": "ui_text",
        "z": "62b2c76c360a5c24",
        "group": "cb3750f073b2c511",
        "order": 12,
        "width": 4,
        "height": 1,
        "name": "Approx SNR",
        "label": "Approx SNR",
        "format": "{{msg.payload.SNR}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 630,
        "y": 260,
        "wires": []
    },
    {
        "id": "fc6f72597843f604",
        "type": "link out",
        "z": "62b2c76c360a5c24",
        "name": "RcvdPacket",
        "mode": "link",
        "links": [
            "68ee3d52e26b5957"
        ],
        "x": 575,
        "y": 50,
        "wires": []
    },
    {
        "id": "893378736d1f2fbf",
        "type": "ui_valuetrail",
        "z": "62b2c76c360a5c24",
        "group": "cb3750f073b2c511",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "SNR trail graph",
        "label": "",
        "unit": "",
        "blur": true,
        "minmax": true,
        "allowtoggle": true,
        "showvalue": true,
        "decimals": 0,
        "colorLine": "#ff9900",
        "colorFromTheme": true,
        "stroke": 2,
        "property": "payload.SNR",
        "pointcount": 8,
        "x": 640,
        "y": 290,
        "wires": []
    },
    {
        "id": "396f4bafb84e85d2",
        "type": "debug",
        "z": "62b2c76c360a5c24",
        "name": "Rcvd Az MQTT Packet",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 570,
        "wires": []
    },
    {
        "id": "dec9f0b9693b4927",
        "type": "change",
        "z": "62b2c76c360a5c24",
        "name": "purge",
        "rules": [
            {
                "t": "delete",
                "p": "payload.GPS",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.Loc",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.GroupID",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.UnitID",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.TempC",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.Voltage",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "qos",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "retain",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "columns",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 190,
        "wires": [
            [
                "675245b9b1b4fac9"
            ]
        ]
    },
    {
        "id": "675245b9b1b4fac9",
        "type": "change",
        "z": "62b2c76c360a5c24",
        "name": "add markers",
        "rules": [
            {
                "t": "set",
                "p": "payload.SNR",
                "pt": "msg",
                "to": "msg.payload.RcvRSSI-msg.payload.RcvNoise",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.systemtime",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 190,
        "wires": [
            [
                "fc6f72597843f604",
                "a3db8a5776fcee71",
                "893378736d1f2fbf",
                "fe5f020b1a94f290",
                "6443407ca30f772a",
                "8c77c30daee8c6b3",
                "a9223b302fef9ddc",
                "4e6f99bb43a17156",
                "f421e4d33abc8ac6",
                "17bf16dba3f3f1bd"
            ]
        ]
    },
    {
        "id": "aad12288530c57e1",
        "type": "change",
        "z": "62b2c76c360a5c24",
        "name": "purge",
        "rules": [
            {
                "t": "delete",
                "p": "payload.MagnetStr",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.AzimuthWiFii",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 370,
        "wires": [
            [
                "f421e4d33abc8ac6"
            ]
        ]
    },
    {
        "id": "279e4ac223304bbe",
        "type": "ui_text",
        "z": "62b2c76c360a5c24",
        "group": "cb3750f073b2c511",
        "order": 3,
        "width": 4,
        "height": 1,
        "name": "Azimuth Packet#",
        "label": "Azimuth Packet#",
        "format": "{{msg.payload.AzimuthPacketNum}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 650,
        "y": 480,
        "wires": []
    },
    {
        "id": "af9d300b4875bc82",
        "type": "ui_text",
        "z": "62b2c76c360a5c24",
        "group": "cb3750f073b2c511",
        "order": 5,
        "width": 4,
        "height": 1,
        "name": "Azimuth WiFi",
        "label": "Azimuth WiFi",
        "format": "{{msg.payload.AzimuthWiFi}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 630,
        "y": 510,
        "wires": []
    },
    {
        "id": "e6b1a3cad173128e",
        "type": "ui_text",
        "z": "62b2c76c360a5c24",
        "group": "cb3750f073b2c511",
        "order": 13,
        "width": 4,
        "height": 1,
        "name": "Magnet Str",
        "label": "Magnet Str",
        "format": "{{msg.payload.MagnetStr}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 630,
        "y": 540,
        "wires": []
    },
    {
        "id": "4e6f99bb43a17156",
        "type": "ui_text",
        "z": "62b2c76c360a5c24",
        "group": "cb3750f073b2c511",
        "order": 2,
        "width": 4,
        "height": 1,
        "name": "WEMOS Packet#",
        "label": "WEMOS Packet#",
        "format": "{{msg.payload.PonyExpressPacketNum}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 650,
        "y": 110,
        "wires": []
    },
    {
        "id": "098925466105b83e",
        "type": "change",
        "z": "62b2c76c360a5c24",
        "name": "purge",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 340,
        "wires": [
            [
                "db7703d124f6ea92",
                "34d67f1892ff461e"
            ]
        ]
    },
    {
        "id": "17bf16dba3f3f1bd",
        "type": "ui_text",
        "z": "62b2c76c360a5c24",
        "group": "cb3750f073b2c511",
        "order": 4,
        "width": 4,
        "height": 1,
        "name": "WEMOS WiFi",
        "label": "WEMOS WiFi",
        "format": "{{msg.payload.PonyExpressWiFi}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 640,
        "y": 230,
        "wires": []
    },
    {
        "id": "ce0561046c530da6",
        "type": "ui_text",
        "z": "62b2c76c360a5c24",
        "group": "cb3750f073b2c511",
        "order": 9,
        "width": 4,
        "height": 1,
        "name": "Adj Azimuth",
        "label": "Adj Azimuth",
        "format": "{{msg.payload.AdjAzimuth}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 630,
        "y": 420,
        "wires": []
    },
    {
        "id": "e16185a78af1daed",
        "type": "ui_text",
        "z": "62b2c76c360a5c24",
        "group": "cb3750f073b2c511",
        "order": 11,
        "width": 4,
        "height": 1,
        "name": "Az Offset Amount",
        "label": "Az Offset Amount",
        "format": "{{msg.payload.azimuthoffset}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 650,
        "y": 450,
        "wires": []
    },
    {
        "id": "b083ddb2a3f1a708",
        "type": "ui_dropdown",
        "z": "767009226862343e",
        "name": "",
        "label": "NWS-ID",
        "tooltip": "",
        "place": "KNYG",
        "group": "ef6cab5afa2bc3c1",
        "order": 2,
        "width": 4,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Dahlgren",
                "value": "KNYG",
                "type": "str"
            },
            {
                "label": "Panama City Beach",
                "value": "KECP",
                "type": "str"
            },
            {
                "label": "Shannon Airport",
                "value": "KEZF",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "c6f0b76a62f06386"
            ]
        ]
    },
    {
        "id": "c6f0b76a62f06386",
        "type": "change",
        "z": "767009226862343e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "NWSID",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "post",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 60,
        "wires": [
            [
                "58053676734c172b"
            ]
        ]
    },
    {
        "id": "58053676734c172b",
        "type": "http request",
        "z": "767009226862343e",
        "name": "http req",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.weather.gov/stations/{{post}}/observations/latest",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 60,
        "wires": [
            [
                "7620cb87b489999b",
                "7b87a0b63d0b2403"
            ]
        ]
    },
    {
        "id": "7620cb87b489999b",
        "type": "link out",
        "z": "767009226862343e",
        "name": "CustomNWSDataCall",
        "mode": "link",
        "links": [
            "57d98b8d88f48c88"
        ],
        "x": 555,
        "y": 70,
        "wires": []
    },
    {
        "id": "7b87a0b63d0b2403",
        "type": "debug",
        "z": "767009226862343e",
        "name": "raw wx",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 40,
        "wires": []
    },
    {
        "id": "7beed693fe778dfc",
        "type": "iiot-ntptime",
        "z": "767009226862343e",
        "d": true,
        "ntpserver": "time.google.com",
        "ampm": false,
        "tupdate": 1,
        "timeu": "m",
        "tout": 5000,
        "x": 1070,
        "y": 30,
        "wires": [
            []
        ]
    },
    {
        "id": "b4838a3d0c3fa82e",
        "type": "comment",
        "z": "677a07349b91128e",
        "name": "Sample Tasmota Format",
        "info": "tele/tasmota_B56332/LWT : msg.payload : string[7]\"Offline\"\ntele/tasmota_B56332/LWT : msg.payload : string[6]\"Online\"\ncmnd/tasmota_B56332/POWER : msg.payload : string[0]\n\"\"\ntele/tasmota_B56332/INFO1 {\"Info1\":{\"Module\":\"Generic\",\"Version\":\"13.0.0(sensors)\",\"FallbackTopic\":\"cmnd/DVES_B56332_fb/\",\"GroupTopic\":\"cmnd/tasmotas/\"}}\ntele/tasmota_B56332/INFO2 {\"Info2\":{\"WebServerMode\":\"Admin\",\"Hostname\":\"tasmota-B56332-0818\",\"IPAddress\":\"192.168.86.20\"}}\ntele/tasmota_B56332/INFO3 {\"Info3\":{\"RestartReason\":\"Software/System restart\",\"BootCount\":13}}\ntele/tasmota_B56332/STATE {\"Time\":\"2023-06-28T13:35:01\",\"Uptime\":\"0T00:00:11\",\"UptimeSec\":11,\"Heap\":21,\"SleepMode\":\"Dynamic\",\"Sleep\":50,\"LoadAvg\":23,\"MqttCount\":1,\"Wifi\":{\"AP\":1,\"SSId\":\"FBISecurityVan2\",\"BSSId\":\"60:B7:6E:DF:5A:C0\",\"Channel\":6,\"Mode\":\"11n\",\"RSSI\":90,\"Signal\":-55,\"LinkCount\":1,\"Downtime\":\"0T00:00:05\"}}\ntele/tasmota_B56332/SENSOR {\"Time\":\"2023-06-28T13:35:01\",\"BMP280\":{\"Temperature\":23.7,\"Pressure\":1008.2},\"PressureUnit\":\"hPa\",\"TempUnit\":\"C\"}",
        "x": 810,
        "y": 80,
        "wires": []
    },
    {
        "id": "797f9f824f10fb15",
        "type": "inject",
        "z": "677a07349b91128e",
        "name": "Packet V1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "H,73,8,4,28.6,3.312,-191,-42,-29,-129,0",
        "payloadType": "str",
        "x": 760,
        "y": 130,
        "wires": [
            []
        ],
        "info": "H,9,8,4,20.3,3.041,-31,-110,-118,-33,0\r\nH,73,8,4,28.6,3.312,-191,-42,-29,-129,0"
    },
    {
        "id": "0235a54d6914a13e",
        "type": "inject",
        "z": "677a07349b91128e",
        "name": "AzimuthDiagostic",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "MAGNET too weak,ff,00,00",
        "payloadType": "str",
        "x": 790,
        "y": 270,
        "wires": [
            []
        ],
        "info": "Diagnostic Payload: CSV\r\nmagnet status (string) OR magnet strength (integer)\r\nagc level ff\r\ncurrent hysteresis level 00\r\ncurrent offset value 00\r\n\r\nSample MAC 30AEA4070D64"
    },
    {
        "id": "24a7fb2ebd92c754",
        "type": "inject",
        "z": "677a07349b91128e",
        "name": "Azimuth",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"millis\":1,\"azimuth\":1,\"turnrate\":1}",
        "payloadType": "json",
        "x": 760,
        "y": 230,
        "wires": [
            []
        ],
        "info": "Data Payload: CSV\r\nmillis = unsigned long integer\r\nazimuth = nnn.n float\r\ndegrees per sec = nn.n float"
    },
    {
        "id": "3fcf6bb98c6bfa88",
        "type": "inject",
        "z": "677a07349b91128e",
        "name": "Packet V2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "H,2FSK,4ED836B2,1F7173A8,RESP,3557,12,7,34.1,3.255,-22,-89,2017,4,24,17,29,23,38.3304,-77.02568",
        "payloadType": "str",
        "x": 760,
        "y": 170,
        "wires": [
            []
        ]
    },
    {
        "id": "7bf47ae3c4530ddf",
        "type": "inject",
        "z": "677a07349b91128e",
        "name": "Packet V1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Loc\":\"H\",\"PacketNum\":73,\"GroupID\":8,\"UnitID\":4,\"TempC\":28.6,\"Voltage\":3.312,\"RcvNoise\":-191,\"RcvRSSI\":-42,\"LastRSSI\":-29,\"LastNoise\":-129,\"GPS\":0}",
        "payloadType": "json",
        "x": 930,
        "y": 130,
        "wires": [
            []
        ]
    },
    {
        "id": "e3090ed9c20be724",
        "type": "comment",
        "z": "677a07349b91128e",
        "name": "Simulated MAC IDs",
        "info": "DEADFEED - sim azimuth\nFEEDFACE - sim data packet\nD0D0CACA\nD0CF1130\nFEEDC0DE\nB105F00D\n8BADF00D\n",
        "x": 790,
        "y": 30,
        "wires": []
    },
    {
        "id": "64d864b9562dbfd4",
        "type": "mqtt in",
        "z": "677a07349b91128e",
        "name": "",
        "topic": "tele/chrismota_FEEDFACE/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "9ad53e0e62e39b88",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 190,
        "wires": [
            [
                "721e1a621b742624"
            ]
        ]
    },
    {
        "id": "721e1a621b742624",
        "type": "switch",
        "z": "677a07349b91128e",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "INFO1",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "INFO2",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "INFO3",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "STATE",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "SENSOR",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 330,
        "y": 190,
        "wires": [
            [
                "5fc3530c5e4de50b"
            ],
            [
                "d45ea3cc05378ebd"
            ],
            [
                "7c8e981f544ee9a4"
            ],
            [
                "f31b83c1816a65c4"
            ],
            [
                "f9d09413f029fdb5"
            ]
        ],
        "outputLabels": [
            "INFO1",
            "INFO2",
            "INFO3",
            "STATE",
            "SENSOR"
        ]
    },
    {
        "id": "5fc3530c5e4de50b",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 130,
        "wires": []
    },
    {
        "id": "d45ea3cc05378ebd",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 160,
        "wires": []
    },
    {
        "id": "7c8e981f544ee9a4",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 190,
        "wires": []
    },
    {
        "id": "f31b83c1816a65c4",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 220,
        "wires": []
    },
    {
        "id": "f9d09413f029fdb5",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 250,
        "wires": []
    },
    {
        "id": "0a01a98e0fbd9976",
        "type": "inject",
        "z": "677a07349b91128e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "on",
        "payloadType": "str",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "06e293c2327fab4e",
                "c6010960d0240383"
            ]
        ]
    },
    {
        "id": "d645390cec75786f",
        "type": "inject",
        "z": "677a07349b91128e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "x": 150,
        "y": 390,
        "wires": [
            [
                "06e293c2327fab4e"
            ]
        ]
    },
    {
        "id": "c6010960d0240383",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "mqttsubscribetest",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 360,
        "wires": []
    },
    {
        "id": "06e293c2327fab4e",
        "type": "mqtt out",
        "z": "677a07349b91128e",
        "name": "",
        "topic": "esp32/output",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9ad53e0e62e39b88",
        "x": 350,
        "y": 390,
        "wires": []
    },
    {
        "id": "7f7cf8e034a5df8f",
        "type": "inject",
        "z": "677a07349b91128e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "gibberish",
        "payloadType": "str",
        "x": 140,
        "y": 420,
        "wires": [
            [
                "06e293c2327fab4e"
            ]
        ]
    },
    {
        "id": "689b1b597ee0d5df",
        "type": "mqtt in",
        "z": "677a07349b91128e",
        "name": "",
        "topic": "esp/bmp280/#",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "9ad53e0e62e39b88",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 500,
        "wires": [
            [
                "2646ca499596e308"
            ]
        ]
    },
    {
        "id": "2646ca499596e308",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "dht",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 500,
        "wires": []
    },
    {
        "id": "8ccddb9a.a55f38",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "4a0d547b66fbd88b",
        "name": "temperature",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "temperature",
        "payload": "10",
        "payloadType": "num",
        "x": 150,
        "y": 1110,
        "wires": [
            [
                "47b769c5.cb0e28"
            ]
        ]
    },
    {
        "id": "47b769c5.cb0e28",
        "type": "join",
        "z": "677a07349b91128e",
        "g": "4a0d547b66fbd88b",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "5",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 350,
        "y": 1150,
        "wires": [
            [
                "f9afb265.b11b7"
            ]
        ]
    },
    {
        "id": "f9afb265.b11b7",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "4a0d547b66fbd88b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 510,
        "y": 1150,
        "wires": []
    },
    {
        "id": "2d269127.4f04ce",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "4a0d547b66fbd88b",
        "name": "humidity",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "humidity",
        "payload": "",
        "payloadType": "num",
        "x": 140,
        "y": 1150,
        "wires": [
            [
                "47b769c5.cb0e28"
            ]
        ]
    },
    {
        "id": "d6fbe805.0e4628",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "4a0d547b66fbd88b",
        "name": "pressure",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "pressure",
        "payload": "999",
        "payloadType": "num",
        "x": 140,
        "y": 1190,
        "wires": [
            [
                "47b769c5.cb0e28"
            ]
        ]
    },
    {
        "id": "9ccdf268.c96ff",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "1cbea94f561892a3",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1280,
        "wires": [
            [
                "38950a5.28d15f6",
                "2c532f67.0330e"
            ]
        ]
    },
    {
        "id": "38950a5.28d15f6",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "1cbea94f561892a3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 650,
        "y": 1280,
        "wires": []
    },
    {
        "id": "2c532f67.0330e",
        "type": "trigger",
        "z": "677a07349b91128e",
        "g": "1cbea94f561892a3",
        "name": "",
        "op1": "reset",
        "op2": "true",
        "op1type": "str",
        "op2type": "bool",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 280,
        "y": 1320,
        "wires": [
            [
                "e4e42b96.97a338",
                "3b9b7caa3e759d9d"
            ]
        ]
    },
    {
        "id": "e4e42b96.97a338",
        "type": "trigger",
        "z": "677a07349b91128e",
        "d": true,
        "g": "1cbea94f561892a3",
        "name": "",
        "op1": "0",
        "op2": "0",
        "op1type": "num",
        "op2type": "str",
        "duration": "-2",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "reset",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 470,
        "y": 1320,
        "wires": [
            [
                "38950a5.28d15f6"
            ]
        ]
    },
    {
        "id": "3b9b7caa3e759d9d",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "1cbea94f561892a3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 1360,
        "wires": []
    },
    {
        "id": "76b71eb1294b357c",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "4da6ef81bb3d9b74",
        "name": "temperature",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "temperature",
        "payload": "10",
        "payloadType": "num",
        "x": 150,
        "y": 940,
        "wires": [
            [
                "7ce53678664ee9d2"
            ]
        ]
    },
    {
        "id": "7ce53678664ee9d2",
        "type": "join",
        "z": "677a07349b91128e",
        "g": "4da6ef81bb3d9b74",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 350,
        "y": 980,
        "wires": [
            [
                "06dcf02b6a812ed2"
            ]
        ]
    },
    {
        "id": "06dcf02b6a812ed2",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "4da6ef81bb3d9b74",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 510,
        "y": 980,
        "wires": []
    },
    {
        "id": "5076e063e335c79b",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "4da6ef81bb3d9b74",
        "name": "humidity",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "humidity",
        "payload": "",
        "payloadType": "num",
        "x": 140,
        "y": 980,
        "wires": [
            [
                "7ce53678664ee9d2"
            ]
        ]
    },
    {
        "id": "53558d462edb01de",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "4da6ef81bb3d9b74",
        "name": "pressure",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "pressure",
        "payload": "999",
        "payloadType": "num",
        "x": 140,
        "y": 1020,
        "wires": [
            [
                "7ce53678664ee9d2"
            ]
        ]
    },
    {
        "id": "5cda08a00c0f1d64",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "b8f7ccc797b080a1",
        "name": "temperature",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "temperature",
        "payload": "10",
        "payloadType": "num",
        "x": 150,
        "y": 770,
        "wires": [
            [
                "e3018ed9e33e91df"
            ]
        ]
    },
    {
        "id": "e3018ed9e33e91df",
        "type": "join",
        "z": "677a07349b91128e",
        "g": "b8f7ccc797b080a1",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 350,
        "y": 810,
        "wires": [
            [
                "65968ab95df8d39d"
            ]
        ]
    },
    {
        "id": "65968ab95df8d39d",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "b8f7ccc797b080a1",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 510,
        "y": 810,
        "wires": []
    },
    {
        "id": "e98016ccaba1cc55",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "b8f7ccc797b080a1",
        "name": "humidity",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "humidity",
        "payload": "",
        "payloadType": "num",
        "x": 140,
        "y": 810,
        "wires": [
            [
                "e3018ed9e33e91df"
            ]
        ]
    },
    {
        "id": "e514244bd2fe70ad",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "b8f7ccc797b080a1",
        "name": "pressure",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "pressure",
        "payload": "999",
        "payloadType": "num",
        "x": 140,
        "y": 850,
        "wires": [
            [
                "e3018ed9e33e91df"
            ]
        ]
    },
    {
        "id": "6079638d.df403c",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "92d8c5e984951659",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "87129503.c7b358"
            ]
        ]
    },
    {
        "id": "87129503.c7b358",
        "type": "rbe",
        "z": "677a07349b91128e",
        "g": "92d8c5e984951659",
        "name": "report-by-exception",
        "func": "deadband",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 340,
        "y": 640,
        "wires": [
            [
                "5e2ffc27.c61dd4"
            ]
        ]
    },
    {
        "id": "5e2ffc27.c61dd4",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "92d8c5e984951659",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 550,
        "y": 640,
        "wires": []
    },
    {
        "id": "2dc49f96.3070c",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "92d8c5e984951659",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "87129503.c7b358"
            ]
        ]
    },
    {
        "id": "2576027248dca650",
        "type": "comment",
        "z": "677a07349b91128e",
        "g": "92d8c5e984951659",
        "name": "",
        "info": "Can be modified to trigger on values within certain range\nie \"only if changed by more than 5%\"",
        "x": 500,
        "y": 680,
        "wires": []
    },
    {
        "id": "eaf91a6b.a55da8",
        "type": "comment",
        "z": "677a07349b91128e",
        "g": "b8fc1f7984c5dcf8",
        "name": "Advanced mustache example",
        "info": "Template node can create a string value using [Mustache](http://mustache.github.io/mustache.5.html) syntax.",
        "x": 180,
        "y": 1450,
        "wires": []
    },
    {
        "id": "61fbfe34.14a02",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "b8fc1f7984c5dcf8",
        "name": "Price of fruits",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Fruits",
        "payload": "[{\"name\":\"apple\",\"price\":100},{\"name\":\"orange\",\"price\":80},{\"name\":\"banana\",\"price\":210}]",
        "payloadType": "json",
        "x": 190,
        "y": 1510,
        "wires": [
            [
                "bf0cb02.d8e4b5"
            ]
        ]
    },
    {
        "id": "bf0cb02.d8e4b5",
        "type": "template",
        "z": "677a07349b91128e",
        "g": "b8fc1f7984c5dcf8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "# Price List of {{topic}}/br\n\n{{! outputs list of prices }}\n{{#payload}}\n- {{name}}: {{price}}\n{{/payload}}\n",
        "output": "str",
        "x": 360,
        "y": 1510,
        "wires": [
            [
                "153eb0ff.5622df"
            ]
        ]
    },
    {
        "id": "153eb0ff.5622df",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "b8fc1f7984c5dcf8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1510,
        "wires": []
    },
    {
        "id": "cf27351f.392d88",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "d9e9470f866ed0fc",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Hello, World!",
        "payloadType": "str",
        "x": 190,
        "y": 1820,
        "wires": [
            [
                "75eaadfb.bed014"
            ]
        ]
    },
    {
        "id": "cd1ac74a.a149a8",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "d9e9470f866ed0fc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 510,
        "y": 1880,
        "wires": []
    },
    {
        "id": "fc2e6dfc.2b0e9",
        "type": "comment",
        "z": "677a07349b91128e",
        "g": "d9e9470f866ed0fc",
        "name": "Example: Status Node",
        "info": "Status node can catch change of status message of specified nodes or all nodes in a flow.  It receives metadata of status message.",
        "x": 160,
        "y": 1750,
        "wires": []
    },
    {
        "id": "d97b97d0.c4cfe8",
        "type": "comment",
        "z": "677a07349b91128e",
        "g": "d9e9470f866ed0fc",
        "name": "Catch status message",
        "info": "",
        "x": 160,
        "y": 1780,
        "wires": []
    },
    {
        "id": "a1914d09.e7ba2",
        "type": "comment",
        "z": "677a07349b91128e",
        "g": "d9e9470f866ed0fc",
        "name": "Catch status message of 1st debug node",
        "info": "",
        "x": 460,
        "y": 1920,
        "wires": []
    },
    {
        "id": "75fefe32.3e47d",
        "type": "status",
        "z": "677a07349b91128e",
        "g": "d9e9470f866ed0fc",
        "name": "",
        "scope": [
            "cf27351f.392d88",
            "75eaadfb.bed014"
        ],
        "x": 360,
        "y": 1880,
        "wires": [
            [
                "cd1ac74a.a149a8"
            ]
        ]
    },
    {
        "id": "75eaadfb.bed014",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "d9e9470f866ed0fc",
        "name": "statustest",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 360,
        "y": 1820,
        "wires": []
    },
    {
        "id": "fe821493.2e0e28",
        "type": "comment",
        "z": "677a07349b91128e",
        "g": "c87294c995d4add0",
        "name": "Parse result as JSON",
        "info": "Template node can create a string value using [Mustache](http://mustache.github.io/mustache.5.html) syntax.\nIf `Partsed JSON` output is selected, the created string is parsed as JSON format and JavaScript object is send as an output payload value.",
        "x": 160,
        "y": 1600,
        "wires": []
    },
    {
        "id": "931f94e8.592cd8",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "c87294c995d4add0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "message",
        "payload": "Hello, World!",
        "payloadType": "str",
        "x": 220,
        "y": 1660,
        "wires": [
            [
                "bb2b0dad.b24b5"
            ]
        ]
    },
    {
        "id": "bb2b0dad.b24b5",
        "type": "template",
        "z": "677a07349b91128e",
        "g": "c87294c995d4add0",
        "name": "JSON template",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"key\" : \"{{topic}}\",\n    \"value\": \"{{payload}}\"\n}\n",
        "output": "json",
        "x": 440,
        "y": 1660,
        "wires": [
            [
                "baf2e48.2b97418"
            ]
        ]
    },
    {
        "id": "baf2e48.2b97418",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "c87294c995d4add0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1660,
        "wires": []
    },
    {
        "id": "791a95ae.26555c",
        "type": "buffer-maker",
        "z": "677a07349b91128e",
        "g": "47be5e2857c9a0e0",
        "name": "",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "name": "item1",
                "type": "ascii",
                "length": 8,
                "dataType": "str",
                "data": "abcdefgh"
            },
            {
                "name": "item2",
                "type": "uint16le",
                "length": 1,
                "dataType": "msg",
                "data": "payload.anumber"
            },
            {
                "name": "item3",
                "type": "uint16le",
                "length": 1,
                "dataType": "msg",
                "data": "payload.anarray"
            },
            {
                "name": "item4",
                "type": "biguint64le",
                "length": 1,
                "dataType": "str",
                "data": "123456"
            },
            {
                "name": "item5",
                "type": "8bit",
                "length": 1,
                "dataType": "msg",
                "data": "payload.a8bit"
            },
            {
                "name": "item6",
                "type": "16bitle",
                "length": 1,
                "dataType": "msg",
                "data": "payload.a16bit"
            },
            {
                "name": "item7",
                "type": "bool",
                "length": 1,
                "dataType": "msg",
                "data": "payload.bools"
            },
            {
                "name": "bcd1",
                "type": "bcdle",
                "length": 2,
                "dataType": "jsonata",
                "data": "[1234,2345]"
            },
            {
                "name": "bcd2",
                "type": "bcdbe",
                "length": 1,
                "dataType": "num",
                "data": "5678"
            },
            {
                "name": "item8",
                "type": "hex",
                "length": -1,
                "dataType": "msg",
                "data": "payload.hexstring"
            }
        ],
        "swap1": "swap16",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "x": 310,
        "y": 2090,
        "wires": [
            [
                "fe3067d4.300288",
                "a08cf05c.aea2"
            ]
        ]
    },
    {
        "id": "ca252362.2b25d",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "47be5e2857c9a0e0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "spec",
                "v": "{\"options\":{\"byteSwap\":[\"swap16\"],\"msgProperty\":\"payload\"},\"items\":[{\"name\":\"item1\",\"type\":\"ascii\",\"length\":8,\"dataType\":\"str\",\"data\":\"abcdefgh\",\"value\":\"abcdefgh\"},{\"name\":\"item2\",\"type\":\"uint16le\",\"length\":1,\"dataType\":\"msg\",\"data\":\"payload.anumber\",\"value\":123},{\"name\":\"item3\",\"type\":\"uint16le\",\"length\":1,\"dataType\":\"msg\",\"data\":\"payload.anarray\"},{\"name\":\"item4\",\"type\":\"biguint64le\",\"length\":1,\"dataType\":\"str\",\"data\":\"123456\"},{\"name\":\"item5\",\"type\":\"8bit\",\"length\":1,\"dataType\":\"msg\",\"data\":\"payload.a8bit\"},{\"name\":\"item6\",\"type\":\"16bitle\",\"length\":1,\"dataType\":\"msg\",\"data\":\"payload.a16bit\"},{\"name\":\"item7\",\"type\":\"bool\",\"length\":1,\"dataType\":\"msg\",\"data\":\"payload.bools\"},{\"name\":\"item8\",\"type\":\"hex\",\"length\":-1,\"dataType\":\"msg\",\"data\":\"payload.hexstring\"}]}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"astring\":\"hello\",\"anumber\":123,\"anarray\":[1,2,3,4,5,6,7,8,9,10],\"a8bit\":[[1,1,1,0,0,0,1,0]],\"a16bit\":[[true,true,true,0,0,0,1,0,0,0,0,1,1,1,0,1]],\"bools\":[1,0,0,1,false,false,true,true],\"hexstring\":\"0102030405060708\"}",
        "payloadType": "json",
        "x": 130,
        "y": 2090,
        "wires": [
            [
                "791a95ae.26555c",
                "bd497a1e.4aff58",
                "bbe5e8ae545777dc"
            ]
        ]
    },
    {
        "id": "fe3067d4.300288",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "47be5e2857c9a0e0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 2150,
        "wires": []
    },
    {
        "id": "a08cf05c.aea2",
        "type": "buffer-parser",
        "z": "677a07349b91128e",
        "g": "47be5e2857c9a0e0",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 8,
                "offsetbit": 0,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "int16le",
                "name": "item2",
                "offset": 8,
                "length": 1,
                "offsetbit": 0,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "int16le",
                "name": "item3",
                "offset": 10,
                "length": 1,
                "offsetbit": 0,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "biguint64le",
                "name": "item4",
                "offset": 12,
                "length": 1,
                "offsetbit": 0,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "8bit",
                "name": "item5",
                "offset": 20,
                "length": 1,
                "offsetbit": 0,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "16bitle",
                "name": "item6",
                "offset": 21,
                "length": 1,
                "offsetbit": 0,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "bool",
                "name": "item7",
                "offset": 23,
                "length": 8,
                "offsetbit": 0,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "bcdle",
                "name": "bcd1",
                "offset": 24,
                "length": 2,
                "offsetbit": 8,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "bcdbe",
                "name": "bcd2",
                "offset": 28,
                "length": 1,
                "offsetbit": 8,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "hex",
                "name": "item8",
                "offset": 29,
                "length": -1,
                "offsetbit": 8,
                "scale": 1,
                "mask": ""
            }
        ],
        "swap1": "swap16",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "output",
        "multipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 550,
        "y": 2090,
        "wires": [
            [
                "64289929.b60d78"
            ]
        ]
    },
    {
        "id": "64289929.b60d78",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "47be5e2857c9a0e0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 2150,
        "wires": []
    },
    {
        "id": "bd497a1e.4aff58",
        "type": "buffer-maker",
        "z": "677a07349b91128e",
        "g": "47be5e2857c9a0e0",
        "name": "",
        "specification": "spec",
        "specificationType": "msg",
        "items": [
            {
                "name": "item1",
                "type": "ascii",
                "length": 8,
                "dataType": "str",
                "data": "abcdefgh"
            },
            {
                "name": "item2",
                "type": "uint16le",
                "length": 1,
                "dataType": "msg",
                "data": "payload.anumber"
            },
            {
                "name": "item3",
                "type": "uint16le",
                "length": 1,
                "dataType": "msg",
                "data": "payload.anarray"
            },
            {
                "name": "item4",
                "type": "biguint64le",
                "length": 1,
                "dataType": "str",
                "data": "123456"
            },
            {
                "name": "item5",
                "type": "8bit",
                "length": 1,
                "dataType": "msg",
                "data": "payload.a8bit"
            },
            {
                "name": "item6",
                "type": "16bitle",
                "length": 1,
                "dataType": "msg",
                "data": "payload.a16bit"
            },
            {
                "name": "item7",
                "type": "bool",
                "length": 1,
                "dataType": "msg",
                "data": "payload.bools"
            }
        ],
        "swap1": "swap16",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "x": 310,
        "y": 2250,
        "wires": [
            [
                "fd9977f7.520068",
                "f32e8db7.9554a"
            ]
        ]
    },
    {
        "id": "fd9977f7.520068",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "47be5e2857c9a0e0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 2310,
        "wires": []
    },
    {
        "id": "f32e8db7.9554a",
        "type": "buffer-parser",
        "z": "677a07349b91128e",
        "g": "47be5e2857c9a0e0",
        "name": "",
        "data": "payload",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "string",
                "name": "item1",
                "offset": 0,
                "length": 8,
                "offsetbit": 0,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "int16le",
                "name": "item2",
                "offset": 8,
                "length": 1,
                "offsetbit": 0,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "int16le",
                "name": "item3",
                "offset": 10,
                "length": 1,
                "offsetbit": 0,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "biguint64le",
                "name": "item4",
                "offset": 12,
                "length": 1,
                "offsetbit": 0,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "8bit",
                "name": "item5",
                "offset": 20,
                "length": 1,
                "offsetbit": 0,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "16bitle",
                "name": "item6",
                "offset": 21,
                "length": 1,
                "offsetbit": 0,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "bool",
                "name": "item7",
                "offset": 23,
                "length": 8,
                "offsetbit": 0,
                "scale": 1,
                "mask": ""
            },
            {
                "type": "hex",
                "name": "item8",
                "offset": 24,
                "length": -1,
                "offsetbit": 8,
                "scale": 1,
                "mask": ""
            }
        ],
        "swap1": "swap16",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "output",
        "multipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 550,
        "y": 2250,
        "wires": [
            [
                "d1a9924.18b1e7"
            ]
        ]
    },
    {
        "id": "d1a9924.18b1e7",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "47be5e2857c9a0e0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 2310,
        "wires": []
    },
    {
        "id": "89881af3.d907c8",
        "type": "comment",
        "z": "677a07349b91128e",
        "g": "47be5e2857c9a0e0",
        "name": "Convert values to a buffer then back again (UI Spec)",
        "info": "",
        "x": 430,
        "y": 2050,
        "wires": []
    },
    {
        "id": "213d42e.e087cbe",
        "type": "comment",
        "z": "677a07349b91128e",
        "g": "47be5e2857c9a0e0",
        "name": "Convert values to a buffer then back again (msg.spec)",
        "info": "",
        "x": 440,
        "y": 2210,
        "wires": []
    },
    {
        "id": "bbe5e8ae545777dc",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "47be5e2857c9a0e0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 2010,
        "wires": []
    },
    {
        "id": "8aef54dec2684757",
        "type": "simpletime",
        "z": "677a07349b91128e",
        "g": "201efc57174b8607",
        "name": "",
        "mydate": false,
        "myymd": false,
        "myyear": false,
        "mymonth": false,
        "mymonthn": false,
        "mydom": false,
        "mydoy": false,
        "myday": false,
        "myhourpm": true,
        "myhour": false,
        "mytime": false,
        "mytimes": false,
        "myminute": true,
        "myminutes": false,
        "mysecond": false,
        "mymillis": false,
        "myepoch": false,
        "myrawdate": false,
        "mypm": true,
        "x": 290,
        "y": 2750,
        "wires": [
            [
                "64f4fe3e4a94f3d0"
            ]
        ]
    },
    {
        "id": "f4a2238279d79ddc",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "201efc57174b8607",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 2750,
        "wires": [
            [
                "8aef54dec2684757"
            ]
        ]
    },
    {
        "id": "c2f5e6d627f299ec",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "201efc57174b8607",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 645,
        "y": 2750,
        "wires": []
    },
    {
        "id": "64f4fe3e4a94f3d0",
        "type": "template",
        "z": "677a07349b91128e",
        "g": "201efc57174b8607",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{myhourpm}}:{{myminute}}{{mypm}}",
        "output": "str",
        "x": 470,
        "y": 2750,
        "wires": [
            [
                "c2f5e6d627f299ec"
            ]
        ]
    },
    {
        "id": "ad0926de.26a49",
        "type": "moment",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "-> Berlin",
        "topic": "",
        "input": "",
        "inputType": "msg",
        "inTz": "Europe/Berlin",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "YYYY-MM-DD HH:mm:ss.SSS",
        "locale": "",
        "output": "",
        "outputType": "msg",
        "outTz": "Europe/Berlin",
        "x": 350,
        "y": 2960,
        "wires": [
            [
                "ee7a9310.023e58"
            ]
        ]
    },
    {
        "id": "c941333.51fc15",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2840,
        "wires": [
            [
                "ad0926de.26a49",
                "f72d19a0.4615e8",
                "e7332173.f40ac8",
                "11105327.b13ee5",
                "f646fc04.b042f8",
                "bce45467.abbc2",
                "729d46e9.f2e86",
                "5ee3991e.5952b"
            ]
        ]
    },
    {
        "id": "ee7a9310.023e58",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "Berlin 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 640,
        "y": 2960,
        "wires": []
    },
    {
        "id": "f72d19a0.4615e8",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 370,
        "y": 2840,
        "wires": []
    },
    {
        "id": "e7332173.f40ac8",
        "type": "moment",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "-> UTC (Zulu time)",
        "topic": "",
        "input": "",
        "inputType": "msg",
        "inTz": "Europe/Berlin",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "",
        "locale": "C",
        "output": "",
        "outputType": "msg",
        "outTz": "Europe/Berlin",
        "x": 390,
        "y": 2900,
        "wires": [
            [
                "b95b0b21.615e2"
            ]
        ]
    },
    {
        "id": "b95b0b21.615e2",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "UTC Zulu",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 640,
        "y": 2900,
        "wires": []
    },
    {
        "id": "11105327.b13ee5",
        "type": "moment",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "-> New York",
        "topic": "",
        "input": "",
        "inputType": "msg",
        "inTz": "Europe/Berlin",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "YYYY-MM-DD HH:mm",
        "locale": "",
        "output": "",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 370,
        "y": 3140,
        "wires": [
            [
                "fccc4c17.8cc668"
            ]
        ]
    },
    {
        "id": "fccc4c17.8cc668",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "NYC",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "converted",
        "statusType": "auto",
        "x": 630,
        "y": 3140,
        "wires": []
    },
    {
        "id": "f646fc04.b042f8",
        "type": "moment",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "-> adjustment + 1 yr",
        "topic": "",
        "input": "",
        "inputType": "msg",
        "inTz": "Europe/Berlin",
        "adjAmount": "1",
        "adjType": "years",
        "adjDir": "add",
        "format": "DD.MM.YYYY HH:mm",
        "locale": "",
        "output": "",
        "outputType": "msg",
        "outTz": "Europe/Berlin",
        "x": 400,
        "y": 3200,
        "wires": [
            [
                "e040c9ca.d87e18"
            ]
        ]
    },
    {
        "id": "e040c9ca.d87e18",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "Adjust 1yr",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "converted",
        "statusType": "auto",
        "x": 640,
        "y": 3200,
        "wires": []
    },
    {
        "id": "bce45467.abbc2",
        "type": "moment",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "-> adjustment + 1week",
        "topic": "",
        "input": "",
        "inputType": "msg",
        "inTz": "Europe/Berlin",
        "adjAmount": "1",
        "adjType": "weeks",
        "adjDir": "add",
        "format": "DD.MM.YYYY HH:mm",
        "locale": "C",
        "output": "",
        "outputType": "msg",
        "outTz": "Europe/Berlin",
        "x": 400,
        "y": 3260,
        "wires": [
            [
                "b5e35173.54ef1"
            ]
        ]
    },
    {
        "id": "b5e35173.54ef1",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "Adjust 1wk",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "converted",
        "statusType": "auto",
        "x": 650,
        "y": 3260,
        "wires": []
    },
    {
        "id": "5a45bddc.198614",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "Berlin 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 640,
        "y": 3020,
        "wires": []
    },
    {
        "id": "729d46e9.f2e86",
        "type": "moment",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "-> Berlin",
        "topic": "",
        "input": "",
        "inputType": "msg",
        "inTz": "Europe/Berlin",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "DD.MM.YYYY HH:mm",
        "locale": "",
        "output": "",
        "outputType": "msg",
        "outTz": "Europe/Berlin",
        "x": 350,
        "y": 3020,
        "wires": [
            [
                "5a45bddc.198614"
            ]
        ]
    },
    {
        "id": "453f43aa.10f854",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "Berlin 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 640,
        "y": 3080,
        "wires": []
    },
    {
        "id": "5ee3991e.5952b",
        "type": "moment",
        "z": "677a07349b91128e",
        "g": "6edda39437db838e",
        "name": "-> Berlin",
        "topic": "",
        "input": "",
        "inputType": "msg",
        "inTz": "Europe/Berlin",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "LLLL",
        "locale": "",
        "output": "",
        "outputType": "msg",
        "outTz": "Europe/Berlin",
        "x": 350,
        "y": 3080,
        "wires": [
            [
                "453f43aa.10f854"
            ]
        ]
    },
    {
        "id": "ae01eb30.2a687",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "Send probe",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "cmnd/tasmota_6D52B1/STATUS",
        "x": 210,
        "y": 3450,
        "wires": [
            [
                "3a6b7f67.431c98",
                "b15e33fc4e57517e"
            ]
        ]
    },
    {
        "id": "de6bf955.a53eb8",
        "type": "mqtt in",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "topic": "tele/+/LWT",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "c689a17e.a806a8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 170,
        "y": 3510,
        "wires": [
            [
                "41b7585d.2273b8",
                "0aa2ca5a201251cd"
            ]
        ]
    },
    {
        "id": "6cdaaf73.e2a6c",
        "type": "mqtt in",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "topic": "tele/+/INFO2",
        "qos": "2",
        "broker": "c689a17e.a806a8",
        "inputs": 0,
        "x": 180,
        "y": 3590,
        "wires": [
            [
                "5b058b8a.e3c2bc"
            ]
        ]
    },
    {
        "id": "c5a9bf9f.41ee88",
        "type": "mqtt in",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "topic": "stat/+/STATUS",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "c689a17e.a806a8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 3640,
        "wires": [
            [
                "5c6a4608b4f28f6f",
                "62649a3b.6f89fc"
            ]
        ]
    },
    {
        "id": "5b058b8a.e3c2bc",
        "type": "json",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "pretty": false,
        "x": 340,
        "y": 3590,
        "wires": [
            [
                "caaf7b55.f4eaf"
            ]
        ]
    },
    {
        "id": "41b7585d.2273b8",
        "type": "change",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "topic",
                "pt": "msg",
                "from": "tele/(.+)/LWT",
                "fromt": "re",
                "to": "$1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 3510,
        "wires": [
            [
                "9dc4592e.8b8b68"
            ]
        ]
    },
    {
        "id": "caaf7b55.f4eaf",
        "type": "change",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "topic",
                "pt": "msg",
                "from": "tele/(.+)/INFO2",
                "fromt": "re",
                "to": "$1",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.Name",
                "pt": "msg",
                "to": "topic",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload.WebserverMode",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 3590,
        "wires": [
            []
        ]
    },
    {
        "id": "62649a3b.6f89fc",
        "type": "change",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "stat/tasmota_6D52B1/STATUS",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "devices",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "tasmotaname",
                "pt": "msg",
                "to": "payload.Status.Topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "friendlyname",
                "pt": "msg",
                "to": "payload.Status.FriendlyName[0]",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 3640,
        "wires": [
            [
                "2d059d98cc87bc64",
                "8adb43a95858e66a"
            ]
        ]
    },
    {
        "id": "61486286.f925bc",
        "type": "ui_template",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "group": "cd6a6011.f60598",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<md-list>\n    <md-list-item ng-repeat=\"device in msg.payload\">\n        <md-button class=\"md-ink-ripple\" ng-href=\"http://{{device.tasmotaname}}\" target=\"_blank\">{{device.Name}}</md-button>\n    </md-list-item>\n    \n</md-list>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1180,
        "y": 3590,
        "wires": [
            []
        ]
    },
    {
        "id": "3a6b7f67.431c98",
        "type": "mqtt out",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c689a17e.a806a8",
        "x": 1010,
        "y": 3450,
        "wires": []
    },
    {
        "id": "5d345790.b90158",
        "type": "delay",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 850,
        "y": 3490,
        "wires": [
            [
                "3a6b7f67.431c98"
            ]
        ]
    },
    {
        "id": "bded06c.02ccc78",
        "type": "change",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "5",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "topic",
                "pt": "msg",
                "from": "(.+)",
                "fromt": "re",
                "to": "cmnd/$1/STATUS",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "qos",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 3490,
        "wires": [
            [
                "5d345790.b90158"
            ]
        ]
    },
    {
        "id": "4973e61c.2759e",
        "type": "change",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 3530,
        "wires": [
            [
                "fdd620b4.d28188"
            ]
        ]
    },
    {
        "id": "fdd620b4.d28188",
        "type": "collector",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "onlyIfChanged": true,
        "x": 1020,
        "y": 3630,
        "wires": [
            [
                "61486286.f925bc",
                "2e605c3ae2d34212",
                "1cc8e46ad86e1e7f"
            ]
        ]
    },
    {
        "id": "9dc4592e.8b8b68",
        "type": "match",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "rules": [
            {
                "property": "payload",
                "propertyType": "msg",
                "type": "eq",
                "value": "Online",
                "valueType": "str"
            }
        ],
        "x": 510,
        "y": 3510,
        "wires": [
            [
                "bded06c.02ccc78"
            ],
            [
                "4973e61c.2759e"
            ]
        ],
        "outputLabels": [
            "Online",
            "Offline"
        ]
    },
    {
        "id": "aecf0463ab678d27",
        "type": "ui_button",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "group": "cd6a6011.f60598",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Query devices",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 220,
        "y": 3400,
        "wires": [
            [
                "f335cc36d0bbef1a"
            ]
        ]
    },
    {
        "id": "0aa2ca5a201251cd",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "LWT Rcvd",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 3550,
        "wires": []
    },
    {
        "id": "20ab98c220edce2e",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "Query Devices",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 3400,
        "wires": []
    },
    {
        "id": "b15e33fc4e57517e",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "Query Devices",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 3470,
        "wires": []
    },
    {
        "id": "f335cc36d0bbef1a",
        "type": "change",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "5",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "cmnd/sonoffs/STATUS",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "event",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "socketid",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_msgid",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 3400,
        "wires": [
            [
                "3a6b7f67.431c98",
                "20ab98c220edce2e"
            ]
        ]
    },
    {
        "id": "5c6a4608b4f28f6f",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "STATUS REPORT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 3680,
        "wires": []
    },
    {
        "id": "2d059d98cc87bc64",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "change1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 3690,
        "wires": []
    },
    {
        "id": "2e605c3ae2d34212",
        "type": "ui_template",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "group": "cd6a6011.f60598",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<md-list>\n    <md-list-item ng-repeat=\"device in msg.payload\">\n        <md-button class=\"md-ink-ripple\" ng-href=\"http://{{device.tasmotaname}}\" target=\"_blank\">{{device.friendlyname}}\n        </md-button>\n    </md-list-item>\n\n</md-list>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1180,
        "y": 3620,
        "wires": [
            []
        ],
        "info": "Original\r\n\r\n<md-list>\r\n    <md-list-item ng-repeat=\"device in msg.payload\">\r\n        <md-button class=\"md-ink-ripple\" ng-href=\"http://{{device.Hostname}}\" target=\"_blank\">{{device.Name}}</md-button>\r\n    </md-list-item>\r\n    \r\n</md-list>"
    },
    {
        "id": "1cc8e46ad86e1e7f",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "collector",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 3670,
        "wires": []
    },
    {
        "id": "8adb43a95858e66a",
        "type": "change",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "stat/tasmota_6D52B1/STATUS",
        "rules": [
            {
                "t": "move",
                "p": "friendlyname",
                "pt": "msg",
                "to": "payload.friendlyname",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "tasmotaname",
                "pt": "msg",
                "to": "payload.tasmotaname",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 3630,
        "wires": [
            [
                "fdd620b4.d28188",
                "f5c8435a4b4ee9ad"
            ]
        ]
    },
    {
        "id": "f5c8435a4b4ee9ad",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "change2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 3700,
        "wires": []
    },
    {
        "id": "747d1ae842e938ef",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "stat/tasmota_6D52B1/STATUS",
        "payload": "{\"Status\":{\"Module\":0,\"DeviceName\":\"Tasmota0\",\"FriendlyName\":[\"CrashTestDummy\"],\"Topic\":\"tasmota_6D52B1\",\"ButtonTopic\":\"0\",\"Power\":1,\"PowerOnState\":3,\"LedState\":1,\"LedMask\":\"FFFF\",\"SaveData\":1,\"SaveState\":1,\"SwitchTopic\":\"0\",\"SwitchMode\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"ButtonRetain\":0,\"SwitchRetain\":0,\"SensorRetain\":0,\"PowerRetain\":0,\"InfoRetain\":0,\"StateRetain\":0,\"StatusRetain\":0}}",
        "payloadType": "str",
        "x": 130,
        "y": 3690,
        "wires": [
            [
                "c5c001b43e0b45a1"
            ]
        ]
    },
    {
        "id": "c5c001b43e0b45a1",
        "type": "json",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 250,
        "y": 3690,
        "wires": [
            [
                "62649a3b.6f89fc"
            ]
        ]
    },
    {
        "id": "2a32a68b4f88cb4b",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "stat/tasmota_6DR2D2/STATUS",
        "payload": "{\"Status\":{\"Module\":0,\"DeviceName\":\"Tasmota1\",\"FriendlyName\":[\"CrashTestIdiot\"],\"Topic\":\"tasmota_6DR2D2\",\"ButtonTopic\":\"0\",\"Power\":1,\"PowerOnState\":3,\"LedState\":1,\"LedMask\":\"FFFF\",\"SaveData\":1,\"SaveState\":1,\"SwitchTopic\":\"0\",\"SwitchMode\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"ButtonRetain\":0,\"SwitchRetain\":0,\"SensorRetain\":0,\"PowerRetain\":0,\"InfoRetain\":0,\"StateRetain\":0,\"StatusRetain\":0}}",
        "payloadType": "str",
        "x": 130,
        "y": 3730,
        "wires": [
            [
                "c5c001b43e0b45a1"
            ]
        ]
    },
    {
        "id": "7e6f850dc6342971",
        "type": "comment",
        "z": "677a07349b91128e",
        "g": "ba6049e8356985c4",
        "name": "TASMOTA JUNK",
        "info": "",
        "x": 160,
        "y": 3360,
        "wires": []
    },
    {
        "id": "c0f0a6e086dc9271",
        "type": "status",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "status 5",
        "scope": [
            "0d4918adb74a3321"
        ],
        "x": 590,
        "y": 2480,
        "wires": [
            [
                "fee743f632e8c60d",
                "5fd6557fa0d3143e"
            ]
        ]
    },
    {
        "id": "f6e84f6f90010220",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "timestamp",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 2400,
        "wires": [
            [
                "98c7ad7c868130df"
            ]
        ]
    },
    {
        "id": "e4e60d8775cc723d",
        "type": "ui_switch",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "open/close",
        "label": "open/close",
        "tooltip": "",
        "group": "5cfe21d2.307938",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "control",
        "topicType": "str",
        "style": "",
        "onvalue": "open",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "close",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 490,
        "y": 2600,
        "wires": [
            [
                "c1c4a91001503b10"
            ]
        ]
    },
    {
        "id": "6bdc75e913758458",
        "type": "ui_button",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "toggle",
        "group": "fdb6c31c.4f2818",
        "order": 17,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "toggle",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "toggle",
        "payloadType": "str",
        "topic": "control",
        "x": 330,
        "y": 2440,
        "wires": [
            [
                "0d4918adb74a3321"
            ]
        ]
    },
    {
        "id": "d4da5b523229f5ed",
        "type": "ui_button",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "reset",
        "group": "fdb6c31c.4f2818",
        "order": 15,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "reset",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "default",
        "payloadType": "str",
        "topic": "control",
        "x": 330,
        "y": 2480,
        "wires": [
            [
                "0d4918adb74a3321"
            ]
        ]
    },
    {
        "id": "98c7ad7c868130df",
        "type": "ui_button",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "message 1",
        "group": "fdb6c31c.4f2818",
        "order": 16,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Send",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "anything",
        "x": 310,
        "y": 2400,
        "wires": [
            [
                "0d4918adb74a3321"
            ]
        ]
    },
    {
        "id": "0d29d1d022792b4e",
        "type": "ui_button",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "message 2",
        "group": "5cfe21d2.307938",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Send",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "",
        "x": 490,
        "y": 2560,
        "wires": [
            [
                "c1c4a91001503b10"
            ]
        ]
    },
    {
        "id": "870f5502121840ac",
        "type": "ui_text",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "group": "fdb6c31c.4f2818",
        "order": 14,
        "width": 0,
        "height": 0,
        "name": "display 1",
        "label": "Message",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 600,
        "y": 2440,
        "wires": []
    },
    {
        "id": "fee743f632e8c60d",
        "type": "ui_text",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "group": "fdb6c31c.4f2818",
        "order": 13,
        "width": 0,
        "height": 0,
        "name": "status 1",
        "label": "Status",
        "format": "{{msg.status.text}}",
        "layout": "row-spread",
        "x": 750,
        "y": 2450,
        "wires": []
    },
    {
        "id": "e0805655e5c51577",
        "type": "ui_text",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "group": "5cfe21d2.307938",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "display 2",
        "label": "Message",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 780,
        "y": 2580,
        "wires": []
    },
    {
        "id": "8adfc58da959dcde",
        "type": "ui_text",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "group": "5cfe21d2.307938",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "status 2",
        "label": "Status",
        "format": "{{msg.status.text}}",
        "layout": "row-spread",
        "x": 900,
        "y": 2620,
        "wires": []
    },
    {
        "id": "258651d5bd48c3d5",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "timestamp",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 2560,
        "wires": [
            [
                "0d29d1d022792b4e"
            ]
        ]
    },
    {
        "id": "0cf73c063e96addf",
        "type": "status",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "status 6",
        "scope": [
            "c1c4a91001503b10"
        ],
        "x": 770,
        "y": 2620,
        "wires": [
            [
                "8adfc58da959dcde"
            ]
        ]
    },
    {
        "id": "9290cc9d161f9cf7",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "toggle",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 2440,
        "wires": [
            [
                "6bdc75e913758458"
            ]
        ]
    },
    {
        "id": "7e47939d2a47d184",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "reset",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 2480,
        "wires": [
            [
                "d4da5b523229f5ed"
            ]
        ]
    },
    {
        "id": "5fd6557fa0d3143e",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "status",
        "x": 750,
        "y": 2490,
        "wires": []
    },
    {
        "id": "0d4918adb74a3321",
        "type": "gate",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "gate 5",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memoryOnly",
        "x": 470,
        "y": 2440,
        "wires": [
            [
                "870f5502121840ac"
            ]
        ]
    },
    {
        "id": "c1c4a91001503b10",
        "type": "gate",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "gate 6",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 650,
        "y": 2580,
        "wires": [
            [
                "e0805655e5c51577"
            ]
        ]
    },
    {
        "id": "f8404f976bdff26a",
        "type": "change",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 2600,
        "wires": [
            [
                "e4e60d8775cc723d"
            ]
        ]
    },
    {
        "id": "a949413f4cc16341",
        "type": "change",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "close",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 2630,
        "wires": [
            [
                "e4e60d8775cc723d"
            ]
        ]
    },
    {
        "id": "66da319c6428cd86",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "on / open",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "payload": "open",
        "payloadType": "str",
        "x": 140,
        "y": 2600,
        "wires": [
            [
                "f8404f976bdff26a"
            ]
        ]
    },
    {
        "id": "977aeb15687165ee",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "61eedda5c16950aa",
        "name": "off / close",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "control",
        "payload": "close",
        "payloadType": "str",
        "x": 140,
        "y": 2630,
        "wires": [
            [
                "a949413f4cc16341"
            ]
        ]
    },
    {
        "id": "bd1b9414.8b32b8",
        "type": "config",
        "z": "677a07349b91128e",
        "g": "e7b7f2db937ef6c1",
        "name": "Install Linux",
        "properties": [
            {
                "p": "PC_Stability",
                "pt": "global",
                "to": "Well done! Stable system.",
                "tot": "str"
            }
        ],
        "active": true,
        "x": 340,
        "y": 3840,
        "wires": []
    },
    {
        "id": "d8e9f39e.653ea",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "e7b7f2db937ef6c1",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 3900,
        "wires": [
            [
                "9e818396.ce9d2"
            ]
        ]
    },
    {
        "id": "2a388509.ad5742",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "e7b7f2db937ef6c1",
        "name": "",
        "repeat": "0.1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 140,
        "y": 3960,
        "wires": [
            [
                "57ac7186.93afd8"
            ]
        ]
    },
    {
        "id": "f036c088.c54bd8",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "e7b7f2db937ef6c1",
        "name": "PC_Stability",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "x": 590,
        "y": 3960,
        "wires": []
    },
    {
        "id": "57ac7186.93afd8",
        "type": "change",
        "z": "677a07349b91128e",
        "g": "e7b7f2db937ef6c1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "PC_Stability",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 3960,
        "wires": [
            [
                "f036c088.c54bd8"
            ]
        ]
    },
    {
        "id": "9730e6c0.d46aa",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "e7b7f2db937ef6c1",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 3840,
        "wires": [
            [
                "bd1b9414.8b32b8"
            ]
        ]
    },
    {
        "id": "9e818396.ce9d2",
        "type": "config",
        "z": "677a07349b91128e",
        "g": "e7b7f2db937ef6c1",
        "name": "Install Win",
        "properties": [
            {
                "p": "PC_Stability",
                "pt": "global",
                "to": "Unstable system. May crash.",
                "tot": "str"
            }
        ],
        "active": false,
        "x": 330,
        "y": 3900,
        "wires": []
    },
    {
        "id": "fd2d7768.345b98",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "6be5a2871c697279",
        "name": "msg.payload = \"Red\"",
        "props": [
            {
                "p": "payload",
                "v": "Red",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Red",
        "payloadType": "str",
        "x": 180,
        "y": 4050,
        "wires": [
            [
                "320b54d6.e604d4"
            ]
        ]
    },
    {
        "id": "676a128f.8a03dc",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "6be5a2871c697279",
        "name": "msg.result = RedRedRedRedRed",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "result",
        "targetType": "msg",
        "x": 740,
        "y": 4050,
        "wires": []
    },
    {
        "id": "5d19cb24.ac3444",
        "type": "change",
        "z": "677a07349b91128e",
        "g": "6be5a2871c697279",
        "name": "msg.result = msg.result + msg.payload",
        "rules": [
            {
                "t": "set",
                "p": "result",
                "pt": "msg",
                "to": "$join([msg.result, msg.payload])",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 4130,
        "wires": [
            [
                "320b54d6.e604d4"
            ]
        ]
    },
    {
        "id": "320b54d6.e604d4",
        "type": "counter-loop",
        "z": "677a07349b91128e",
        "g": "6be5a2871c697279",
        "name": "counter-loop",
        "counter": "il320b54d6e604d4",
        "counterType": "msg",
        "reset": false,
        "resetValue": "value-null",
        "initial": "0",
        "initialType": "num",
        "operator": "lt",
        "termination": "5",
        "terminationType": "num",
        "increment": 1,
        "incrementType": "num",
        "x": 405,
        "y": 4050,
        "wires": [
            [
                "676a128f.8a03dc"
            ],
            [
                "5d19cb24.ac3444",
                "4bee5fb8153d09d7"
            ]
        ]
    },
    {
        "id": "4bee5fb8153d09d7",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "6be5a2871c697279",
        "name": "loop counter",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "il320b54d6e604d4",
        "targetType": "msg",
        "statusVal": "il320b54d6e604d4",
        "statusType": "auto",
        "x": 680,
        "y": 4090,
        "wires": []
    },
    {
        "id": "1a60a19a.718526",
        "type": "array-loop",
        "z": "677a07349b91128e",
        "g": "361d37e243341e22",
        "name": "array-loop",
        "key": "al1a60a19a718526",
        "keyType": "msg",
        "reset": false,
        "resetValue": "value-null",
        "array": "array",
        "arrayType": "msg",
        "x": 680,
        "y": 4220,
        "wires": [
            [
                "2a06fe8f.883d92"
            ],
            [
                "a9176a45.c66998"
            ]
        ]
    },
    {
        "id": "122377f3.e507f8",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "361d37e243341e22",
        "name": "msg.payload = \"A, B, C, D, E\"",
        "props": [
            {
                "p": "payload",
                "v": "A, B, C, D, E",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "A, B, C, D, E",
        "payloadType": "str",
        "x": 200,
        "y": 4220,
        "wires": [
            [
                "c129d4e9.65ec6"
            ]
        ]
    },
    {
        "id": "2a06fe8f.883d92",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "361d37e243341e22",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 850,
        "y": 4220,
        "wires": []
    },
    {
        "id": "c129d4e9.65ec6",
        "type": "change",
        "z": "677a07349b91128e",
        "g": "361d37e243341e22",
        "name": "split msg.payload by \", \"",
        "rules": [
            {
                "t": "set",
                "p": "array",
                "pt": "msg",
                "to": "$split(msg.payload, ', ')",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 4220,
        "wires": [
            [
                "1a60a19a.718526"
            ]
        ]
    },
    {
        "id": "a72c351c.98ba48",
        "type": "function",
        "z": "677a07349b91128e",
        "g": "361d37e243341e22",
        "name": "return msg",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 4295,
        "wires": [
            [
                "548c8549.cc9904",
                "1a60a19a.718526"
            ]
        ]
    },
    {
        "id": "548c8549.cc9904",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "361d37e243341e22",
        "name": "1st: \"A\", 2nd: \"B\", 3rd: \"C\", 4th: \"D\", 5th: \"E\"",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1135,
        "y": 4295,
        "wires": []
    },
    {
        "id": "a9176a45.c66998",
        "type": "delay",
        "z": "677a07349b91128e",
        "g": "361d37e243341e22",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 680,
        "y": 4295,
        "wires": [
            [
                "a72c351c.98ba48"
            ]
        ]
    },
    {
        "id": "1c8465fc.10e082",
        "type": "while-loop",
        "z": "677a07349b91128e",
        "g": "6a2e73bbc08baef0",
        "name": "while-loop",
        "condi": "msg.payload % 3 !== 0",
        "limit": false,
        "limitTime": "",
        "time": "wl1c8465fc10e082",
        "timeType": "msg",
        "x": 350,
        "y": 4430,
        "wires": [
            [
                "b887c6d1.43c668"
            ],
            [
                "24b7b946.fcc9b6"
            ]
        ]
    },
    {
        "id": "7e4cca20.588e7c",
        "type": "inject",
        "z": "677a07349b91128e",
        "g": "6a2e73bbc08baef0",
        "name": "msg.payload = 5",
        "props": [
            {
                "p": "payload",
                "v": "5",
                "vt": "num"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 160,
        "y": 4430,
        "wires": [
            [
                "1c8465fc.10e082"
            ]
        ]
    },
    {
        "id": "b887c6d1.43c668",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "6a2e73bbc08baef0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 585,
        "y": 4430,
        "wires": []
    },
    {
        "id": "24b7b946.fcc9b6",
        "type": "change",
        "z": "677a07349b91128e",
        "g": "6a2e73bbc08baef0",
        "name": "msg.payload--",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$number(msg.payload) -1",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 4505,
        "wires": [
            [
                "a72010f2.69313",
                "64d645c5.fe848c"
            ]
        ]
    },
    {
        "id": "64d645c5.fe848c",
        "type": "debug",
        "z": "677a07349b91128e",
        "g": "6a2e73bbc08baef0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 555,
        "y": 4550,
        "wires": []
    },
    {
        "id": "a72010f2.69313",
        "type": "delay",
        "z": "677a07349b91128e",
        "g": "6a2e73bbc08baef0",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 545,
        "y": 4505,
        "wires": [
            [
                "1c8465fc.10e082"
            ]
        ]
    },
    {
        "id": "d5600b9a.fd9288",
        "type": "comment",
        "z": "677a07349b91128e",
        "g": "6a2e73bbc08baef0",
        "name": "msg.payload % 3 !== 0",
        "info": "",
        "x": 390,
        "y": 4385,
        "wires": []
    },
    {
        "id": "c2e7426fc8b2de87",
        "type": "comment",
        "z": "677a07349b91128e",
        "name": "JSON Example",
        "info": "{\"ingredient\":\"rat\",\"recipe\":\"gumbo\",\"rating\":10}\n\n{\"_msgid\":\"f52b4c8f09f7f769\",\"payload\":{\"ingredient\":\"rat\",\"recipe\":\"gumbo\",\"rating\":10},\"topic\":\"test\",\"columns\":\"ingredient,recipe,rating\",\"parts\":{\"id\":\"f52b4c8f09f7f769\",\"index\":0,\"count\":1}}\n",
        "x": 750,
        "y": 350,
        "wires": []
    },
    {
        "id": "704479e1.399388",
        "type": "inject",
        "z": "677a07349b91128e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "filename",
                "v": "/tmp/hello.txt",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Hello, World!",
        "payloadType": "str",
        "x": 210,
        "y": 4740,
        "wires": [
            [
                "402f3b7e.988014"
            ]
        ]
    },
    {
        "id": "8e876a75.e9beb8",
        "type": "comment",
        "z": "677a07349b91128e",
        "name": "Write string to a file specied by filename property, the read from the file",
        "info": "Write file node can target file using `filename` property.",
        "x": 330,
        "y": 4660,
        "wires": []
    },
    {
        "id": "402f3b7e.988014",
        "type": "file",
        "z": "677a07349b91128e",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 370,
        "y": 4740,
        "wires": [
            [
                "26e077d6.bbcd98"
            ]
        ]
    },
    {
        "id": "97b6b6b2.a54b38",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 4740,
        "wires": []
    },
    {
        "id": "26e077d6.bbcd98",
        "type": "file in",
        "z": "677a07349b91128e",
        "name": "",
        "filename": "/tmp/hello.txt",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 560,
        "y": 4740,
        "wires": [
            [
                "97b6b6b2.a54b38"
            ]
        ]
    },
    {
        "id": "85062297.da79",
        "type": "comment",
        "z": "677a07349b91128e",
        "name": "↑read result from file",
        "info": "",
        "x": 570,
        "y": 4780,
        "wires": []
    },
    {
        "id": "7316c4fc.b1dcdc",
        "type": "comment",
        "z": "677a07349b91128e",
        "name": "↓write to file specified by filename property",
        "info": "",
        "x": 480,
        "y": 4700,
        "wires": []
    },
    {
        "id": "e4ef1f5e.7cd82",
        "type": "inject",
        "z": "677a07349b91128e",
        "name": "Base64 encoded string",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "8J+YgA==",
        "payloadType": "str",
        "x": 230,
        "y": 4930,
        "wires": [
            [
                "72b37cc8.177054"
            ]
        ]
    },
    {
        "id": "f5997af4.5a9298",
        "type": "comment",
        "z": "677a07349b91128e",
        "name": "Specify encoding of written data",
        "info": "Write file node can specify encoding of data.",
        "x": 200,
        "y": 4850,
        "wires": []
    },
    {
        "id": "72b37cc8.177054",
        "type": "file",
        "z": "677a07349b91128e",
        "name": "",
        "filename": "/tmp/hello.txt",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 450,
        "y": 4930,
        "wires": [
            [
                "2da33ec.f45cac2"
            ]
        ]
    },
    {
        "id": "2e814354.278c8c",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 4930,
        "wires": []
    },
    {
        "id": "2da33ec.f45cac2",
        "type": "file in",
        "z": "677a07349b91128e",
        "name": "",
        "filename": "/tmp/hello.txt",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 650,
        "y": 4930,
        "wires": [
            [
                "2e814354.278c8c"
            ]
        ]
    },
    {
        "id": "ec754c99.84bfd",
        "type": "comment",
        "z": "677a07349b91128e",
        "name": "↓write string with base64 encoding",
        "info": "",
        "x": 510,
        "y": 4890,
        "wires": []
    },
    {
        "id": "3e6704ff.4ce25c",
        "type": "comment",
        "z": "677a07349b91128e",
        "name": "↑read result from file",
        "info": "",
        "x": 660,
        "y": 4970,
        "wires": []
    },
    {
        "id": "ec5a531b.68b65",
        "type": "inject",
        "z": "677a07349b91128e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1340,
        "y": 4930,
        "wires": [
            [
                "cb5e0c78.4bf3d"
            ]
        ]
    },
    {
        "id": "1b0f8c3e.1fd7e4",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 4930,
        "wires": []
    },
    {
        "id": "cb5e0c78.4bf3d",
        "type": "trigger",
        "z": "677a07349b91128e",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1500,
        "y": 4930,
        "wires": [
            [
                "1b0f8c3e.1fd7e4"
            ]
        ]
    },
    {
        "id": "4e5bf6b2.b4dd58",
        "type": "comment",
        "z": "677a07349b91128e",
        "name": "Oputputs two values with interval",
        "info": "Outputs 1. Then output 0 after a certain period of time.\n\n*This could be used, for example, to blink an LED attached to a Raspberry Pi GPIO pin.*",
        "x": 1350,
        "y": 4870,
        "wires": []
    },
    {
        "id": "f31a598d.9fd2c8",
        "type": "function",
        "z": "677a07349b91128e",
        "name": "Set base path",
        "func": "//restrict to c:\\temp\\\nvar basePath = \"c:\\\\temp\\\\\";\nvar filename = msg.req.params.fn;\n\n\nif(filename.includes(\"..\\\\\")){\n    msg.payload = \"Illegal file path\";\n    msg.statusCode = 405;//not allowed\n    return [null, msg];//fire output 2\n} else if(filename.includes(\"../\")){\n    msg.payload = \"Illegal file path\";\n    msg.statusCode = 405;//not allowed\n    return [null, msg];//fire output 2\n} \n//TODO: add more checks\n\nmsg.filename = basePath + filename;\nreturn [msg, null];//fire output 1\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "x": 2750,
        "y": 4520,
        "wires": [
            [
                "34dc99e5.495466"
            ],
            [
                "98261154.3006"
            ]
        ]
    },
    {
        "id": "98261154.3006",
        "type": "http response",
        "z": "677a07349b91128e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 3100,
        "y": 4560,
        "wires": []
    },
    {
        "id": "34dc99e5.495466",
        "type": "file in",
        "z": "677a07349b91128e",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 2940,
        "y": 4500,
        "wires": [
            [
                "98261154.3006"
            ]
        ]
    },
    {
        "id": "38d65d59.1d8aa2",
        "type": "catch",
        "z": "677a07349b91128e",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 2570,
        "y": 4600,
        "wires": [
            [
                "3b8014a.86ad8ec",
                "5b18a8e7.fb8da8"
            ]
        ]
    },
    {
        "id": "3b8014a.86ad8ec",
        "type": "function",
        "z": "677a07349b91128e",
        "name": "Set 404",
        "func": "msg.payload = msg.error;\nmsg.statusCode = 404;//resource not found\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2950,
        "y": 4600,
        "wires": [
            [
                "98261154.3006"
            ]
        ]
    },
    {
        "id": "5b18a8e7.fb8da8",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2600,
        "y": 4640,
        "wires": []
    },
    {
        "id": "a8c2985e.d23ad8",
        "type": "ui_template",
        "z": "677a07349b91128e",
        "group": "dfb4a60f.d788f8",
        "name": "ui_temlplate - present download links on dashboard",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<div >\n    <a href=\"/files/log.log\">download log.log</a>\n    <a href=\"/files/log2.log\">download log2.log</a>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 2940,
        "y": 4680,
        "wires": [
            []
        ]
    },
    {
        "id": "5de7cbb4.fa21a4",
        "type": "comment",
        "z": "677a07349b91128e",
        "name": "Create http endpoint <nodered>/files/xxx  where xxx is the file name to download",
        "info": "",
        "x": 2790,
        "y": 4460,
        "wires": []
    },
    {
        "id": "67ecfa7f.3f0e24",
        "type": "http in",
        "z": "677a07349b91128e",
        "name": "",
        "url": "/files/:fn",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2580,
        "y": 4520,
        "wires": [
            [
                "f31a598d.9fd2c8"
            ]
        ]
    },
    {
        "id": "6a5fb95dfbc0e312",
        "type": "csv",
        "z": "677a07349b91128e",
        "name": "Azimuth Joiner",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "millis,packetnum,wifirssi,azimuth,magnetstr",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1890,
        "y": 480,
        "wires": [
            [
                "c56d33416801cef8"
            ]
        ]
    },
    {
        "id": "8d2affafccf79334",
        "type": "mqtt out",
        "z": "677a07349b91128e",
        "name": "SimAzimuthMQTTout",
        "topic": "node/azimuth",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9ad53e0e62e39b88",
        "x": 2170,
        "y": 530,
        "wires": []
    },
    {
        "id": "fe1e984ba4df6e71",
        "type": "ui_text_input",
        "z": "677a07349b91128e",
        "name": "",
        "label": "Azimuth Step Val",
        "tooltip": "",
        "group": "fdb6c31c.4f2818",
        "order": 3,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "stepval",
        "sendOnBlur": true,
        "className": "",
        "topicType": "flow",
        "x": 1760,
        "y": 90,
        "wires": [
            [
                "a246f4e3014373e9",
                "3662e9ff2425f1e8"
            ]
        ]
    },
    {
        "id": "500f0abf26177130",
        "type": "ui_text_input",
        "z": "677a07349b91128e",
        "name": "",
        "label": "Azimuth Report Interval",
        "tooltip": "",
        "group": "fdb6c31c.4f2818",
        "order": 4,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "reportinterval",
        "sendOnBlur": true,
        "className": "",
        "topicType": "flow",
        "x": 1520,
        "y": 90,
        "wires": [
            [
                "fe1e984ba4df6e71",
                "605859ba1bc7b3f5"
            ]
        ]
    },
    {
        "id": "aa6ab578fac91034",
        "type": "ui_switch",
        "z": "677a07349b91128e",
        "name": "",
        "label": "SimAzimuth Rotation",
        "tooltip": "",
        "group": "fdb6c31c.4f2818",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "simazimuthrotation",
        "topicType": "flow",
        "style": "",
        "onvalue": "{\"rotation\":\"TRUE\",\"starttime\":\"0\",\"stepval\":\"0.2\",\"reportinterval\":\"450\",\"millis\":\"1\",\"packetnum\":\"0\",\"wifirssi\":-50,\"azimuth\":0,\"magnetstr\":1000}",
        "onvalueType": "json",
        "onicon": "",
        "oncolor": "",
        "offvalue": "{\"rotation\":\"FALSE\",\"starttime\":\"0\",\"stepval\":\"0.2\",\"reportinterval\":\"450\",\"millis\":\"1\",\"packetnum\":\"0\",\"wifirssi\":-50,\"azimuth\":0,\"magnetstr\":1000}",
        "offvalueType": "json",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1270,
        "y": 90,
        "wires": [
            [
                "500f0abf26177130",
                "a0ac276193490bc6"
            ]
        ]
    },
    {
        "id": "c538618d61fed226",
        "type": "delay",
        "z": "677a07349b91128e",
        "name": "",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1480,
        "y": 410,
        "wires": [
            [
                "84965d0f036a345f"
            ]
        ]
    },
    {
        "id": "84965d0f036a345f",
        "type": "change",
        "z": "677a07349b91128e",
        "name": "UpdateSimAzPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload.currenttime",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "payload.millis",
                "pt": "msg",
                "to": "$number(msg.payload.currenttime)-$number(flow.SimAzimuthStartTime)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "SimAzimuthPacketNum",
                "pt": "flow",
                "to": "$number(flow.SimAzimuthPacketNum)+1",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.packetnum",
                "pt": "msg",
                "to": "SimAzimuthPacketNum",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1770,
        "y": 410,
        "wires": [
            [
                "b19c4e76b9eb0e36"
            ]
        ]
    },
    {
        "id": "b19c4e76b9eb0e36",
        "type": "random",
        "z": "677a07349b91128e",
        "name": "SimMagStr",
        "low": "500",
        "high": "2000",
        "inte": "true",
        "property": "payload.magnetstr",
        "x": 1980,
        "y": 410,
        "wires": [
            [
                "ca4d7f483c0c4bfd"
            ]
        ]
    },
    {
        "id": "c56d33416801cef8",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "SimAzimuthMQTTOut",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2170,
        "y": 470,
        "wires": []
    },
    {
        "id": "173d94cf8a9c0f3c",
        "type": "random",
        "z": "677a07349b91128e",
        "name": "SimAzWiFiRSSI",
        "low": "-50",
        "high": "-100",
        "inte": "true",
        "property": "payload.wifirssi",
        "x": 1660,
        "y": 530,
        "wires": [
            [
                "6a5fb95dfbc0e312",
                "6543eff6b4d6ed0f",
                "55f6b4e73dbf2c6b",
                "2e07d6cf47fb7270",
                "ceda20d6c58c34aa",
                "a008d455cc6e1b52",
                "73b59217d8006fc6"
            ]
        ]
    },
    {
        "id": "6543eff6b4d6ed0f",
        "type": "ui_gauge",
        "z": "677a07349b91128e",
        "name": "",
        "group": "fdb6c31c.4f2818",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "compass",
        "title": "Azimuth",
        "label": "degrees",
        "format": "{{payload.azimuth}}",
        "min": 0,
        "max": "360",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1870,
        "y": 510,
        "wires": []
    },
    {
        "id": "55f6b4e73dbf2c6b",
        "type": "ui_text",
        "z": "677a07349b91128e",
        "group": "fdb6c31c.4f2818",
        "order": 9,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "PacketNum",
        "format": "{{msg.payload.packetnum}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1880,
        "y": 570,
        "wires": []
    },
    {
        "id": "2e07d6cf47fb7270",
        "type": "ui_text",
        "z": "677a07349b91128e",
        "group": "fdb6c31c.4f2818",
        "order": 10,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "WiFi RSSI",
        "format": "{{msg.payload.wifirssi}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1880,
        "y": 600,
        "wires": []
    },
    {
        "id": "ceda20d6c58c34aa",
        "type": "ui_text",
        "z": "677a07349b91128e",
        "group": "fdb6c31c.4f2818",
        "order": 11,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Magnet Str",
        "format": "{{msg.payload.magnetstr}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1880,
        "y": 630,
        "wires": []
    },
    {
        "id": "ca4d7f483c0c4bfd",
        "type": "switch",
        "z": "677a07349b91128e",
        "name": "",
        "property": "payload.azimuth",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "360",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "360",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 490,
        "wires": [
            [
                "a9c080f539721257"
            ],
            [
                "173d94cf8a9c0f3c"
            ]
        ],
        "outputLabels": [
            "=>360",
            "<360"
        ]
    },
    {
        "id": "a9c080f539721257",
        "type": "change",
        "z": "677a07349b91128e",
        "name": "SimAz=>360",
        "rules": [
            {
                "t": "set",
                "p": "payload.azimuth",
                "pt": "msg",
                "to": "$number(msg.payload.azimuth)-360",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 480,
        "wires": [
            [
                "173d94cf8a9c0f3c"
            ]
        ]
    },
    {
        "id": "a008d455cc6e1b52",
        "type": "ui_text",
        "z": "677a07349b91128e",
        "group": "fdb6c31c.4f2818",
        "order": 7,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Millis",
        "format": "{{msg.payload.millis}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1860,
        "y": 540,
        "wires": []
    },
    {
        "id": "a246f4e3014373e9",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "loop 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 30,
        "wires": []
    },
    {
        "id": "1b29ddc0865f048b",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 650,
        "wires": []
    },
    {
        "id": "ff5cdbf8986b7748",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "loop exited",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 190,
        "wires": []
    },
    {
        "id": "a0ac276193490bc6",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "loop 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 50,
        "wires": []
    },
    {
        "id": "605859ba1bc7b3f5",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "loop 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 50,
        "wires": []
    },
    {
        "id": "73b59217d8006fc6",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "loop 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1860,
        "y": 660,
        "wires": []
    },
    {
        "id": "63b503b6b5ad8073",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "loop 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 580,
        "wires": []
    },
    {
        "id": "251c1736c5b5b968",
        "type": "debug",
        "z": "677a07349b91128e",
        "name": "loop 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 610,
        "wires": []
    },
    {
        "id": "38268cdfacd20659",
        "type": "switch",
        "z": "677a07349b91128e",
        "name": "",
        "property": "payload.rotation",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 200,
        "wires": [
            [
                "ff5cdbf8986b7748"
            ],
            [
                "c538618d61fed226"
            ]
        ],
        "outputLabels": [
            "EXIT",
            "LOOP"
        ]
    },
    {
        "id": "3d8a5bfac65c8feb",
        "type": "change",
        "z": "677a07349b91128e",
        "name": "Load Variables",
        "rules": [
            {
                "t": "set",
                "p": "payload.starttime",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "payload.reportinterval",
                "pt": "msg",
                "to": "reportinterval",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "reportinterval",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload.stepval",
                "pt": "msg",
                "to": "stepval",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2160,
        "y": 80,
        "wires": [
            [
                "38268cdfacd20659"
            ]
        ]
    },
    {
        "id": "3662e9ff2425f1e8",
        "type": "switch",
        "z": "677a07349b91128e",
        "name": "First Loop?",
        "property": "payload.packetnum",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1970,
        "y": 90,
        "wires": [
            [
                "3d8a5bfac65c8feb"
            ],
            [
                "38268cdfacd20659"
            ]
        ],
        "outputLabels": [
            "FIRST LOOP",
            "CONTINUOUS"
        ]
    },
    {
        "id": "69e5eb34445d75cd",
        "type": "csv",
        "z": "677a07349b91128e",
        "name": "HealthPacketParser",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "millis,Loc,PacketNum,GroupID,UnitID,TempC,Voltage,RcvNoise,RcvRSSI,LastRSSI,LastNoise,GPS",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 1870,
        "y": 290,
        "wires": [
            []
        ]
    },
    {
        "id": "25efa0876d2e1cbd",
        "type": "csv",
        "z": "677a07349b91128e",
        "name": "RemoteBMPParser",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "bmpmillis,bmppacketnum,bmpwifirssi,temp-C,pressure-Pa,altitude-m",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1870,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "f96d1847f7a3b329",
        "type": "mqtt out",
        "z": "677a07349b91128e",
        "name": "SimTempPressMQTTout",
        "topic": "node/temppress",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9ad53e0e62e39b88",
        "x": 2100,
        "y": 240,
        "wires": []
    },
    {
        "id": "c9a71cfb6a615c27",
        "type": "mqtt out",
        "z": "677a07349b91128e",
        "name": "SimPacketMQTTout",
        "topic": "node/ponyexpress",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9ad53e0e62e39b88",
        "x": 2090,
        "y": 290,
        "wires": []
    },
    {
        "id": "7211b171770f60d8",
        "type": "inject",
        "z": "c172690cdc5067e9",
        "name": "Azimuth",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"millis\":1,\"azimuth\":1,\"turnrate\":1}",
        "payloadType": "json",
        "x": 140,
        "y": 570,
        "wires": [
            [
                "3577fb0aeaa7e1a9"
            ]
        ],
        "info": "Data Payload: CSV\r\nmillis = unsigned long integer\r\nazimuth = nnn.n float\r\ndegrees per sec = nn.n float"
    },
    {
        "id": "5d1bb0e904f80dfb",
        "type": "inject",
        "z": "c172690cdc5067e9",
        "name": "AzimuthDiagostic",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "MAGNET too weak,ff,00,00",
        "payloadType": "str",
        "x": 150,
        "y": 640,
        "wires": [
            [
                "cb6d2a52c96ff667"
            ]
        ],
        "info": "Diagnostic Payload: CSV\r\nmagnet status (string) OR magnet strength (integer)\r\nagc level ff\r\ncurrent hysteresis level 00\r\ncurrent offset value 00\r\n\r\nSample MAC 30AEA4070D64"
    },
    {
        "id": "9cf7b2a1ef1e877b",
        "type": "inject",
        "z": "c172690cdc5067e9",
        "name": "Trigger Az Reset",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 140,
        "y": 490,
        "wires": [
            [
                "dd7a0afcb245446c"
            ]
        ]
    },
    {
        "id": "3577fb0aeaa7e1a9",
        "type": "function",
        "z": "c172690cdc5067e9",
        "name": "Increment Azimuth Counters",
        "func": "var azimuthenabled = global.get('azimuthenabled') || 0;\nif (azimuthenabled == 1) {\n  var azimuthmillis = flow.get('azimuthstarttime') || 0;\n  var packetnum = flow.get('packetnum') || 0;\n  var wifirssi = flow.get('wifirssi') || 0;\n  var azimuthvalue = flow.get('azimuthvalue') || 0;\n  var magnetstr = flow.get('magnetstr') || 0;\n  azimuthmillis = Date.now() - azimuthmillis;\n  packetnum++;\n  wifirssi = -50;\n  azimuthvalue += 0.5;\n  if (azimuthvalue > 360)\n    azimuthvalue = 0;\n  magnetstr = 1000;\n  msg.payload.millis = azimuthmillis;\n  flow.set('azimuthmillis', azimuthmillis);\n  msg.payload.packetnum = packetnum;\n  flow.set('packetnum', packetnum);\n  msg.payload.wifirssi = wifirssi;\n  flow.set('wifirssi', wifirssi);\n  msg.payload.azimuth = azimuthvalue;\n  flow.set('azimuthvalue', azimuthvalue);\n  msg.payload.magnetstr = magnetstr;\n  flow.set('magnetstr', magnetstr);\n} else {\n  msg.payload = \"azimuth system disabled\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 570,
        "wires": [
            [
                "9eebac9e3aacd5ca"
            ]
        ]
    },
    {
        "id": "dd7a0afcb245446c",
        "type": "function",
        "z": "c172690cdc5067e9",
        "name": "Reset Azimuth Counters",
        "func": "flow.set('azimuthmillis',0);\nflow.set('azimuthvalue', 0);\nflow.set('turnratevalue', 3);\nflow.set('azimuthmillis',0);\nflow.set('azimuthstarttime', Date.now());\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 500,
        "wires": [
            [
                "a2edd0fc3bcf7def"
            ]
        ]
    },
    {
        "id": "2ab570e5d3fbc545",
        "type": "debug",
        "z": "c172690cdc5067e9",
        "name": "Azimuth Values",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 510,
        "wires": []
    },
    {
        "id": "1d1d8960def21791",
        "type": "function",
        "z": "c172690cdc5067e9",
        "name": "Toggle Azimuth System",
        "func": "var azimuthenabled = global.get('azimuthenabled');\nif (typeof azimuthenabled == \"undefined\")\n    azimuthenabled = 1;\nif (azimuthenabled == 1) {\n    //  block of code to be executed if the condition is true\n    azimuthenabled = 0;\n} else {\n    //  block of code to be executed if the condition is false\n    azimuthenabled = 1;\n}\nglobal.set('azimuthenabled', azimuthenabled);\nmsg.payload = azimuthenabled;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 420,
        "wires": [
            [
                "d08d6b5a13cf53fd",
                "baafa1c53441c96f",
                "9b256585263ce7b3"
            ]
        ]
    },
    {
        "id": "0985ae0f66cf1efe",
        "type": "inject",
        "z": "c172690cdc5067e9",
        "name": "Toggle Azimuth System",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "1d1d8960def21791"
            ]
        ]
    },
    {
        "id": "d08d6b5a13cf53fd",
        "type": "debug",
        "z": "c172690cdc5067e9",
        "name": "Azimuth Enabled?",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 420,
        "wires": []
    },
    {
        "id": "4e7d3a4fbd5712ea",
        "type": "debug",
        "z": "c172690cdc5067e9",
        "name": "Azimuth Diagnostics Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 640,
        "wires": []
    },
    {
        "id": "cb6d2a52c96ff667",
        "type": "function",
        "z": "c172690cdc5067e9",
        "name": "Broadcast Azimuth Diagnostics",
        "func": "var azimuthenabled = global.get('azimuthenabled');\nif (typeof azimuthenabled == \"undefined\")\n    azimuthenabled = 0;  // default to off\nif (azimuthenabled == 1) {\n    // do stuff\n    msg.payload = \"MAGNET too weak,ff,00,00\";\n} else {\n    msg.payload = \"azimuth system disabled,ff,00,00\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 640,
        "wires": [
            [
                "4e7d3a4fbd5712ea"
            ]
        ]
    },
    {
        "id": "9eebac9e3aacd5ca",
        "type": "switch",
        "z": "c172690cdc5067e9",
        "name": "ENABLED?",
        "property": "azimuthenabled",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 570,
        "wires": [
            [
                "2ab570e5d3fbc545",
                "44741562c470bf90",
                "b115648fc6b082ef"
            ],
            []
        ],
        "outputLabels": [
            "ENABLED",
            "DISABLED"
        ]
    },
    {
        "id": "a1cef140260dbd43",
        "type": "link in",
        "z": "c172690cdc5067e9",
        "name": "dashboard turntable button",
        "links": [
            "c96233b9feeb7059"
        ],
        "x": 255,
        "y": 460,
        "wires": [
            [
                "1d1d8960def21791"
            ]
        ]
    },
    {
        "id": "8c03bbbc15be731b",
        "type": "link in",
        "z": "c172690cdc5067e9",
        "name": "dashboard turntable button",
        "links": [
            "c96233b9feeb7059"
        ],
        "x": 465,
        "y": 610,
        "wires": [
            [
                "9eebac9e3aacd5ca",
                "cb6d2a52c96ff667"
            ]
        ]
    },
    {
        "id": "baafa1c53441c96f",
        "type": "link out",
        "z": "c172690cdc5067e9",
        "name": "simulated turntable toggle",
        "mode": "link",
        "links": [
            "78e952dcb5ab01b3"
        ],
        "x": 565,
        "y": 460,
        "wires": []
    },
    {
        "id": "264ea0ddd6eb7283",
        "type": "ui_switch",
        "z": "c172690cdc5067e9",
        "name": "Toggle SimTurntable",
        "label": "",
        "tooltip": "Toggle SimTurntable",
        "group": "fdb6c31c.4f2818",
        "order": 3,
        "width": 1,
        "height": 1,
        "passthru": false,
        "decouple": "true",
        "topic": "azimuthenabled",
        "topicType": "global",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 350,
        "y": 720,
        "wires": [
            [
                "c96233b9feeb7059"
            ]
        ]
    },
    {
        "id": "c96233b9feeb7059",
        "type": "link out",
        "z": "c172690cdc5067e9",
        "name": "turntable link out",
        "mode": "link",
        "links": [
            "26bea5cd4ccacbad",
            "a1cef140260dbd43",
            "8c03bbbc15be731b"
        ],
        "x": 495,
        "y": 700,
        "wires": []
    },
    {
        "id": "78e952dcb5ab01b3",
        "type": "link in",
        "z": "c172690cdc5067e9",
        "name": "link in 1",
        "links": [
            "baafa1c53441c96f"
        ],
        "x": 195,
        "y": 700,
        "wires": [
            [
                "264ea0ddd6eb7283",
                "db775ec8f8647417"
            ]
        ]
    },
    {
        "id": "b04433411112f929",
        "type": "ui_button",
        "z": "c172690cdc5067e9",
        "name": "",
        "group": "fdb6c31c.4f2818",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Zero SimAzimuth",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "1",
        "payloadType": "str",
        "topic": "payload",
        "topicType": "msg",
        "x": 130,
        "y": 530,
        "wires": [
            [
                "dd7a0afcb245446c"
            ]
        ]
    },
    {
        "id": "a2edd0fc3bcf7def",
        "type": "switch",
        "z": "c172690cdc5067e9",
        "name": "ENABLED?",
        "property": "azimuthenabled",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 500,
        "wires": [
            [
                "2ab570e5d3fbc545"
            ],
            []
        ],
        "outputLabels": [
            "ENABLED",
            "DISABLED"
        ]
    },
    {
        "id": "db775ec8f8647417",
        "type": "ui_button_state",
        "z": "c172690cdc5067e9",
        "group": "fdb6c31c.4f2818",
        "name": "SimTurntable Button",
        "order": 2,
        "onClass": "",
        "offClass": "",
        "width": 5,
        "height": 1,
        "options": [
            {
                "label": "SimTurntable",
                "value": "1",
                "onColor": "#25db00",
                "offColor": "#ff0000"
            }
        ],
        "x": 350,
        "y": 680,
        "wires": [
            [
                "c96233b9feeb7059"
            ],
            [
                "c96233b9feeb7059"
            ]
        ]
    },
    {
        "id": "44741562c470bf90",
        "type": "ui_gauge",
        "z": "c172690cdc5067e9",
        "name": "Azimuth",
        "group": "fdb6c31c.4f2818",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "compass",
        "title": "azimuth",
        "label": "degrees",
        "format": "{{msg.payload.azimuth}}",
        "min": 0,
        "max": "360",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 850,
        "y": 550,
        "wires": []
    },
    {
        "id": "d901f5b4c0d300c7",
        "type": "mqtt out",
        "z": "c172690cdc5067e9",
        "name": "",
        "topic": "node/azimuth",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9ad53e0e62e39b88",
        "x": 1000,
        "y": 590,
        "wires": []
    },
    {
        "id": "b115648fc6b082ef",
        "type": "csv",
        "z": "c172690cdc5067e9",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "millis,packetnum,wifirssi,azimuth,magnetstr",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 820,
        "y": 590,
        "wires": [
            [
                "d901f5b4c0d300c7",
                "bd61b7982e75041f"
            ]
        ]
    },
    {
        "id": "b05250f2bea9cb84",
        "type": "inject",
        "z": "c172690cdc5067e9",
        "name": "Packet V1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "H,73,8,4,28.6,3.312,-191,-42,-29,-129,0",
        "payloadType": "str",
        "x": 180,
        "y": 1010,
        "wires": [
            [
                "8c5bbdc964181636"
            ]
        ],
        "info": "H,9,8,4,20.3,3.041,-31,-110,-118,-33,0\r\nH,73,8,4,28.6,3.312,-191,-42,-29,-129,0"
    },
    {
        "id": "0ce5095a0280410a",
        "type": "inject",
        "z": "c172690cdc5067e9",
        "name": "Packet V2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "H,2FSK,4ED836B2,1F7173A8,RESP,3557,12,7,34.1,3.255,-22,-89,2017,4,24,17,29,23,38.3304,-77.02568",
        "payloadType": "str",
        "x": 130,
        "y": 1280,
        "wires": [
            [
                "9a5acf9ea119d901"
            ]
        ]
    },
    {
        "id": "63e9764f3b431686",
        "type": "debug",
        "z": "c172690cdc5067e9",
        "name": "PacketV1 Plain Ouput",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 880,
        "wires": []
    },
    {
        "id": "b73b19af3616f58c",
        "type": "function",
        "z": "c172690cdc5067e9",
        "name": "Toggle Beacon",
        "func": "var beacon1enabled = flow.get('beacon1enabled');\nif (typeof beacon1enabled == \"undefined\")\n    beacon1enabled = 1;\nif (beacon1enabled == 1) {\n    //  block of code to be executed if the condition is true\n    beacon1enabled = 0;\n} else {\n    //  block of code to be executed if the condition is false\n    beacon1enabled = 1;\n    var beacon1packet = flow.get('beacon1packet') || 0;\n    flow.set(\"beacon1packet\", 0);\n}\nflow.set('beacon1enabled', beacon1enabled);\nmsg.payload = beacon1enabled;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 920,
        "wires": [
            [
                "4aed472e26e29cad",
                "a707cf478406d996",
                "655bd392e4944437",
                "d9ea9e27262d9bcb"
            ]
        ]
    },
    {
        "id": "01853f70a4613f8f",
        "type": "inject",
        "z": "c172690cdc5067e9",
        "name": "Toggle Beacon",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 150,
        "y": 920,
        "wires": [
            [
                "b73b19af3616f58c"
            ]
        ]
    },
    {
        "id": "4aed472e26e29cad",
        "type": "debug",
        "z": "c172690cdc5067e9",
        "name": "Beacon Enabled?",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 910,
        "wires": []
    },
    {
        "id": "4d768c4aebc8eb44",
        "type": "inject",
        "z": "c172690cdc5067e9",
        "name": "Packet V1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Loc\":\"H\",\"PacketNum\":73,\"GroupID\":8,\"UnitID\":4,\"TempC\":28.6,\"Voltage\":3.312,\"RcvNoise\":-191,\"RcvRSSI\":-42,\"LastRSSI\":-29,\"LastNoise\":-129,\"GPS\":0}",
        "payloadType": "json",
        "x": 140,
        "y": 1220,
        "wires": [
            [
                "8a47fe263e42b087"
            ]
        ]
    },
    {
        "id": "8a47fe263e42b087",
        "type": "function",
        "z": "c172690cdc5067e9",
        "name": "Update Beacon 1",
        "func": "var beacon1enabled = flow.get('beacon1enabled') || 0;\nif (beacon1enabled == 1) {\n    // millis,PacketNum,WiFiRSSI,\n    // Loc,4300PacketNum,GroupID,UnitID,\n    // TempC,Voltage,RcvNoise,RcvRSSI,LastRSSI,LastNoise,GPS\n\n    var packetfwderstarttime = flow.get('beacon1starttime') || 0;\n    var packetfwdermillis = Date.now() - packetfwderstarttime;\n    var ponyexpresspacket = flow.get('ponyexpresspacket') || 0;\n    var wifirssi = -50;\n    var beacon1packet = flow.get('beacon1packet') || 0;\n    var temperaturevalue = flow.get('temperaturevalue') || 0;\n    var voltagevalue = flow.get('voltagevalue') || 0;\n    var rcvnoisevalue = flow.get('rcvnoisevalue') || 0;\n    var rcvrssievalue = flow.get('rcvrssievalue') || 0;\n    var lastrssivalue = flow.get('lastrssivalue') || 0;\n    var lastnoisevalue = flow.get('lastnoisevalue') || 0;\n\n    ponyexpresspacket += 1;\n    beacon1packet += 1;\n    temperaturevalue = 20 + (Math.round(Math.random() * 30)) / 10;\n    voltagevalue = 3 + (Math.round(Math.random() * 1000)) / 1000;\n    rcvnoisevalue = -27 - (Math.round(Math.random() * 9));\n    rcvrssievalue = -107 - (Math.round(Math.random() * 16));\n    lastnoisevalue = -30 - (Math.round(Math.random() * 7));\n    lastrssivalue = -118 - (Math.round(Math.random() * 12));\n\n    msg.payload.millis = packetfwdermillis;\n    flow.set(\"millis\", packetfwdermillis);\n    msg.payload.PacketNum = ponyexpresspacket;\n    flow.set(\"ponyexpresspacket\", ponyexpresspacket);\n    msg.payload.WiFiRSSI = wifirssi;    // no flow variable\n    msg.payload.Loc = \"H\";    // no flow variable\n    msg.payload.DataPacketNum = beacon1packet;  // can't call it 4300PacketNum\n    flow.set(\"beacon1packet\", beacon1packet);\n    msg.payload.GroupID = 8;    // no flow variable\n    msg.payload.UnitID = 4;    // no flow variable\n    msg.payload.TempC = temperaturevalue;\n    flow.set(\"temperaturevalue\", temperaturevalue);\n    msg.payload.Voltage = voltagevalue;\n    flow.set(\"voltagevalue\", voltagevalue);\n    msg.payload.RcvNoise = rcvnoisevalue;\n    flow.set(\"rcvnoisevalue\", rcvnoisevalue);\n    msg.payload.RcvRSSI = rcvrssievalue;\n    flow.set(\"rcvrssievalue\", rcvrssievalue);\n    msg.payload.LastRSSI = lastrssivalue;\n    flow.set(\"lastrssivalue\", lastrssivalue);\n    msg.payload.LastNoise = lastnoisevalue;\n    flow.set(\"lastnoisevalue\", lastnoisevalue);\n    msg.payload.GPS = 0;\n} else {\n    msg.payload = \"beacon 1 system disabled\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1220,
        "wires": [
            [
                "3d63aa3301001a6c",
                "93488b0534c58bc0"
            ]
        ]
    },
    {
        "id": "4e02d4c05ddf29c6",
        "type": "debug",
        "z": "c172690cdc5067e9",
        "name": "Packet V1 Randomized Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1240,
        "wires": []
    },
    {
        "id": "e0b2deaa7c771218",
        "type": "debug",
        "z": "c172690cdc5067e9",
        "name": "PacketV2 Plain Ouput",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1330,
        "wires": []
    },
    {
        "id": "9a5acf9ea119d901",
        "type": "csv",
        "z": "c172690cdc5067e9",
        "name": "CSVtoJSON",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "Loc,PacketNum,GroupID,UnitID,TempC,Voltage,RcvNoise,RcvRSSI,LastRSSI,LastNoise,GPS",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 350,
        "y": 1280,
        "wires": [
            [
                "b93481bea61e1856"
            ]
        ]
    },
    {
        "id": "72d35fc4b13559af",
        "type": "mqtt out",
        "z": "c172690cdc5067e9",
        "name": "PacketV1 MQTT",
        "topic": "node/ponyexpress",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9ad53e0e62e39b88",
        "x": 970,
        "y": 920,
        "wires": []
    },
    {
        "id": "3e3d151a41a2941b",
        "type": "mqtt out",
        "z": "c172690cdc5067e9",
        "name": "PacketV2 MQTT",
        "topic": "sensor/30AEA4082DC2/report",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9ad53e0e62e39b88",
        "x": 770,
        "y": 1380,
        "wires": []
    },
    {
        "id": "8d7fce91bf3c97a4",
        "type": "csv",
        "z": "c172690cdc5067e9",
        "name": "JSONtoCSV",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "millis,PacketNum,WiFiRSSI,Loc,DataPacketNum,GroupID,UnitID,TempC,Voltage,RcvNoise,RcvRSSI,LastRSSI,LastNoise,GPS",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 760,
        "y": 1200,
        "wires": [
            [
                "72d35fc4b13559af",
                "2a8b823318ce95a5"
            ]
        ]
    },
    {
        "id": "2a8b823318ce95a5",
        "type": "debug",
        "z": "c172690cdc5067e9",
        "name": "Packet V1 MQTT Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1190,
        "wires": []
    },
    {
        "id": "e40bf808286e602e",
        "type": "comment",
        "z": "c172690cdc5067e9",
        "name": "KNOWN BUG",
        "info": "Known bug in the randomized voltage.\n\nSometimes causes outputs with over \n10 decimal places of output VS x.xxx\n\nSeems to be something with Javascript's \nhandling of the Math.Round function. \n\nDOES NOT have the same problem with the \nother randomized values. So...wtf?",
        "x": 810,
        "y": 1280,
        "wires": []
    },
    {
        "id": "b93481bea61e1856",
        "type": "switch",
        "z": "c172690cdc5067e9",
        "name": "ENABLED?",
        "property": "beacon1enabled",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 560,
        "y": 1280,
        "wires": [
            [
                "e0b2deaa7c771218",
                "3e3d151a41a2941b"
            ],
            []
        ],
        "outputLabels": [
            "ENABLED",
            "DISABLED"
        ]
    },
    {
        "id": "3d63aa3301001a6c",
        "type": "switch",
        "z": "c172690cdc5067e9",
        "name": "ENABLED?",
        "property": "beacon1enabled",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 560,
        "y": 1220,
        "wires": [
            [
                "8d7fce91bf3c97a4",
                "4e02d4c05ddf29c6"
            ],
            []
        ],
        "outputLabels": [
            "ENABLED",
            "DISABLED"
        ]
    },
    {
        "id": "8c5bbdc964181636",
        "type": "switch",
        "z": "c172690cdc5067e9",
        "name": "ENABLED?",
        "property": "beacon1enabled",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 1010,
        "wires": [
            [
                "63e9764f3b431686",
                "72d35fc4b13559af"
            ],
            []
        ],
        "outputLabels": [
            "ENABLED",
            "DISABLED"
        ]
    },
    {
        "id": "61c77f2665b44dc7",
        "type": "ui_button",
        "z": "c172690cdc5067e9",
        "name": "Reset Packet Count",
        "group": "5cfe21d2.307938",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset Packet Count",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "1",
        "payloadType": "str",
        "topic": "payload",
        "topicType": "msg",
        "x": 150,
        "y": 1380,
        "wires": [
            [
                "b5be710114ac4676"
            ]
        ]
    },
    {
        "id": "b5be710114ac4676",
        "type": "function",
        "z": "c172690cdc5067e9",
        "name": "Reset packet count variable",
        "func": "var beacon1packet = flow.get('beacon1packet') || 0;\nvar beacon1starttime = flow.get('beacon1starttime') || 0;\nvar beacon1millis = flow.get('beacon1millis') || 0;\nflow.set(\"beacon1packet\", 0);\nflow.set(\"beacon1starttime\",Date.now());\nflow.set(\"beacon1millis\", 0);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "a707cf478406d996",
        "type": "ui_button_state",
        "z": "c172690cdc5067e9",
        "group": "5cfe21d2.307938",
        "name": "Toggle Beacon",
        "order": 1,
        "onClass": "",
        "offClass": "",
        "width": 5,
        "height": 1,
        "options": [
            {
                "label": "SimBeacon",
                "value": "1",
                "onColor": "#25db00",
                "offColor": "#ff0000"
            }
        ],
        "x": 380,
        "y": 970,
        "wires": [
            [
                "b73b19af3616f58c"
            ],
            [
                "b73b19af3616f58c"
            ]
        ]
    },
    {
        "id": "655bd392e4944437",
        "type": "ui_switch",
        "z": "c172690cdc5067e9",
        "name": "Toggle SimBeacon",
        "label": "",
        "tooltip": "toggle simbeacon",
        "group": "5cfe21d2.307938",
        "order": 2,
        "width": 1,
        "height": 1,
        "passthru": false,
        "decouple": "true",
        "topic": "beacon1enabled",
        "topicType": "global",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 380,
        "y": 870,
        "wires": [
            [
                "b73b19af3616f58c"
            ]
        ]
    },
    {
        "id": "bd61b7982e75041f",
        "type": "debug",
        "z": "c172690cdc5067e9",
        "name": "Azimuth Values",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 550,
        "wires": []
    },
    {
        "id": "e0463f9147b9cf14",
        "type": "comment",
        "z": "c172690cdc5067e9",
        "name": "millis,PacketNum,WiFiRSSI,Loc,4300PacketNum,GroupID,UnitID,TempC,Voltage,RcvNoise,RcvRSSI,LastRSSI,LastNoise,GPS",
        "info": "",
        "x": 770,
        "y": 1070,
        "wires": []
    },
    {
        "id": "93488b0534c58bc0",
        "type": "debug",
        "z": "c172690cdc5067e9",
        "name": "Packet V1 Randomized Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1160,
        "wires": []
    },
    {
        "id": "9b256585263ce7b3",
        "type": "switch",
        "z": "c172690cdc5067e9",
        "name": "SimAzimuth",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 350,
        "wires": [
            [
                "d539993eab864534"
            ],
            [
                "f2ce2be95bd5f01e"
            ]
        ],
        "outputLabels": [
            "on",
            "off"
        ]
    },
    {
        "id": "d539993eab864534",
        "type": "change",
        "z": "c172690cdc5067e9",
        "name": "On color",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#00FF00",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 330,
        "wires": [
            [
                "1a1e785fbdfdbfb4"
            ]
        ]
    },
    {
        "id": "f2ce2be95bd5f01e",
        "type": "change",
        "z": "c172690cdc5067e9",
        "name": "Off color",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#FF0000",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 370,
        "wires": [
            [
                "1a1e785fbdfdbfb4"
            ]
        ]
    },
    {
        "id": "1a1e785fbdfdbfb4",
        "type": "ui_ui-light",
        "z": "c172690cdc5067e9",
        "action": "set",
        "actionType": "str",
        "write": "payload",
        "writeType": "msg",
        "name": "SimAzimuthIndicator",
        "group": "cb3750f073b2c511",
        "order": 21,
        "width": 1,
        "height": 1,
        "x": 1010,
        "y": 350,
        "wires": [
            [
                "eb1106f58d6d3a5d"
            ]
        ]
    },
    {
        "id": "eb1106f58d6d3a5d",
        "type": "ui_text",
        "z": "c172690cdc5067e9",
        "group": "cb3750f073b2c511",
        "order": 16,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "SimAzimuth",
        "format": "",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1210,
        "y": 350,
        "wires": []
    },
    {
        "id": "d9ea9e27262d9bcb",
        "type": "switch",
        "z": "c172690cdc5067e9",
        "name": "SimBeacon",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 810,
        "wires": [
            [
                "84e0c1b5913e65e2"
            ],
            [
                "653fc7219b66e9e2"
            ]
        ],
        "outputLabels": [
            "on",
            "off"
        ]
    },
    {
        "id": "84e0c1b5913e65e2",
        "type": "change",
        "z": "c172690cdc5067e9",
        "name": "On color",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#00FF00",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 790,
        "wires": [
            [
                "58247a77d4c41bc0"
            ]
        ]
    },
    {
        "id": "653fc7219b66e9e2",
        "type": "change",
        "z": "c172690cdc5067e9",
        "name": "Off color",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "#FF0000",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 830,
        "wires": [
            [
                "58247a77d4c41bc0"
            ]
        ]
    },
    {
        "id": "58247a77d4c41bc0",
        "type": "ui_ui-light",
        "z": "c172690cdc5067e9",
        "action": "set",
        "actionType": "str",
        "write": "payload",
        "writeType": "msg",
        "name": "SimBeaconIndicator",
        "group": "cb3750f073b2c511",
        "order": 19,
        "width": 1,
        "height": 1,
        "x": 980,
        "y": 810,
        "wires": [
            [
                "f9209a0d1705a87a"
            ]
        ]
    },
    {
        "id": "f9209a0d1705a87a",
        "type": "ui_text",
        "z": "c172690cdc5067e9",
        "group": "cb3750f073b2c511",
        "order": 15,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "SimBeacon",
        "format": "",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1180,
        "y": 810,
        "wires": []
    },
    {
        "id": "2d9803f6fd2764ec",
        "type": "link in",
        "z": "b1f062ca9a341f70",
        "name": "azimuth input",
        "links": [
            "3dd2c0780b62683e"
        ],
        "x": 195,
        "y": 160,
        "wires": [
            [
                "34654d72e5143150",
                "172216681ff43bdc",
                "99126dcf0c6ac789",
                "8cc83626fb325a4c",
                "334ca6a417a58612"
            ]
        ]
    },
    {
        "id": "68ee3d52e26b5957",
        "type": "link in",
        "z": "b1f062ca9a341f70",
        "name": "link in (synchronize)",
        "links": [
            "fc6f72597843f604"
        ],
        "x": 255,
        "y": 520,
        "wires": [
            [
                "d2ed46aa0d0f19f2"
            ]
        ]
    },
    {
        "id": "34654d72e5143150",
        "type": "debug",
        "z": "b1f062ca9a341f70",
        "name": "Parsed Azimuth Packet",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 60,
        "wires": []
    },
    {
        "id": "d2ed46aa0d0f19f2",
        "type": "debug",
        "z": "b1f062ca9a341f70",
        "name": "Parsed Data Packet",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 520,
        "wires": []
    },
    {
        "id": "9a58a905b45ccef7",
        "type": "comment",
        "z": "b1f062ca9a341f70",
        "name": "NOT WORKING/TODO",
        "info": "analytics of:\n  - packet num -> missed -> RBE\n  - millis -> look for out of order/reboots/excessive jumps\n  - azimuth glitches\n\nadd calculated RPM / degrees per second\n  - error checking indicator for azimuth outside expected location for given time\n\n",
        "x": 160,
        "y": 30,
        "wires": []
    },
    {
        "id": "172216681ff43bdc",
        "type": "rbe",
        "z": "b1f062ca9a341f70",
        "name": "Packet Num Error",
        "func": "deadbandEq",
        "gap": "2",
        "start": "",
        "inout": "in",
        "septopics": true,
        "property": "payload.packetnum",
        "topi": "topic",
        "x": 370,
        "y": 100,
        "wires": [
            [
                "5ef71e1471a08cee"
            ]
        ]
    },
    {
        "id": "5ef71e1471a08cee",
        "type": "counter",
        "z": "b1f062ca9a341f70",
        "name": "Az Packet Error Cntr",
        "x": 610,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "99126dcf0c6ac789",
        "type": "rbe",
        "z": "b1f062ca9a341f70",
        "name": "Azimuth Error",
        "func": "deadbandEq",
        "gap": "1%",
        "start": "",
        "inout": "in",
        "septopics": true,
        "property": "payload.azimuth",
        "topi": "topic",
        "x": 360,
        "y": 160,
        "wires": [
            [
                "7dccc99254d6ad18"
            ]
        ]
    },
    {
        "id": "7dccc99254d6ad18",
        "type": "counter",
        "z": "b1f062ca9a341f70",
        "name": "Az Error Cntr",
        "x": 580,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "8cc83626fb325a4c",
        "type": "rbe",
        "z": "b1f062ca9a341f70",
        "name": "MagStr Error",
        "func": "deadbandEq",
        "gap": "10%",
        "start": "",
        "inout": "in",
        "septopics": true,
        "property": "payload.magnetstr",
        "topi": "topic",
        "x": 350,
        "y": 210,
        "wires": [
            [
                "614a1b8f77c9d2e7"
            ]
        ]
    },
    {
        "id": "614a1b8f77c9d2e7",
        "type": "counter",
        "z": "b1f062ca9a341f70",
        "name": "Mag Str Error Cntr",
        "x": 600,
        "y": 210,
        "wires": [
            []
        ]
    },
    {
        "id": "c6350675e055a38c",
        "type": "counter",
        "z": "b1f062ca9a341f70",
        "name": "Az RSSI Error Cntr",
        "x": 600,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "334ca6a417a58612",
        "type": "rbe",
        "z": "b1f062ca9a341f70",
        "name": "Az RSSI Error",
        "func": "deadbandEq",
        "gap": "10%",
        "start": "",
        "inout": "in",
        "septopics": true,
        "property": "payload.wifirssi",
        "topi": "topic",
        "x": 360,
        "y": 260,
        "wires": [
            [
                "c6350675e055a38c"
            ]
        ]
    },
    {
        "id": "d79ed0345c61d481",
        "type": "link in",
        "z": "b1f062ca9a341f70",
        "name": "Packet Analysis",
        "links": [
            "db7703d124f6ea92"
        ],
        "x": 255,
        "y": 430,
        "wires": [
            []
        ]
    },
    {
        "id": "55ac8fe0f7cd7c4d",
        "type": "debug",
        "z": "f1061a310f527162",
        "name": "Parsed Temp Press",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 50,
        "wires": []
    },
    {
        "id": "97b0378697825bb1",
        "type": "ui_text",
        "z": "f1061a310f527162",
        "group": "3ae866301af1c330",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Uptime (s)",
        "format": "{{msg.payload.bmpmillis/1000}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 370,
        "y": 80,
        "wires": []
    },
    {
        "id": "7748b01a8816a839",
        "type": "ui_text",
        "z": "f1061a310f527162",
        "group": "3ae866301af1c330",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Packet Num",
        "format": "{{msg.payload.bmppacketnum}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 370,
        "y": 110,
        "wires": []
    },
    {
        "id": "2a98b42c24eaa23b",
        "type": "ui_text",
        "z": "f1061a310f527162",
        "group": "3ae866301af1c330",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "WiFi Str (dBm)",
        "format": "{{msg.payload.bmpwifirssi}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 380,
        "y": 140,
        "wires": []
    },
    {
        "id": "42b8d010ed1e4f38",
        "type": "ui_text",
        "z": "f1061a310f527162",
        "group": "3ae866301af1c330",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temp (C)",
        "format": "{{msg.payload[\"temp-C\"]}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 360,
        "y": 170,
        "wires": []
    },
    {
        "id": "4fe0c8495d66886e",
        "type": "ui_text",
        "z": "f1061a310f527162",
        "group": "3ae866301af1c330",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Pressure (hPa)",
        "format": "{{msg.payload[\"pressure-Pa\"]/100}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 380,
        "y": 200,
        "wires": []
    },
    {
        "id": "5c3f1a615768eb9b",
        "type": "ui_text",
        "z": "f1061a310f527162",
        "group": "3ae866301af1c330",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Altitude (m)",
        "format": "{{msg.payload[\"altitude-m\"]}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 370,
        "y": 230,
        "wires": []
    },
    {
        "id": "e018074adc131bcb",
        "type": "ui_text",
        "z": "f1061a310f527162",
        "group": "3ae866301af1c330",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Rel Altitude (m)",
        "format": "{{msg.payload.relaltitude}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 540,
        "y": 260,
        "wires": []
    },
    {
        "id": "f77882cabeaea0f3",
        "type": "change",
        "z": "f1061a310f527162",
        "d": true,
        "name": "Calc Rel Alt",
        "rules": [
            {
                "t": "set",
                "p": "payload.relaltitude",
                "pt": "msg",
                "to": "payload[\"altitude-m\"]-21.2",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.relaltitude",
                "pt": "msg",
                "to": "$round(payload.relaltitude, 2)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 260,
        "wires": [
            [
                "e018074adc131bcb"
            ]
        ]
    },
    {
        "id": "6347590b8df2896a",
        "type": "link in",
        "z": "f1061a310f527162",
        "name": "RemoteBMPDataProcessing",
        "links": [
            "199e5b06ee1b16dc"
        ],
        "x": 155,
        "y": 160,
        "wires": [
            [
                "55ac8fe0f7cd7c4d",
                "97b0378697825bb1",
                "7748b01a8816a839",
                "2a98b42c24eaa23b",
                "42b8d010ed1e4f38",
                "4fe0c8495d66886e",
                "5c3f1a615768eb9b",
                "f77882cabeaea0f3"
            ]
        ]
    }
]