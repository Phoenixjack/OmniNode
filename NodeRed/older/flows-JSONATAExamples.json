[
    {
        "id": "48d8e346d91d5802",
        "type": "tab",
        "label": "JSONata Functions",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "31710161af1f85fc",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata Aggregation functions",
        "style": {
            "label": true
        },
        "nodes": [
            "b6f144760c8c2ac0",
            "4b3e82218503d28a",
            "a2ed76e51d9d45d4",
            "124bdd42fad50ccc",
            "f00555d99d713808",
            "95b7b4d1463f8ba2",
            "76ab1b459ad7557d",
            "133de034e18f2e08",
            "9895cc964f49ae00",
            "f06124c947a5414c",
            "27ae951f78f80e9f",
            "64bf6cca123277d6"
        ],
        "x": 634,
        "y": 59,
        "w": 612,
        "h": 202
    },
    {
        "id": "3f2375f314164a1d",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata Numeric functions",
        "style": {
            "label": true
        },
        "nodes": [
            "8daced1e49b8e444",
            "d7445651ceb1befb",
            "0c47d4e5f41185ff",
            "2915de67bb436aec",
            "f816ab6ce130373d",
            "40cd56ab50d99edd",
            "3c64a396557c2169",
            "42412dbf82022ed6",
            "be9e933624cfc9b9",
            "506c5164d419415a",
            "bd4e27a24441e29a",
            "78ed3050cffbee5f",
            "a092319ec2068dcb",
            "0efc16b8ad0a4a06",
            "4fa5326a67572fba",
            "3d892df51ef07041",
            "d8cc71bf7a1cef6e",
            "a9f54d592da16259",
            "c211cee8f26830fb",
            "3f468cb3641e5db2",
            "9129250d27e12100",
            "35468424f2a1649a",
            "1a901ddcf487d332",
            "6deec1748014b6c6",
            "6a945003fb6a19fe",
            "354dc0515a3a8c0c",
            "19592f83ca197954",
            "e96d13cd9c516780",
            "1caa81e91f5593bd",
            "6536ce65bd593f2a",
            "5b35e2d318a492ab",
            "fd6e660561b21348",
            "ced7657e6cdca47c",
            "c277731a9bcd97b7",
            "9e58844dd14dc104",
            "92e8c4c7ae1a5c67"
        ],
        "x": 14,
        "y": 939,
        "w": 612,
        "h": 522
    },
    {
        "id": "5858953d941e2128",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata String functions",
        "style": {
            "label": true
        },
        "nodes": [
            "0f7cc1cbf53be959",
            "89305a8bf17ce1f4",
            "7b9707e1fdb83b97",
            "33eb18d77c98742f",
            "2b10b22d75bb2d81",
            "97b05ca3aea965ff",
            "574029ce9d53b3e7",
            "0f406e4fb437596e",
            "4552c8db8906bd64",
            "5fc0599c484f2382",
            "61eacfc6b05617af",
            "d7b47f2422eb5d41",
            "d12bb701c54a51b7",
            "25da3fbb5cb8a783",
            "bc87e57a88fd8fc9",
            "79f3a0a75f765aa5",
            "5263c4f5189e5eaf",
            "f03d559a1b4ecf37",
            "f831e7e54c6df875",
            "efb7f178ed1f6b26",
            "03cebea42a679530",
            "27aa670fc69b45b7",
            "5f0de1517502ca39",
            "36e9a2f036e7334b",
            "015750733b48bc64",
            "588e07e3dad2b766",
            "bf6925f53b4c8570",
            "dd525c51d46d0aa4",
            "4bb01a6c30ef2a92",
            "a804fb7a5d6a7527",
            "71db1766621ddda7",
            "0de1a0ecc422ca10",
            "7d39f8ccd7f440b3",
            "fac1cb69ad143cb4",
            "89ef93936b21b4ad",
            "6df09440e2cbde59",
            "641205e3cba124d0",
            "ce0842f09f2f02d2",
            "d3b13f915c0880b6",
            "ca02b214332083a0",
            "8badc54fd86df382",
            "8e676426b4739885",
            "20f4bdaa2161ecf0",
            "69862f023088276f",
            "1bbcc63008b599b9",
            "56c89da93c4f8598",
            "5f8e98fada3e3b8c",
            "77a88f7b8594f51e",
            "6e3b43a0f645b2f6",
            "ea1117ddd2426699",
            "ada30cde655edd22",
            "e67d10e3347c9ea9",
            "0fadee83063f1cdd",
            "1ae55c36c954c2d7",
            "a90c1da2e38eb6be",
            "146b75b897bffc80",
            "638f4c5e1eb3ad2d",
            "960107f6763ef6cd",
            "1eda0eb06ded6d9c",
            "97dfea39009105fc",
            "87b33a10e6f432eb",
            "b125cb399a064b5a",
            "637455e25b5e5d1d"
        ],
        "x": 14,
        "y": 39,
        "w": 612,
        "h": 882
    },
    {
        "id": "d2e1279b5fd4575d",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata Boolean functions",
        "style": {
            "label": true
        },
        "nodes": [
            "38427db96b1421b0",
            "75c0bd910867dc25",
            "abbe1949232a4942",
            "7f8b843350a69ff0",
            "fbb036fc259bc29a",
            "ab2f2d7a863331b5",
            "8b5fca3b78b019b4",
            "5d9f7b44f2096d0a",
            "dffaf66f56b66b7d"
        ],
        "x": 634,
        "y": 279,
        "w": 612,
        "h": 162
    },
    {
        "id": "39b2b5c54232ba3c",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata Array functions",
        "style": {
            "label": true
        },
        "nodes": [
            "1e76e97f96460298",
            "8c521273427ab262",
            "31477f70de39ad61",
            "e49f68a0f36889d6",
            "d32c6167e83986e2",
            "78aca9737c826606",
            "54d5f9cd3c6bf6c0",
            "2234f7ae697a3770",
            "7db3d73f20c5a22a",
            "9a29918bf56cf115",
            "c7c0d71d5016220c",
            "9d70686ae7347700",
            "75d52d47a71233cd",
            "f11869a6d78d66ab",
            "bc71d90bd9775450",
            "99ea95ba592024e3",
            "f3a96c864130a773",
            "b19f7f7a070d3036",
            "96ddc88c25af6454",
            "48342adfa3e091c2",
            "702df9610cf8c931"
        ],
        "x": 634,
        "y": 459,
        "w": 612,
        "h": 322
    },
    {
        "id": "3bde9eecc5de0d0d",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata Date/Time functions",
        "style": {
            "label": true
        },
        "nodes": [
            "a423604384b85a61",
            "b649c9e548e52ea6",
            "e1989374d8a86617",
            "7e4537ec98fc0f86",
            "b571e34201ce4301",
            "e18a31afb52a37ad",
            "0850c6f82df14da0",
            "f3564e25cdf6ad3a",
            "5a72be02a7063415",
            "8a6b6c123b69c249",
            "7934417554ab4fca",
            "5743a08375473c86"
        ],
        "x": 634,
        "y": 1259,
        "w": 612,
        "h": 202
    },
    {
        "id": "a5b3f3f40f8cdfee",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata Higher order functions",
        "style": {
            "label": true
        },
        "nodes": [
            "bb7a943e8d73a2ee",
            "cb19fabf590bf8a1",
            "2f81648ac0a0dea6",
            "fa2e2c09eaccd887",
            "0a4e2fdb7c155b17",
            "cf842de86d95cf61",
            "0d3fa93f582f57cf",
            "078f7f9446b4018c",
            "6e4a6618668b68c7",
            "3b70c2ca565463f0",
            "e90f56bfc1a1f01a",
            "291158397d7b6794"
        ],
        "x": 1254,
        "y": 59,
        "w": 612,
        "h": 202
    },
    {
        "id": "c864efbb6ecdebca",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata Object functions",
        "style": {
            "label": true
        },
        "nodes": [
            "154385cc7d38b19f",
            "0f2d1fb515a787ac",
            "6878dca73600cf5f",
            "b18ce2580dbec5df",
            "d85e15ea98982fb9",
            "88d530abb1a21311",
            "db06b0dde05b4382",
            "98ca6d42e968fa07",
            "f60f4884133da1db",
            "07ccc749b4918554",
            "77e37e87b4f128b7",
            "0a7c053c61e212d5",
            "b70fb99db7d136f1",
            "bc4b6a167433f525",
            "075d773fe41dce15",
            "5a17f977f1edf18c",
            "34523c9d6f3be4d5",
            "a5735d1081eb0e76",
            "d0675dd556e8ccd3",
            "fcee703f7f0dad09",
            "9df1aa0f7557ef67",
            "fd67870234c311fc",
            "c1aba1f2fb4642e5",
            "91e67fc371abd56f",
            "d76d1e54150cd3b8",
            "56ef7e70a1f1e4ba",
            "ff7236162a78dcae",
            "ac14d99250bbcd5d"
        ],
        "x": 634,
        "y": 799,
        "w": 612,
        "h": 442
    },
    {
        "id": "b6f144760c8c2ac0",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 100,
        "wires": [
            [
                "a2ed76e51d9d45d4"
            ]
        ]
    },
    {
        "id": "4b3e82218503d28a",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 100,
        "wires": []
    },
    {
        "id": "a2ed76e51d9d45d4",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "$sum(arr)",
        "func": "// $sum(array)\n\nconst data = {\n    example: [\n        { value: 4 },\n        { value: 7 },\n        { value: 13 },\n        { value: 10 },\n    ],\n};\n\nmsg.topic = (data.example[0].value + data.example[1].value + data.example[2].value + data.example[3].value);\n\n// Returns the arithmetic sum of an array of numbers\nconst expression = jsonata(\"$sum(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 100,
        "wires": [
            [
                "4b3e82218503d28a"
            ]
        ]
    },
    {
        "id": "124bdd42fad50ccc",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "$max(arr)",
        "func": "// $max(array)\n\nconst data = {\n    \"example\": {\n        \"value\": [ 4, 7, 13 ],\n    },\n};\n\n// Returns the maximum number in an array of numbers\nconst expression = jsonata(\"$max(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 140,
        "wires": [
            [
                "95b7b4d1463f8ba2"
            ]
        ]
    },
    {
        "id": "f00555d99d713808",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 140,
        "wires": [
            [
                "124bdd42fad50ccc"
            ]
        ]
    },
    {
        "id": "95b7b4d1463f8ba2",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 140,
        "wires": []
    },
    {
        "id": "76ab1b459ad7557d",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "$min(arr)",
        "func": "// $min(array)\n\nconst data = {\n    \"example\": {\n        \"value\": [ 4, 7, 13 ],\n    },\n};\n\n// Returns the minimum number in an array of numbers\nconst expression = jsonata(\"$min(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 180,
        "wires": [
            [
                "27ae951f78f80e9f"
            ]
        ]
    },
    {
        "id": "133de034e18f2e08",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "$average(arr)",
        "func": "// $average(array)\n\nconst value = [];\nvalue[0] = 4;\nvalue[1] = 7;\nvalue[2] = 13;\n\nconst data = { \"example\": { value }};\n\n// Returns the mean value of an array of numbers\nconst expression = jsonata(\"$average(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 220,
        "wires": [
            [
                "64bf6cca123277d6"
            ]
        ]
    },
    {
        "id": "9895cc964f49ae00",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 180,
        "wires": [
            [
                "76ab1b459ad7557d"
            ]
        ]
    },
    {
        "id": "f06124c947a5414c",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 220,
        "wires": [
            [
                "133de034e18f2e08"
            ]
        ]
    },
    {
        "id": "27ae951f78f80e9f",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 180,
        "wires": []
    },
    {
        "id": "64bf6cca123277d6",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 220,
        "wires": []
    },
    {
        "id": "8daced1e49b8e444",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$number(arg)",
        "func": "// $number(argument)\n// Argument can be string or boolean\n\nconst example = [];\nexample[0] = true;\nexample[1] = false;\nexample[2] = \"2\";\n\n// Casts the arg parameter to a number\nconst expression = [];\nexpression[0] = jsonata(`$number(${example[0]})`);\nexpression[1] = jsonata(`$number(${example[1]})`);\nexpression[2] = jsonata(`$number(${example[2]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 980,
        "wires": [
            [
                "d7445651ceb1befb"
            ]
        ]
    },
    {
        "id": "d7445651ceb1befb",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 980,
        "wires": []
    },
    {
        "id": "0c47d4e5f41185ff",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$abs(num)",
        "func": "// $abs(number)\n\nconst example = [];\nexample[0] = 2;\nexample[1] = -3;\n\n// Returns the absolute value of the number\nconst expression = [];\nexpression[0] = jsonata(`$abs(${example[0]})`);\nexpression[1] = jsonata(`$abs(${example[1]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1020,
        "wires": [
            [
                "40cd56ab50d99edd"
            ]
        ]
    },
    {
        "id": "2915de67bb436aec",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 980,
        "wires": [
            [
                "8daced1e49b8e444"
            ]
        ]
    },
    {
        "id": "f816ab6ce130373d",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1020,
        "wires": [
            [
                "0c47d4e5f41185ff"
            ]
        ]
    },
    {
        "id": "40cd56ab50d99edd",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1020,
        "wires": []
    },
    {
        "id": "3c64a396557c2169",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$floor(num)",
        "func": "// $floor(number)\n\nconst example = [];\nexample[0] = 4;\nexample[1] = 4.4;\nexample[2] = 4.8;\nexample[3] = -4.4;\n\n// Returns the value of number rounded down to the nearest integer\nconst expression = [];\nexpression[0] = jsonata(`$floor(${example[0]})`);\nexpression[1] = jsonata(`$floor(${example[1]})`);\nexpression[2] = jsonata(`$floor(${example[2]})`);\nexpression[3] = jsonata(`$floor(${example[3]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1060,
        "wires": [
            [
                "a092319ec2068dcb"
            ]
        ]
    },
    {
        "id": "42412dbf82022ed6",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$ceil(num)",
        "func": "// $ceil(number)\n\nconst example = [];\nexample[0] = 4;\nexample[1] = 4.4;\nexample[2] = 4.8;\nexample[3] = -4.4;\n\n// Returns the value of number rounded up to the nearest integer\nconst expression = [];\nexpression[0] = jsonata(`$ceil(${example[0]})`);\nexpression[1] = jsonata(`$ceil(${example[1]})`);\nexpression[2] = jsonata(`$ceil(${example[2]})`);\nexpression[3] = jsonata(`$ceil(${example[3]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "4fa5326a67572fba"
            ]
        ]
    },
    {
        "id": "be9e933624cfc9b9",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$round(num, pre)",
        "func": "// $round(num [, precision])\n\nconst example = [];\nexample[0] = 3.14159265;\nexample[1] = 425;\n\n// Returns the value of the number parameter\n// rounded to decimal places specified by optional precision parameter\nconst expression = [];\nexpression[0] = jsonata(`$round(${example[0]})`);\nexpression[1] = jsonata(`$round(${example[0]},2)`);\nexpression[2] = jsonata(`$round(${example[1]},-1)`);\nexpression[3] = jsonata(`$round(${example[1]},-2)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 1140,
        "wires": [
            [
                "0efc16b8ad0a4a06"
            ]
        ]
    },
    {
        "id": "506c5164d419415a",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1060,
        "wires": [
            [
                "3c64a396557c2169"
            ]
        ]
    },
    {
        "id": "bd4e27a24441e29a",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1100,
        "wires": [
            [
                "42412dbf82022ed6"
            ]
        ]
    },
    {
        "id": "78ed3050cffbee5f",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1140,
        "wires": [
            [
                "be9e933624cfc9b9"
            ]
        ]
    },
    {
        "id": "a092319ec2068dcb",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1060,
        "wires": []
    },
    {
        "id": "0efc16b8ad0a4a06",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1140,
        "wires": []
    },
    {
        "id": "4fa5326a67572fba",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1100,
        "wires": []
    },
    {
        "id": "3d892df51ef07041",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$power(base , exp)",
        "func": "// $power(base , exponent)\n\nconst example = 5;\n\n// Returns the value of base raised to the power of exponent\nconst expression = [];\nexpression[0] = jsonata(`$power(${example}, 0)`);\nexpression[1] = jsonata(`$power(${example}, 1)`);\nexpression[2] = jsonata(`$power(${example}, 2)`);\nexpression[3] = jsonata(`$power(${example}, -1)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 1180,
        "wires": [
            [
                "a9f54d592da16259"
            ]
        ]
    },
    {
        "id": "d8cc71bf7a1cef6e",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1180,
        "wires": [
            [
                "3d892df51ef07041"
            ]
        ]
    },
    {
        "id": "a9f54d592da16259",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1180,
        "wires": []
    },
    {
        "id": "c211cee8f26830fb",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$sqrt(num)",
        "func": "const example = [];\nexample[0] = 16;\nexample[1] = 25;\n\n// Returns the square root of the value of the number\nconst expression = [];\nexpression[0] = jsonata(`$sqrt(${example[0]})`);\nexpression[1] = jsonata(`$sqrt(${example[1]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1220,
        "wires": [
            [
                "9129250d27e12100"
            ]
        ]
    },
    {
        "id": "3f468cb3641e5db2",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1220,
        "wires": [
            [
                "c211cee8f26830fb"
            ]
        ]
    },
    {
        "id": "9129250d27e12100",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1220,
        "wires": []
    },
    {
        "id": "35468424f2a1649a",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$random()",
        "func": "// $random()\n\n// Returns a pseudo random number (0 ≤ n < 1)\nconst expression = jsonata(\"$random()\");\n\nmsg.payload = [];\nmsg.payload[0] = expression.evaluate();\nmsg.payload[1] = jsonata(\"$random()\").evaluate();\nmsg.payload[2] = jsonata(`$round(${msg.payload[1]}, 2)`).evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1260,
        "wires": [
            [
                "6deec1748014b6c6"
            ]
        ]
    },
    {
        "id": "1a901ddcf487d332",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1260,
        "wires": [
            [
                "35468424f2a1649a"
            ]
        ]
    },
    {
        "id": "6deec1748014b6c6",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1260,
        "wires": []
    },
    {
        "id": "6a945003fb6a19fe",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$formatNumber(num, pic)",
        "func": "// $formatNumber(num, picture [, options])\n\nconst example = [];\nexample[0] = 3.14159265;\nexample[1] = 1234.5678;\n\n// Casts the number to a string and formats it to a decimal representation \n// as specified by the picture string\nconst expression = [];\nexpression[0] = jsonata(`$formatNumber(${example[0]}, \"#.#\")`);\nexpression[1] = jsonata(`$formatNumber(${example[0]}, \"#.00\")`);\nexpression[2] = jsonata(`$formatNumber(${example[1]}, \"#,###.##\")`);\nexpression[3] = jsonata(`$formatNumber(${example[1]}, \"0,000.00%\")`);\nexpression[4] = jsonata(`$formatNumber(${example[1]}, \"#,###.####pm\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 1300,
        "wires": [
            [
                "19592f83ca197954"
            ]
        ]
    },
    {
        "id": "354dc0515a3a8c0c",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1300,
        "wires": [
            [
                "6a945003fb6a19fe"
            ]
        ]
    },
    {
        "id": "19592f83ca197954",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1300,
        "wires": []
    },
    {
        "id": "e96d13cd9c516780",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$formatBase(num, rad)",
        "func": "// $formatBase(num, radix)\n// If radix is not specified, then it defaults to base 10\n// radix can be between 2 and 36\n\nconst example = [];\nexample[0] = 10;\nexample[1] = 15;\n\n// Casts the number to a string and formats it to an integer\n// represented in the number base specified by the radix\nconst expression = [];\nexpression[0] = jsonata(`$formatBase(${example[0]})`);\nexpression[1] = jsonata(`$formatBase(${example[0]}, 2)`);\nexpression[2] = jsonata(`$formatBase(${example[0]}, 16)`);\nexpression[3] = jsonata(`$formatBase(${example[1]}, 2)`);\nexpression[4] = jsonata(`$formatBase(${example[1]}, 16)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 1340,
        "wires": [
            [
                "6536ce65bd593f2a"
            ]
        ]
    },
    {
        "id": "1caa81e91f5593bd",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1340,
        "wires": [
            [
                "e96d13cd9c516780"
            ]
        ]
    },
    {
        "id": "6536ce65bd593f2a",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1340,
        "wires": []
    },
    {
        "id": "5b35e2d318a492ab",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$formatInteger(num, pic)",
        "func": "// $formatInteger(num, picture)\n\nconst example = [];\nexample[0] = 12;\nexample[1] = 115;\n\n// Casts the number to a string, formats it to an integer representation as specified by the picture\nconst expression = [];\nexpression[0] = jsonata(`$formatInteger(${example[0]}, \"w\")`);\nexpression[1] = jsonata(`$formatInteger(${example[0]}, \"I\")`);\nexpression[2] = jsonata(`$formatInteger(${example[1]}, \"w\")`);\nexpression[3] = jsonata(`$formatInteger(${example[1]}, \"I\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 1380,
        "wires": [
            [
                "ced7657e6cdca47c"
            ]
        ]
    },
    {
        "id": "fd6e660561b21348",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 1380,
        "wires": [
            [
                "5b35e2d318a492ab"
            ]
        ]
    },
    {
        "id": "ced7657e6cdca47c",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1380,
        "wires": []
    },
    {
        "id": "c277731a9bcd97b7",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$parseInteger(str, pic)",
        "func": "// $parseInteger(string, picture)\n\nconst example = [];\nexample[0] = \"five\";\nexample[1] = \"two thousand, one hundred and fifteen\";\nexample[2] = \"123,456,789\";\nexample[3] = \"VIII\";\n\n// Parses the contents of the string parameter to an integer\n// using the format specified by the picture\nconst expression = [];\nexpression[0] = jsonata(`$parseInteger(\"${example[0]}\", \"w\")`);\nexpression[1] = jsonata(`$parseInteger(\"${example[1]}\", \"w\")`);\nexpression[2] = jsonata(`$parseInteger(\"${example[2]}\", \"#,###,##0\")`);\nexpression[3] = jsonata(`$parseInteger(\"${example[3]}\", \"I\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 1420,
        "wires": [
            [
                "92e8c4c7ae1a5c67"
            ]
        ]
    },
    {
        "id": "9e58844dd14dc104",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 1420,
        "wires": [
            [
                "c277731a9bcd97b7"
            ]
        ]
    },
    {
        "id": "92e8c4c7ae1a5c67",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1420,
        "wires": []
    },
    {
        "id": "0f7cc1cbf53be959",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "7b9707e1fdb83b97"
            ]
        ]
    },
    {
        "id": "89305a8bf17ce1f4",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 80,
        "wires": []
    },
    {
        "id": "7b9707e1fdb83b97",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$string(arg, pre)",
        "func": "// $string(arg, prettify)\n// Argument can be boolean, number, array, null\n// Prettify is boolean, if true, then \"prettified\" JSON is produced\n\nconst example = [];\nexample[0] = true;\nexample[1] = [ 1, \"'false'\", false ];\nexample[2] = null;\nexample[3] = new Date();\nconst data = {\n    example: {\n        test: {\n            pos1: \"success\",\n            pos2: \"failure\",\n        },\n    },\n};\n\n// Casts the arg parameter to a string\nconst expression = [];\nexpression[0] = jsonata(`$string(\"${example[0]}\")`);\nexpression[1] = jsonata(`$string(\"${example[1]}\")`);\nexpression[2] = jsonata(`$string(\"${example[2]}\")`);\nexpression[3] = jsonata(`$string(\"${example[3]}\")`);\nexpression[4] = jsonata(\"$string(example)\");\nexpression[5] = jsonata(\"$string(example, true)\");\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate(data);\nmsg.payload[5] = expression[5].evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 80,
        "wires": [
            [
                "89305a8bf17ce1f4"
            ]
        ]
    },
    {
        "id": "33eb18d77c98742f",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "97b05ca3aea965ff"
            ]
        ]
    },
    {
        "id": "2b10b22d75bb2d81",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 120,
        "wires": []
    },
    {
        "id": "97b05ca3aea965ff",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$length(str)",
        "func": "// $length(string)\n\nconst example = [];\nexample[0] = \"hello world\";\nexample[1] = [\"test array\"];\nexample[2] = false;\nexample[3] = null;\n\n// Returns the number of characters in the string\nconst expression = [];\nexpression[0] = jsonata(`$length(\"${example[0]}\")`);\nexpression[1] = jsonata(`$length(\"${example[1]}\")`);\nexpression[2] = jsonata(`$length(\"${example[2]}\")`);\nexpression[3] = jsonata(`$length(\"${example[3]}\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 120,
        "wires": [
            [
                "2b10b22d75bb2d81"
            ]
        ]
    },
    {
        "id": "574029ce9d53b3e7",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$substring(str ,sta, len)",
        "func": "// $substring(string, start[, length])\n\nconst example = [ \"hello world\", \"goodbye friend\" ];\n\n// Returns a string containing the characters from start\n// If length is specified, then the substring will be equal to the length in characters\n// If start is negative then it indicates the number of characters from the end\nconst expression = [];\nexpression[0] = jsonata(`$substring(\"${example[0]}\", 2)`);\nexpression[1] = jsonata(`$substring(\"${example[0]}\", 3, 5)`);\nexpression[2] = jsonata(`$substring(\"${example[0]}\", -5)`);\nexpression[3] = jsonata(`$substring(\"${example[0]}\", -5, 3)`);\nexpression[5] = jsonata(`$substring(\"${example[1]}\", 4, 3)`);\nexpression[4] = jsonata(`$substring(\"${example[1]}\", -10, 3)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\nmsg.payload[5] = expression[5].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 160,
        "wires": [
            [
                "4552c8db8906bd64"
            ]
        ]
    },
    {
        "id": "0f406e4fb437596e",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "574029ce9d53b3e7"
            ]
        ]
    },
    {
        "id": "4552c8db8906bd64",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "5fc0599c484f2382",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$substringBefore(str ,cha)",
        "func": "// $substringBefore(string, characters)\n\nconst example = [];\nexample[0] = `hello \nworld`;\n\n// Returns the substring before the first occurrence of the character sequence\nconst expression = [];\nexpression[0] = jsonata(`$substringBefore(\"${example[0]}\", \" \")`);\nexpression[1] = jsonata(`$substringBefore(\"${example[0]}\", \"l\")`);\nexpression[2] = jsonata(`$substringBefore(\"${example[0]}\", \"o\")`);\nexpression[3] = jsonata(`$substringBefore(\"${example[0]}\", \"r\")`);\nexpression[4] = jsonata(`$substringBefore(\"${example[0]}\", \"\\n\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 200,
        "wires": [
            [
                "d7b47f2422eb5d41"
            ]
        ]
    },
    {
        "id": "61eacfc6b05617af",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "5fc0599c484f2382"
            ]
        ]
    },
    {
        "id": "d7b47f2422eb5d41",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 200,
        "wires": []
    },
    {
        "id": "d12bb701c54a51b7",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$substringAfter(str ,cha)",
        "func": "// $substringAfter(string, characters)\n\nconst example = [`hello \nworld`];\n\n// Returns the substring after the first occurrence of the character sequence\nconst expression = [\n    jsonata(`$substringAfter(\"${example[0]}\", \" \")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"l\")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"o\")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"r\")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"\\n\")`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n    expression[2].evaluate(),\n    expression[3].evaluate(),\n    expression[4].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 240,
        "wires": [
            [
                "25da3fbb5cb8a783"
            ]
        ]
    },
    {
        "id": "25da3fbb5cb8a783",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 240,
        "wires": []
    },
    {
        "id": "bc87e57a88fd8fc9",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "d12bb701c54a51b7"
            ]
        ]
    },
    {
        "id": "79f3a0a75f765aa5",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$uppercase(str)",
        "func": "// $uppercase(string)\n\nconst example = \"Hello World\";\n\n// Returns a string with all the characters converted to uppercase\nconst expression = jsonata(`$uppercase(\"${example}\")`);\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 280,
        "wires": [
            [
                "f03d559a1b4ecf37"
            ]
        ]
    },
    {
        "id": "5263c4f5189e5eaf",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "79f3a0a75f765aa5"
            ]
        ]
    },
    {
        "id": "f03d559a1b4ecf37",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 280,
        "wires": []
    },
    {
        "id": "f831e7e54c6df875",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$lowercase(str)",
        "func": "// $lowercase(string)\n\nconst example = \"Hello World\";\n\n// Returns a string with all the characters converted to lowercase\nconst expression = jsonata(`$lowercase(\"${example}\")`);\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 320,
        "wires": [
            [
                "03cebea42a679530"
            ]
        ]
    },
    {
        "id": "efb7f178ed1f6b26",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "f831e7e54c6df875"
            ]
        ]
    },
    {
        "id": "03cebea42a679530",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 320,
        "wires": []
    },
    {
        "id": "27aa670fc69b45b7",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$trim(str)",
        "func": "// $trim(string)\n\nconst example = `Hello\nWorld\n`;\n\n// Normalizes and trims all whitespace characters in string\n// All tabs, carriage returns, and line feeds are replaced with spaces.\n// Contiguous sequences of spaces are reduced to a single space.\n// Trailing and leading spaces are removed\nconst expression = jsonata(`$trim(\"${example}\")`);\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 280,
        "y": 360,
        "wires": [
            [
                "36e9a2f036e7334b"
            ]
        ]
    },
    {
        "id": "5f0de1517502ca39",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "27aa670fc69b45b7"
            ]
        ]
    },
    {
        "id": "36e9a2f036e7334b",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 360,
        "wires": []
    },
    {
        "id": "015750733b48bc64",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$pad(str, wid, cha)",
        "func": "// $pad(string, width [, character])\n\nconst data = {\n    example: \"Hello\",\n    char: \"X\",\n    width: -7,\n};\n\n// Returns a copy of the string str with extra padding\n// It's total number of characters is at least the absolute value of the width\n// If width is a positive number, then the string is padded to the right\n// If negative, it is padded to the left\n// char argument specifies the padding character, default is space\nconst expression = [\n    jsonata(\"$pad(example, 7)\"),\n    jsonata(\"$pad(example, -7)\"),\n    jsonata(\"$pad(example, 7, '#')\"),\n    jsonata(\"$pad(example, width, char)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 400,
        "wires": [
            [
                "bf6925f53b4c8570"
            ]
        ]
    },
    {
        "id": "588e07e3dad2b766",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "015750733b48bc64"
            ]
        ]
    },
    {
        "id": "bf6925f53b4c8570",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 400,
        "wires": []
    },
    {
        "id": "dd525c51d46d0aa4",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$contains(str, pat)",
        "func": "// $contains(string, pattern)\n// pattern can be a string or a regular expression (regex)\n\nconst example = \"Hello World\";\nconst regex = [ /wo/, /wo/i ];\n\n// Returns true if str is matched by pattern, otherwise it returns false\nconst expression = [\n    jsonata(`$contains(\"${example}\", \"orl\")`),\n    jsonata(`$contains(\"${example}\", \"goodbye\")`),\n    jsonata(`$contains(\"${example}\", ${regex[0]})`),\n    jsonata(`$contains(\"${example}\", ${regex[1]})`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n    expression[2].evaluate(),\n    expression[3].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 440,
        "wires": [
            [
                "0de1a0ecc422ca10"
            ]
        ]
    },
    {
        "id": "4bb01a6c30ef2a92",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$split(str, sep, lim)",
        "func": "// $split(string, separator [, limit])\n// Separator parameter can either be a string or a regular expression (regex)\n// Limit parameter is a number that specifies the maximum of substrings to include in the result\n\nconst example = \"Hello World\";\nconst regex = /l/;\n\n// Splits the str parameter into an array of substrings by the separator parameter\nconst expression = [\n    jsonata(`$split(\"${example}\", \" \")`),\n    jsonata(`$split(\"${example}\", \"l\")`),\n    jsonata(`$split(\"${example}\", \"l\", 2)`),\n    jsonata(`$split(\"${example}\", ${regex})`),\n    jsonata(`$split(\"${example}\", ${regex}, 3)`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n    expression[2].evaluate(),\n    expression[3].evaluate(),\n    expression[4].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 480,
        "wires": [
            [
                "7d39f8ccd7f440b3"
            ]
        ]
    },
    {
        "id": "a804fb7a5d6a7527",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "dd525c51d46d0aa4"
            ]
        ]
    },
    {
        "id": "71db1766621ddda7",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 480,
        "wires": [
            [
                "4bb01a6c30ef2a92"
            ]
        ]
    },
    {
        "id": "0de1a0ecc422ca10",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 440,
        "wires": []
    },
    {
        "id": "7d39f8ccd7f440b3",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 480,
        "wires": []
    },
    {
        "id": "fac1cb69ad143cb4",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$join(arr, sep)",
        "func": "// $join(array[, separator])\n\nconst data = {\n    example: [ \"Hello\", \"World\", \"Goodbye\", \"Moon\" ],\n};\n\n// Joins an array of component strings into a single concatenated string\nconst expression = [\n    jsonata(\"$join(example)\"),\n    jsonata(\"$join(example, '-')\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 520,
        "wires": [
            [
                "6df09440e2cbde59"
            ]
        ]
    },
    {
        "id": "89ef93936b21b4ad",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 520,
        "wires": [
            [
                "fac1cb69ad143cb4"
            ]
        ]
    },
    {
        "id": "6df09440e2cbde59",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 520,
        "wires": []
    },
    {
        "id": "641205e3cba124d0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$match(str, pat, lim)",
        "func": "// $match(str, pattern [, limit])\n\nlet data = {\n    example: \"ababbabbcc\",\n};\n\n// Applies the string to the pattern regular expression and returns an array of objects\nconst expression = [\n    jsonata(\"$match(example, /a(b+)/)\"),\n    jsonata(\"$match(example, /a(b+)/, 1)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 560,
        "wires": [
            [
                "d3b13f915c0880b6"
            ]
        ]
    },
    {
        "id": "ce0842f09f2f02d2",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "641205e3cba124d0"
            ]
        ]
    },
    {
        "id": "d3b13f915c0880b6",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 560,
        "wires": []
    },
    {
        "id": "ca02b214332083a0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$replace(str, pat, rep, lim)",
        "func": "// $replace(string, pattern, replacement [, limit])\n// Pattern parameter can either be a string or a regular expression (regex)\n\nconst example = \"Hello world\";\nconst example2 = \"Billy Bob\";\nconst regex = /(\\w+)\\s(\\w+)/;\n\n// Finds occurrences of pattern within string and replaces them with replacement\nconst expression = [\n    jsonata(`$replace(\"${example}\", \"Hello\", \"Goodbye cruel\")`),\n    jsonata(`$replace(\"${example2}\", ${regex}, \"$2, $1\")`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 600,
        "wires": [
            [
                "8e676426b4739885"
            ]
        ]
    },
    {
        "id": "8badc54fd86df382",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 600,
        "wires": [
            [
                "ca02b214332083a0"
            ]
        ]
    },
    {
        "id": "8e676426b4739885",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 600,
        "wires": []
    },
    {
        "id": "20f4bdaa2161ecf0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$eval(exp, con)",
        "func": "// $eval(expression [, context])\n// Expression parameter must be a string\n\nconst data = {\n    example: [ 4, 5, 6 ],\n};\n\n// Parses and evaluates expression which contains literal JSON\n// or a JSONata expression using the current context as the context for evaluation.\nconst expression = [\n    jsonata(\"$eval('[1,2,3]')\"),\n    jsonata(\"$eval('example')\"),\n    jsonata(\"$eval('[$string(7),$string(8),$string(9)]')\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(data),\n    expression[2].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 640,
        "wires": [
            [
                "1bbcc63008b599b9"
            ]
        ]
    },
    {
        "id": "69862f023088276f",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "20f4bdaa2161ecf0"
            ]
        ]
    },
    {
        "id": "1bbcc63008b599b9",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 640,
        "wires": []
    },
    {
        "id": "56c89da93c4f8598",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$base64encode(str)",
        "func": "// $base64encode(string)\n\nconst data = {\n    example: [\n    \"Hello world\",\n    \"This is my secret phrase.\",\n    \"{theKey: 'This is a JSON string example'};\",\n    ],\n};\n\n// Converts an ASCII string to a base 64 representation\nconst expression = [\n    jsonata(\"$base64encode(example[0])\"),\n    jsonata(\"$base64encode(example[1])\"),\n    jsonata(\"$base64encode(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 680,
        "wires": [
            [
                "77a88f7b8594f51e"
            ]
        ]
    },
    {
        "id": "5f8e98fada3e3b8c",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 680,
        "wires": [
            [
                "56c89da93c4f8598"
            ]
        ]
    },
    {
        "id": "77a88f7b8594f51e",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 680,
        "wires": []
    },
    {
        "id": "6e3b43a0f645b2f6",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$base64decode(str)",
        "func": "// $base64decode(string)\n\nconst data = {\n    example: [\n    \"SGVsbG8gd29ybGQ=\",\n    \"VGhpcyBpcyBteSBzZWNyZXQgcGhyYXNlLg==\",\n    \"e3RoZUtleTogJ1RoaXMgaXMgYSBKU09OIHN0cmluZyBleGFtcGxlJ307\",\n    ],\n};\n\n// Converts base 64 encoded bytes to a string, using a UTF-8 Unicode codepage\nconst expression = [\n    jsonata(\"$base64decode(example[0])\"),\n    jsonata(\"$base64decode(example[1])\"),\n    jsonata(\"$base64decode(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 720,
        "wires": [
            [
                "ada30cde655edd22"
            ]
        ]
    },
    {
        "id": "ea1117ddd2426699",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 720,
        "wires": [
            [
                "6e3b43a0f645b2f6"
            ]
        ]
    },
    {
        "id": "ada30cde655edd22",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 720,
        "wires": []
    },
    {
        "id": "e67d10e3347c9ea9",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$encodeUrlComponent(str)",
        "func": "// $encodeUrlComponent(string)\n\nconst data = {\n    example: [\n    \"https://www.youtube.com/watch?v=ksGeUD26Mw0\",\n    \"?v=ksGeUD26Mw0\",\n    \"{theKey: 'This is a JSON string example'};\",\n    ],\n};\n\n// Encodes URL component by replacing certain characters with the UTF-8 encoding of the character using escape sequences\nconst expression = [\n    jsonata(\"$encodeUrlComponent(example[0])\"),\n    jsonata(\"$encodeUrlComponent(example[1])\"),\n    jsonata(\"$encodeUrlComponent(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 340,
        "y": 760,
        "wires": [
            [
                "146b75b897bffc80"
            ]
        ]
    },
    {
        "id": "0fadee83063f1cdd",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$encodeUrl(str)",
        "func": "// $encodeUrl(string)\n\nconst data = {\n    example: [\n    \"Hello world\",\n    \"https://nodered.org/docs/ & not a real url \",\n    \"{theKey: 'This is a JSON string example'};\",\n    ],\n};\n\n// Encodes URL by replacing certain characters with the UTF-8 encoding of the character using escape sequences\nconst expression = [\n    jsonata(\"$encodeUrl(example[0])\"),\n    jsonata(\"$encodeUrl(example[1])\"),\n    jsonata(\"$encodeUrl(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 840,
        "wires": [
            [
                "638f4c5e1eb3ad2d"
            ]
        ]
    },
    {
        "id": "1ae55c36c954c2d7",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "e67d10e3347c9ea9"
            ]
        ]
    },
    {
        "id": "a90c1da2e38eb6be",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 840,
        "wires": [
            [
                "0fadee83063f1cdd"
            ]
        ]
    },
    {
        "id": "146b75b897bffc80",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 760,
        "wires": []
    },
    {
        "id": "638f4c5e1eb3ad2d",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 840,
        "wires": []
    },
    {
        "id": "960107f6763ef6cd",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$decodeUrlComponent(str)",
        "func": "// $decodeUrlComponent(string)\n\nconst data = {\n    example: [\n    \"https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DksGeUD26Mw0\",\n    \"%3Fv%3DksGeUD26Mw0\",\n    \"%7BtheKey%3A%20'This%20is%20a%20JSON%20string%20example'%7D%3B\",\n    ],\n};\n\n// Decodes a URL component previously created by encodeUrlComponent\nconst expression = [\n    jsonata(\"$decodeUrlComponent(example[0])\"),\n    jsonata(\"$decodeUrlComponent(example[1])\"),\n    jsonata(\"$decodeUrlComponent(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 340,
        "y": 800,
        "wires": [
            [
                "97dfea39009105fc"
            ]
        ]
    },
    {
        "id": "1eda0eb06ded6d9c",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "960107f6763ef6cd"
            ]
        ]
    },
    {
        "id": "97dfea39009105fc",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 800,
        "wires": []
    },
    {
        "id": "87b33a10e6f432eb",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$decodeUrl(str)",
        "func": "// $decodeUrl(string)\n\nconst data = {\n    example: [\n    \"Hello%20world\",\n    \"https://nodered.org/docs/%20&%20not%20a%20real%20url%20\",\n    \"%7BtheKey:%20'This%20is%20a%20JSON%20string%20example'%7D;\",\n    ],\n};\n\n// Decodes a URL previously created by encodeUrl\nconst expression = [\n    jsonata(\"$decodeUrl(example[0])\"),\n    jsonata(\"$decodeUrl(example[1])\"),\n    jsonata(\"$decodeUrl(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 880,
        "wires": [
            [
                "637455e25b5e5d1d"
            ]
        ]
    },
    {
        "id": "b125cb399a064b5a",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 880,
        "wires": [
            [
                "87b33a10e6f432eb"
            ]
        ]
    },
    {
        "id": "637455e25b5e5d1d",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 880,
        "wires": []
    },
    {
        "id": "38427db96b1421b0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "$boolean(arg)",
        "func": "// $boolean(arg)\n\n/*\nArgument type\t    Result\nBoolean\t            unchanged\nstring: empty\t    false\nstring: non-empty\ttrue\nnumber: 0\t        false\nnumber: non-zero\ttrue\nnull\t            false\narray: empty\t    false\narray: any true\t    true\narray: all false\tfalse\nobject: empty\t    false\nobject: non-empty\ttrue\nfunction\t        false\n*/\n\nconst data = {\n    example: [\n    true,\n    false,\n    \"\",\n    \"Hello world\",\n    0,\n    1,\n    null,\n    [],\n    [ false, true ],\n    [false],\n    {},\n    { \"non\": \"empty\" },\n    function test() { return; },\n    ],\n};\n\n// Casts the argument to a Boolean\nconst expression = [\n    jsonata(\"$boolean(example[0])\"),\n    jsonata(\"$boolean(example[1])\"),\n    jsonata(\"$boolean(example[2])\"),\n    jsonata(\"$boolean(example[3])\"),\n    jsonata(\"$boolean(example[4])\"),\n    jsonata(\"$boolean(example[5])\"),\n    jsonata(\"$boolean(example[6])\"),\n    jsonata(\"$boolean(example[7])\"),\n    jsonata(\"$boolean(example[8])\"),\n    jsonata(\"$boolean(example[9])\"),\n    jsonata(\"$boolean(example[10])\"),\n    jsonata(\"$boolean(example[11])\"),\n    jsonata(\"$boolean(example[12])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n    expression[8].evaluate(data),\n    expression[9].evaluate(data),\n    expression[10].evaluate(data),\n    expression[11].evaluate(data),\n    expression[12].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 320,
        "wires": [
            [
                "abbe1949232a4942"
            ]
        ]
    },
    {
        "id": "75c0bd910867dc25",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 320,
        "wires": [
            [
                "38427db96b1421b0"
            ]
        ]
    },
    {
        "id": "abbe1949232a4942",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 320,
        "wires": []
    },
    {
        "id": "7f8b843350a69ff0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "$not(arg)",
        "func": "// $not(arg)\n\n/*\nArgument type\t    Result\nBoolean\t            opposite\nstring: empty\t    true\nstring: non-empty\tfalse\nnumber: 0\t        true\nnumber: non-zero\tfalse\nnull\t            true\narray: empty\t    true\narray: any true\t    false\narray: all false\ttrue\nobject: empty\t    true\nobject: non-empty\tfalse\nfunction\t        true\n*/\n\nconst data = {\n    example: [\n    true,\n    false,\n    \"\",\n    \"Hello world\",\n    0,\n    1,\n    null,\n    [],\n    [ false, true ],\n    [false],\n    {},\n    { \"non\": \"empty\" },\n    function test() { return; },\n    ],\n};\n\n// Returns Boolean NOT on the argument, the revese of $boolean()\nconst expression = [\n    jsonata(\"$not(example[0])\"),\n    jsonata(\"$not(example[1])\"),\n    jsonata(\"$not(example[2])\"),\n    jsonata(\"$not(example[3])\"),\n    jsonata(\"$not(example[4])\"),\n    jsonata(\"$not(example[5])\"),\n    jsonata(\"$not(example[6])\"),\n    jsonata(\"$not(example[7])\"),\n    jsonata(\"$not(example[8])\"),\n    jsonata(\"$not(example[9])\"),\n    jsonata(\"$not(example[10])\"),\n    jsonata(\"$not(example[11])\"),\n    jsonata(\"$not(example[12])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n    expression[8].evaluate(data),\n    expression[9].evaluate(data),\n    expression[10].evaluate(data),\n    expression[11].evaluate(data),\n    expression[12].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 360,
        "wires": [
            [
                "ab2f2d7a863331b5"
            ]
        ]
    },
    {
        "id": "fbb036fc259bc29a",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 360,
        "wires": [
            [
                "7f8b843350a69ff0"
            ]
        ]
    },
    {
        "id": "ab2f2d7a863331b5",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 360,
        "wires": []
    },
    {
        "id": "8b5fca3b78b019b4",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "$exists(arg)",
        "func": "// $exists(arg)\n\nconst data = {\n    example: [\n    true,\n    false,\n    \"\",\n    \"Hello world\",\n    0,\n    1,\n    null,\n    [],\n    [ false, true ],\n    [false],\n    {},\n    { \"non\": \"empty\" },\n    function test() { return; },\n    ],\n};\n\n// Returns Boolean, true if the arg expression evaluates to a value\n// or false if the expression does not match anything\nconst expression = [\n    jsonata(\"$exists(example[0])\"),\n    jsonata(\"$exists(example[1])\"),\n    jsonata(\"$exists(example[2])\"),\n    jsonata(\"$exists(example[3])\"),\n    jsonata(\"$exists(example[4])\"),\n    jsonata(\"$exists(example[5])\"),\n    jsonata(\"$exists(example[6])\"),\n    jsonata(\"$exists(example[7])\"),\n    jsonata(\"$exists(example[8])\"),\n    jsonata(\"$exists(example[9])\"),\n    jsonata(\"$exists(example[10])\"),\n    jsonata(\"$exists(example[11])\"),\n    jsonata(\"$exists(example[12])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n    expression[8].evaluate(data),\n    expression[9].evaluate(data),\n    expression[10].evaluate(data),\n    expression[11].evaluate(data),\n    expression[12].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 400,
        "wires": [
            [
                "dffaf66f56b66b7d"
            ]
        ]
    },
    {
        "id": "5d9f7b44f2096d0a",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 400,
        "wires": [
            [
                "8b5fca3b78b019b4"
            ]
        ]
    },
    {
        "id": "dffaf66f56b66b7d",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 400,
        "wires": []
    },
    {
        "id": "1e76e97f96460298",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "$count(arr)",
        "func": "// $count(array)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [\"Hello World\"],\n    example3: [ true, null, \"\", {}],\n};\n\n// Returns the number of items in the array\nconst expression = [\n    jsonata(\"$count(example1)\"),\n    jsonata(\"$count(example2)\"),\n    jsonata(\"$count(example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 500,
        "wires": [
            [
                "31477f70de39ad61"
            ]
        ]
    },
    {
        "id": "8c521273427ab262",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 500,
        "wires": [
            [
                "1e76e97f96460298"
            ]
        ]
    },
    {
        "id": "31477f70de39ad61",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 500,
        "wires": []
    },
    {
        "id": "e49f68a0f36889d6",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "$append(arr1, arr2)",
        "func": "// $append(array1, array2)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [\"Hello World\"],\n    example3: [ true, null, \"\", {}],\n};\n\n// Returns an array containing the values in array1 followed by the values in array2.\n// If either parameter is not an array, then it is treated as a singleton array containing that value\nconst expression = [\n    jsonata(\"$append(example1, [6,7,8,9])\"),\n    jsonata(\"$append(example2, 'This is JSONata')\"),\n    jsonata(\"$append(example3, false)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 540,
        "wires": [
            [
                "78aca9737c826606"
            ]
        ]
    },
    {
        "id": "d32c6167e83986e2",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 540,
        "wires": [
            [
                "e49f68a0f36889d6"
            ]
        ]
    },
    {
        "id": "78aca9737c826606",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 540,
        "wires": []
    },
    {
        "id": "54d5f9cd3c6bf6c0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "$sort(arr, fun)",
        "func": "// $sort(array [, function])\n\nconst data = {\n    example1: [ 4, 3, 5, 1, 2 ],\n    example2: [ \"Hello World\", \"a\", \"test\" ],\n};\n\n// Returns an array containing all the values in the array, but sorted into order\nconst expression = [\n    jsonata(\"$sort(example1, function($l, $r) {$l > $r})\"),\n    jsonata(\"$sort(example1, function($l, $r) {$l < $r})\"),\n    jsonata(\"$sort(example2, function($l, $r) {$l < $r})\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 580,
        "wires": [
            [
                "7db3d73f20c5a22a"
            ]
        ]
    },
    {
        "id": "2234f7ae697a3770",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 580,
        "wires": [
            [
                "54d5f9cd3c6bf6c0"
            ]
        ]
    },
    {
        "id": "7db3d73f20c5a22a",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 580,
        "wires": []
    },
    {
        "id": "9a29918bf56cf115",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "$reverse(arr)",
        "func": "// $reverse(array)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [ \"A\", \"B\", \"C\", \"D\" ],\n};\n\n// Returns an array containing all the values from the array, but in reverse order\nconst expression = [\n    jsonata(\"$reverse(example1)\"),\n    jsonata(\"$reverse(example2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 620,
        "wires": [
            [
                "9d70686ae7347700"
            ]
        ]
    },
    {
        "id": "c7c0d71d5016220c",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 620,
        "wires": [
            [
                "9a29918bf56cf115"
            ]
        ]
    },
    {
        "id": "9d70686ae7347700",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 620,
        "wires": []
    },
    {
        "id": "75d52d47a71233cd",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "$shuffle(arr)",
        "func": "// $shuffle(array)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [ \"A\", \"B\", \"C\", \"D\" ],\n};\n\n// Returns an array containing all the values in the array, but shuffled into random order\nconst expression = [\n    jsonata(\"$shuffle(example1)\"),\n    jsonata(\"$shuffle(example2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 660,
        "wires": [
            [
                "bc71d90bd9775450"
            ]
        ]
    },
    {
        "id": "f11869a6d78d66ab",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 660,
        "wires": [
            [
                "75d52d47a71233cd"
            ]
        ]
    },
    {
        "id": "bc71d90bd9775450",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 660,
        "wires": []
    },
    {
        "id": "99ea95ba592024e3",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "$distinct(arr)",
        "func": "// $distinct(array)\n\nconst data = {\n    example1: [ 1, 2, 1, 2, 3, 4, 1, 5, 4 ],\n    example2: [ \"A\", \"A\", \"B\", \"C\", \"D\", \"D\" ],\n};\n\n// Returns an array containing all the values in the array, but with any duplicates removed\nconst expression = [\n    jsonata(\"$distinct(example1)\"),\n    jsonata(\"$distinct(example2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 700,
        "wires": [
            [
                "b19f7f7a070d3036"
            ]
        ]
    },
    {
        "id": "f3a96c864130a773",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 700,
        "wires": [
            [
                "99ea95ba592024e3"
            ]
        ]
    },
    {
        "id": "b19f7f7a070d3036",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 700,
        "wires": []
    },
    {
        "id": "96ddc88c25af6454",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "$zip(arr1, ...)",
        "func": "// $zip(array1, ...)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns a convolved (zipped) array containing grouped arrays \n// of values from the array1 ... arrayN arguments from index 0, 1, 2, etc\nconst expression = [\n    jsonata(\"$zip(example1, example2)\"),\n    jsonata(\"$zip(example2, example1)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 740,
        "wires": [
            [
                "702df9610cf8c931"
            ]
        ]
    },
    {
        "id": "48342adfa3e091c2",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 740,
        "wires": [
            [
                "96ddc88c25af6454"
            ]
        ]
    },
    {
        "id": "702df9610cf8c931",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 740,
        "wires": []
    },
    {
        "id": "a423604384b85a61",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "$now()",
        "func": "// $now([picture [, timezone]])\n\nconst data = {\n    example1: \"[M01]/[D01]/[Y0001] [h#1]:[m01][P]\",\n    example2: \"[H01]:[m01]:[s01] [z]\",\n    example3: \"-0600\",\n};\n\n// Generates a UTC timestamp in ISO 8601 compatible format and returns it as a string\n// If the optional picture and timezone parameters are supplied,\n// then the current timestamp is formatted as described by the $fromMillis() function\nconst expression = [\n    jsonata(\"$now()\"),\n    jsonata(\"$now(example1, example3)\"),\n    jsonata(\"$now(example2, example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 890,
        "y": 1300,
        "wires": [
            [
                "e1989374d8a86617"
            ]
        ]
    },
    {
        "id": "b649c9e548e52ea6",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1300,
        "wires": [
            [
                "a423604384b85a61"
            ]
        ]
    },
    {
        "id": "e1989374d8a86617",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1300,
        "wires": []
    },
    {
        "id": "7e4537ec98fc0f86",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "$millis()",
        "func": "// $millis()\n\n// Returns the number of milliseconds since the Unix Epoch (1 January, 1970 UTC) as a number\nconst expression = jsonata(\"$millis()\");\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 1340,
        "wires": [
            [
                "e18a31afb52a37ad"
            ]
        ]
    },
    {
        "id": "b571e34201ce4301",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1340,
        "wires": [
            [
                "7e4537ec98fc0f86"
            ]
        ]
    },
    {
        "id": "e18a31afb52a37ad",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1340,
        "wires": []
    },
    {
        "id": "0850c6f82df14da0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "$fromMillis(num, pic, tim)",
        "func": "// $fromMillis(number [, picture [, timezone]])\n\nconst data = {\n    number: 1647393801477,\n    picture1: \"[M01]/[D01]/[Y0001] [h#1]:[m01][P]\",\n    picture2: \"[H01]:[m01]:[s01] [z]\",\n    timezone: \"-0600\",\n};\n\n// Generates a UTC timestamp in ISO 8601 compatible format and returns it as a string\n// If the optional picture and timezone parameters are supplied,\n// then the current timestamp is formatted as described by the $fromMillis() function\nconst expression = [\n    jsonata(\"$fromMillis(number)\"),\n    jsonata(\"$fromMillis(number, picture1)\"),\n    jsonata(\"$fromMillis(number, picture2, timezone)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 950,
        "y": 1380,
        "wires": [
            [
                "5a72be02a7063415"
            ]
        ]
    },
    {
        "id": "f3564e25cdf6ad3a",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1380,
        "wires": [
            [
                "0850c6f82df14da0"
            ]
        ]
    },
    {
        "id": "5a72be02a7063415",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1380,
        "wires": []
    },
    {
        "id": "8a6b6c123b69c249",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "$toMillis(tim, pic)",
        "func": "// $toMillis(timestamp [, picture])\n\nconst data = {\n    number1: \"2022-03-16T01:23:21.477Z\",\n    number2: \"03/16/2022 1:23am\",\n    number3: \"19:23:21\",\n    picture1: \"[M01]/[D01]/[Y0001] [h#1]:[m01][P]\",\n    picture2: \"[H01]:[m01]:[s01]\",\n};\n\n// Generates a UTC timestamp in ISO 8601 compatible format and returns it as a string\n// If the optional picture and timezone parameters are supplied,\n// then the current timestamp is formatted as described by the $fromMillis() function\nconst expression = [\n    jsonata(\"$toMillis(number1)\"),\n    jsonata(\"$toMillis(number2, picture1)\"),\n    jsonata(\"$toMillis(number3, picture2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 1420,
        "wires": [
            [
                "5743a08375473c86"
            ]
        ]
    },
    {
        "id": "7934417554ab4fca",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1420,
        "wires": [
            [
                "8a6b6c123b69c249"
            ]
        ]
    },
    {
        "id": "5743a08375473c86",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1420,
        "wires": []
    },
    {
        "id": "bb7a943e8d73a2ee",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "$map(arr, fun)",
        "func": "// $map(array, function)\n// function(value [, index [, array]])\n\nconst data = {\n    \"example1\": [ 1, 2, 3, 4, 5 ],\n    \"example2\": [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns an array containing the results of applying the function parameter to each value in the array parameter\nconst expression = [\n    jsonata(\"$map(example1, $string)\"),\n    jsonata(\"$map(example1, function($v, $i, $a) { $v + 2 })\"),\n    jsonata(\"$map(example2, function($v, $i, $a) { 'Item ' & ($i+1) & ' of ' & $count($a) & ': ' & $v })\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1540,
        "y": 100,
        "wires": [
            [
                "2f81648ac0a0dea6"
            ]
        ]
    },
    {
        "id": "cb19fabf590bf8a1",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 100,
        "wires": [
            [
                "bb7a943e8d73a2ee"
            ]
        ]
    },
    {
        "id": "2f81648ac0a0dea6",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 100,
        "wires": []
    },
    {
        "id": "fa2e2c09eaccd887",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "$filter(arr, fun)",
        "func": "// $filter(array, function)\n// function(value [, index [, array]])\n\nconst data = {\n    \"example1\": [ 1, 2, 3, 4, 5 ],\n    \"example2\": [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns an array containing only the values in the array parameter that satisfy the function predicate\nconst expression = [\n    jsonata(\"$filter(example1, function($v, $i, $a) { $v > 2 })\"),\n    jsonata(\"$filter(example2, function($v, $i, $a) { $v != 'C' })\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1540,
        "y": 140,
        "wires": [
            [
                "cf842de86d95cf61"
            ]
        ]
    },
    {
        "id": "0a4e2fdb7c155b17",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 140,
        "wires": [
            [
                "fa2e2c09eaccd887"
            ]
        ]
    },
    {
        "id": "cf842de86d95cf61",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 140,
        "wires": []
    },
    {
        "id": "0d3fa93f582f57cf",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "$single(arr, fun)",
        "func": "// $single(array, function)\n// function(value [, index [, array]])\n\nconst data = {\n    \"example1\": [ 1, 2, 3, 4, 5 ],\n    \"example2\": [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns the one and only one value in the array parameter that satisfy the function predicate\n// Throws an exception if the number of matching values is not exactly one\nconst expression = [\n    jsonata(\"$single(example1, function($v, $i, $a) { $v = 2 })\"),\n    jsonata(\"$single(example2, function($v, $i, $a) { $v = 'C' })\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1540,
        "y": 180,
        "wires": [
            [
                "6e4a6618668b68c7"
            ]
        ]
    },
    {
        "id": "078f7f9446b4018c",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 180,
        "wires": [
            [
                "0d3fa93f582f57cf"
            ]
        ]
    },
    {
        "id": "6e4a6618668b68c7",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 180,
        "wires": []
    },
    {
        "id": "3b70c2ca565463f0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "$reduce(arr, fun, ini)",
        "func": "// $reduce(array, function [, init])\n// function($accumulator, $value[, $index[, $array]])\n\nconst data = {\n    \"example\": [ 1, 2, 3, 4, 5 ],\n};\n\n// Returns an aggregated value derived from applying the function parameter successively to each value in array\n// in combination with the result of the previous application of the function\nconst expression = [\n    jsonata(\"$reduce(example, function($i, $j){$i + $j})\"),\n    jsonata(\"$reduce(example, function($i, $j){$i * $j})\"),\n    jsonata(\"$reduce(example, function($i, $j){$i + $j}, 405)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1560,
        "y": 220,
        "wires": [
            [
                "291158397d7b6794"
            ]
        ]
    },
    {
        "id": "e90f56bfc1a1f01a",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 220,
        "wires": [
            [
                "3b70c2ca565463f0"
            ]
        ]
    },
    {
        "id": "291158397d7b6794",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 220,
        "wires": []
    },
    {
        "id": "154385cc7d38b19f",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$keys(obj)",
        "func": "// $keys(object)\n\nconst data = {\n    example1: {\n        \"A\": 1,\n        \"B\": 2,\n        \"C\": 3,\n        \"D\": 4,\n        \"E\": 5,\n    },\n    example2: {\n        \"payload\": \"Success\",\n        \"topic\": \"test\",\n    },\n    example3: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"A\": 3 },\n        { \"C\": 4 },\n        { \"B\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Returns an array containing the keys in the object.\n// If the argument is an array of objects, then the returned contains\n// a de-duplicated list of all the keys in all of the objects.\nconst expression = [\n    jsonata(\"$keys(example1)\"),\n    jsonata(\"$keys(example2)\"),\n    jsonata(\"$keys(example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 840,
        "wires": [
            [
                "6878dca73600cf5f"
            ]
        ]
    },
    {
        "id": "0f2d1fb515a787ac",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 840,
        "wires": [
            [
                "154385cc7d38b19f"
            ]
        ]
    },
    {
        "id": "6878dca73600cf5f",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 840,
        "wires": []
    },
    {
        "id": "b18ce2580dbec5df",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$lookup(obj, key)",
        "func": "// $lookup(object, key)\n\nconst data = {\n    example1: {\n        \"A\": 1,\n        \"B\": 2,\n        \"C\": 3,\n        \"D\": 4,\n        \"E\": 5,\n    },\n    example2: {\n        \"payload\": \"Success\",\n        \"topic\": \"test\",\n    },\n    example3: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"C\": 3 },\n        { \"D\": 4 },\n        { \"E\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Returns the value associated with key in object.\n// If the first argument is an array of objects,\n// then all objects in the array are searched,\n// and the values associated with all occurrences of key are returned\nconst expression = [\n    jsonata(\"$lookup(example1, 'B')\"),\n    jsonata(\"$lookup(example2, 'payload')\"),\n    jsonata(\"$lookup(example3, 'A')\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 880,
        "wires": [
            [
                "88d530abb1a21311"
            ]
        ]
    },
    {
        "id": "d85e15ea98982fb9",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 880,
        "wires": [
            [
                "b18ce2580dbec5df"
            ]
        ]
    },
    {
        "id": "88d530abb1a21311",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 880,
        "wires": []
    },
    {
        "id": "db06b0dde05b4382",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$spread(obj)",
        "func": "// $spread(object)\n\nconst data = {\n    example1: {\n        \"A\": 1,\n        \"B\": 2,\n        \"C\": 3,\n        \"D\": 4,\n        \"E\": 5,\n    },\n    example2: {\n        \"payload\": \"Success\",\n        \"topic\": \"test\",\n    },\n    example3: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"C\": 3 },\n        { \"D\": 4 },\n        { \"E\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Splits an object containing key/value pairs into an array of objects,\n// each of which has a single key/value pair from the input object.\n// If the parameter is an array of objects,\n// then the resultant array contains an object for every key/value pair in every object in the array\nconst expression = [\n    jsonata(\"$spread(example1)\"),\n    jsonata(\"$spread(example2)\"),\n    jsonata(\"$spread(example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 920,
        "wires": [
            [
                "f60f4884133da1db"
            ]
        ]
    },
    {
        "id": "98ca6d42e968fa07",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 920,
        "wires": [
            [
                "db06b0dde05b4382"
            ]
        ]
    },
    {
        "id": "f60f4884133da1db",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 920,
        "wires": []
    },
    {
        "id": "07ccc749b4918554",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$merge([obj])",
        "func": "// $merge(array<object>)\n\nconst data = {\n    example1: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"C\": 3 },\n        { \"D\": 4 },\n        { \"E\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Merges an array of objects into a single object containing all the key/value pairs\n// from each of the objects in the input array.\n// If any of the input objects contain the same key,\n// then the returned object will contain the value of the last one in the array.\n// It is an error if the input array contains an item that is not an object.\nconst expression = jsonata(\"$merge(example1)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 960,
        "wires": [
            [
                "0a7c053c61e212d5"
            ]
        ]
    },
    {
        "id": "77e37e87b4f128b7",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 960,
        "wires": [
            [
                "07ccc749b4918554"
            ]
        ]
    },
    {
        "id": "0a7c053c61e212d5",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 960,
        "wires": []
    },
    {
        "id": "b70fb99db7d136f1",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$type(val)",
        "func": "// $type(value)\n\nconst data = {\n    example: [\n    null,\n    1,\n    \"Hello world\",\n    true,\n    [ 0, 1, 2 ],\n    { \"payload\": \"success\" },\n    function test() { return; },\n    undefined,\n    ],\n};\n\n// Evaluates the type of value and returns it's type as a string\n// Returns(non - string) undefined when value is undefined\nconst expression = [\n    jsonata(\"$type(example[0])\"),\n    jsonata(\"$type(example[1])\"),\n    jsonata(\"$type(example[2])\"),\n    jsonata(\"$type(example[3])\"),\n    jsonata(\"$type(example[4])\"),\n    jsonata(\"$type(example[5])\"),\n    jsonata(\"$type(example[6])\"),\n    jsonata(\"$type(example[7])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 1200,
        "wires": [
            [
                "075d773fe41dce15"
            ]
        ]
    },
    {
        "id": "bc4b6a167433f525",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1200,
        "wires": [
            [
                "b70fb99db7d136f1"
            ]
        ]
    },
    {
        "id": "075d773fe41dce15",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1200,
        "wires": []
    },
    {
        "id": "5a17f977f1edf18c",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$sift(obj, fun)",
        "func": "// $sift(object, function)\n// The function that is supplied must have the following signature:\n// function(value [, key [, object]])\n\nconst data = {\n    \"Customer1\": {\n        \"CustomerID\": 12345,\n        \"Name\": \"Billy Bob\",\n        \"Model\": \"Y\",\n    },\n    \"Employee1\": {\n        \"EmployeeID\": 24680,\n        \"Name\": \"Fred Rock\",\n        \"Model\": \"3\",\n    },\n    \"Employee2\": {\n        \"EmployeeID\": 13579,\n        \"Name\": \"Ash Luis\",\n        \"Model\": \"S\",\n    },\n    \"Customer2\": {\n        \"CustomerID\": 54321,\n        \"Name\": \"Amber Daniels\",\n        \"Model\": \"X\",\n    },\n    \"Customer3\": {\n        \"CustomerID\": 98765,\n        \"Name\": \"April Star\",\n        \"Model\": \"3\",\n    },\n};\n\n// Returns an object that contains only the key/value pairs from the object parameter\n// that satisfy the predicate function passed in as the second parameter.\n// If object is not specified, then the context value is used as the value of object.\nconst expression = [\n    jsonata(\"$sift(function($v, $k) {$k ~> /^Customer/})\"),\n    jsonata(\"$sift(function($v, $k) {$k ~> /^Employee/})\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 1000,
        "wires": [
            [
                "a5735d1081eb0e76"
            ]
        ]
    },
    {
        "id": "34523c9d6f3be4d5",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1000,
        "wires": [
            [
                "5a17f977f1edf18c"
            ]
        ]
    },
    {
        "id": "a5735d1081eb0e76",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d0675dd556e8ccd3",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$each(obj, fun)",
        "func": "// $each(object, function)\n// function(value, name)\n\nconst data = {\n    \"Customer1\": {\n        \"CustomerID\": 12345,\n        \"Name\": \"Billy Bob\",\n        \"Model\": \"Y\",\n    },\n    \"Employee1\": {\n        \"EmployeeID\": 24680,\n        \"Name\": \"Fred Rock\",\n        \"Model\": \"3\",\n    },\n    \"Employee2\": {\n        \"EmployeeID\": 13579,\n        \"Name\": \"Ash Luis\",\n        \"Model\": \"S\",\n    },\n    \"Customer2\": {\n        \"CustomerID\": 54321,\n        \"Name\": \"Amber Daniels\",\n        \"Model\": \"X\",\n    },\n    \"Customer3\": {\n        \"CustomerID\": 98765,\n        \"Name\": \"April Star\",\n        \"Model\": \"3\",\n    },\n};\n\n// Returns an array of the values return by the function\n// when applied to each key/value pair in the object.\nconst expression = [\n    jsonata(\"$each(function($v, $k) {$k & ': ' & $v})\"),\n    jsonata(\"$each(function($v, $k) {$k})\"),\n    jsonata(\"$each(function($v, $k) {$v})\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 1040,
        "wires": [
            [
                "9df1aa0f7557ef67"
            ]
        ]
    },
    {
        "id": "fcee703f7f0dad09",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1040,
        "wires": [
            [
                "d0675dd556e8ccd3"
            ]
        ]
    },
    {
        "id": "9df1aa0f7557ef67",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1040,
        "wires": []
    },
    {
        "id": "fd67870234c311fc",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$error(mes)",
        "func": "// $error(message)\n\n// HACKY WORKAROUND for message parameter to be usable\nnode.error(jsonata(\"$error('Error 12345')\").ast().arguments[0].value);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 1080,
        "wires": [
            [
                "91e67fc371abd56f"
            ]
        ]
    },
    {
        "id": "c1aba1f2fb4642e5",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1080,
        "wires": [
            [
                "fd67870234c311fc"
            ]
        ]
    },
    {
        "id": "91e67fc371abd56f",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1080,
        "wires": []
    },
    {
        "id": "d76d1e54150cd3b8",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 730,
        "y": 1120,
        "wires": [
            [
                "ac14d99250bbcd5d"
            ]
        ]
    },
    {
        "id": "56ef7e70a1f1e4ba",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 730,
        "y": 1160,
        "wires": [
            [
                "ac14d99250bbcd5d"
            ]
        ]
    },
    {
        "id": "ff7236162a78dcae",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1140,
        "wires": []
    },
    {
        "id": "ac14d99250bbcd5d",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$assert(con, mes)",
        "func": "// $assert(condition, message)\n\n// If condition is true, the function returns { \"payload\": \"assertation is true\" }.\n// If condition is false, an error is thrown, with the message as the message of the error.\nmsg.payload = jsonata(`$assert(${msg.payload} % 2 = 0, \"Number must be even\")`);\n\n// HACKY WORKAROUND for message parameter to be usable\n// 'if condition' must be relevant to 'assert condition'\nif (msg.payload.ast().arguments[0].lhs.lhs.value % 2 == 0) return { \"payload\": \"assertation is true\" };\nelse node.error(`${msg.payload.ast().arguments[1].value}`);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 1140,
        "wires": [
            [
                "ff7236162a78dcae"
            ]
        ]
    },
    {
        "id": "6708898f07c01758",
        "type": "comment",
        "z": "48d8e346d91d5802",
        "name": "This flow requires the npm module jsonata",
        "info": "run 'npm i jsonata' from your .node-red directory\nand set functionExternalModules to true in your settings.js file",
        "x": 800,
        "y": 40,
        "wires": []
    }
]