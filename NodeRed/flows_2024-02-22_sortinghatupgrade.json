[
    {
        "id": "a3f9d1c29dc65a55",
        "type": "tab",
        "label": "System Control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f4235684f17b062e",
        "type": "tab",
        "label": "MQTT Sorting Hat",
        "disabled": false,
        "info": "Receive MQTT packets\r\n  - listen for announce and LWT messages\r\n  - negotiate incoming data format (CSVtoJSON)\r\n  - negotiate packet reporting intervals\r\n    - initially accept board defaults\r\n    - but allow for pushing commands to update intervals\r\nProcess MQTT packets\r\n  - CSVtoJSON\r\n  - link out to individual flows for \r\n    error checking and processing\r\nBroadcast outgoing:\r\n  - commands\r\n  - queries",
        "env": []
    },
    {
        "id": "278117c520153245",
        "type": "tab",
        "label": "Node Tracker",
        "disabled": false,
        "info": "{\r\n  \"557c87\": {\r\n    \"ip\": \"192.168.1.2\",\r\n    \"function\": 8,\r\n    \"totalmsgcnt\": 2048,\r\n    \"datamsgcnt\": 1800,\r\n    \"lastmsgrcvd\": 1708352501,\r\n    \"lastdatamsgrcvd\": 11345533765,\r\n    \"wifilast\": -42,\r\n    \"wifiavg\": -49\r\n  },\r\n  \"557c88\": {\r\n    \"ip\": \"192.168.1.8\",\r\n    \"function\": 0,\r\n    \"totalmsgcnt\": 127,\r\n    \"datamsgcnt\": 120,\r\n    \"lastmsgrcvd\": 1708352300,\r\n    \"lastdatamsgrcvd\": 1708352300,\r\n    \"wifilast\": -47,\r\n    \"wifiavg\": -45\r\n  },\r\n  \"557c89\": {\r\n    \"ip\": \"192.168.1.9\",\r\n    \"function\": 1,\r\n    \"totalmsgcnt\": 12,\r\n    \"datamsgcnt\": 11,\r\n    \"lastmsgrcvd\": 1708322004,\r\n    \"lastdatamsgrcvd\": 1708322004,\r\n    \"wifilast\": -42,\r\n    \"diag\": {\r\n      \"wifiavg\": -48,\r\n      \"cnt_missed_data_report\": 0,\r\n      \"missed_data_report\": [\r\n        1708322004,\r\n        1708322500\r\n      ]\r\n    },\r\n    \"physlayout\": {\r\n      \"title\": \"pallet spinner\",\r\n      \"movement\": \"stationary\",\r\n      \"orientation\": \"vertical\"\r\n    },\r\n    \"commands\": {\r\n      \"reboot\": {\r\n        \"format\": \"boolean\",\r\n        \"default\": false\r\n      },\r\n      \"setmqtt\": {\r\n        \"format\": \"string\",\r\n        \"default\": \"192.168.1.6\",\r\n        \"currval\": \"192.168.1.6\"\r\n      },\r\n      \"setSLP\": {\r\n        \"format\": \"integer\",\r\n        \"default\": 101325,\r\n        \"unit\": \"Pa\",\r\n        \"currval\": 101340,\r\n        \"min\": 30000,\r\n        \"max\": 120000\r\n      },\r\n      \"setreportint\": {\r\n        \"format\": \"integer\",\r\n        \"default\": 2000,\r\n        \"unit\": \"msec\",\r\n        \"currval\": 1500,\r\n        \"min\": 500,\r\n        \"max\": 7200000\r\n      }\r\n    }\r\n  }\r\n}",
        "env": []
    },
    {
        "id": "fb9d04a3a6c581c3",
        "type": "tab",
        "label": "Node Corrective Actions",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eb746c4729c4813b",
        "type": "tab",
        "label": "Master Display",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1adadc614d57da99",
        "type": "tab",
        "label": "Sensor IO",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f0b4407fe9f47f93",
        "type": "tab",
        "label": "Data Recording",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4d79f821c7bfa7e5",
        "type": "tab",
        "label": "UDP Autodiscovery",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "555b7e6ec5d6387b",
        "type": "tab",
        "label": "Simulated Inputs",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ef09b2ee949083c7",
        "type": "tab",
        "label": "Experimental",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "48d8e346d91d5802",
        "type": "tab",
        "label": "JSONata Functions",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "f26cadb4.8799",
        "type": "subflow",
        "name": "sbInstance",
        "info": "",
        "category": "Statusbar",
        "in": [
            {
                "x": 80,
                "y": 220,
                "wires": [
                    {
                        "id": "7f2d69a2.b1d518"
                    },
                    {
                        "id": "cb4138c8.c95ff8"
                    },
                    {
                        "id": "88992bb4.2d2cc8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 140,
                "wires": [
                    {
                        "id": "4586ffa0.c1826",
                        "port": 0
                    },
                    {
                        "id": "8dc5c81f.94e8c8",
                        "port": 0
                    },
                    {
                        "id": "d0265645.ccf6c8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99",
        "inputLabels": [
            "template"
        ],
        "outputLabels": [
            "connect event "
        ],
        "icon": "node-red-dashboard/ui_dropdown.png",
        "status": {
            "x": 480,
            "y": 340,
            "wires": [
                {
                    "id": "88992bb4.2d2cc8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "d7cbba22.e16798",
        "type": "subflow",
        "name": "sbPolling",
        "info": "# Statusbar UI State Polling\n\nThis subflow is required to translate any event of dashborad ui_widgets into an event that can be used to trigger an upadte of a statusbar widget. Pollingis ugly but it works. ",
        "category": "Statusbar",
        "in": [
            {
                "x": 100,
                "y": 80,
                "wires": [
                    {
                        "id": "6c9938ae.4d1ac8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 220,
                "wires": [
                    {
                        "id": "c2097870.61ee98",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99",
        "inputLabels": [
            "ui event"
        ],
        "outputLabels": [
            "sbWidget event"
        ],
        "icon": "font-awesome/fa-circle-o-notch",
        "status": {
            "x": 1080,
            "y": 300,
            "wires": [
                {
                    "id": "25e06a0c.648e76",
                    "port": 0
                },
                {
                    "id": "fc47f9a0.1b2708",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "31710161af1f85fc",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata Aggregation functions",
        "style": {
            "label": true
        },
        "nodes": [
            "b6f144760c8c2ac0",
            "4b3e82218503d28a",
            "a2ed76e51d9d45d4",
            "124bdd42fad50ccc",
            "f00555d99d713808",
            "95b7b4d1463f8ba2",
            "76ab1b459ad7557d",
            "133de034e18f2e08",
            "9895cc964f49ae00",
            "f06124c947a5414c",
            "27ae951f78f80e9f",
            "64bf6cca123277d6"
        ],
        "x": 634,
        "y": 59
    },
    {
        "id": "3f2375f314164a1d",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata Numeric functions",
        "style": {
            "label": true
        },
        "nodes": [
            "8daced1e49b8e444",
            "d7445651ceb1befb",
            "0c47d4e5f41185ff",
            "2915de67bb436aec",
            "f816ab6ce130373d",
            "40cd56ab50d99edd",
            "3c64a396557c2169",
            "42412dbf82022ed6",
            "be9e933624cfc9b9",
            "506c5164d419415a",
            "bd4e27a24441e29a",
            "78ed3050cffbee5f",
            "a092319ec2068dcb",
            "0efc16b8ad0a4a06",
            "4fa5326a67572fba",
            "3d892df51ef07041",
            "d8cc71bf7a1cef6e",
            "a9f54d592da16259",
            "c211cee8f26830fb",
            "3f468cb3641e5db2",
            "9129250d27e12100",
            "35468424f2a1649a",
            "1a901ddcf487d332",
            "6deec1748014b6c6",
            "6a945003fb6a19fe",
            "354dc0515a3a8c0c",
            "19592f83ca197954",
            "e96d13cd9c516780",
            "1caa81e91f5593bd",
            "6536ce65bd593f2a",
            "5b35e2d318a492ab",
            "fd6e660561b21348",
            "ced7657e6cdca47c",
            "c277731a9bcd97b7",
            "9e58844dd14dc104",
            "92e8c4c7ae1a5c67"
        ],
        "x": 14,
        "y": 939
    },
    {
        "id": "5858953d941e2128",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata String functions",
        "style": {
            "label": true
        },
        "nodes": [
            "0f7cc1cbf53be959",
            "89305a8bf17ce1f4",
            "7b9707e1fdb83b97",
            "33eb18d77c98742f",
            "2b10b22d75bb2d81",
            "97b05ca3aea965ff",
            "574029ce9d53b3e7",
            "0f406e4fb437596e",
            "4552c8db8906bd64",
            "5fc0599c484f2382",
            "61eacfc6b05617af",
            "d7b47f2422eb5d41",
            "d12bb701c54a51b7",
            "25da3fbb5cb8a783",
            "bc87e57a88fd8fc9",
            "79f3a0a75f765aa5",
            "5263c4f5189e5eaf",
            "f03d559a1b4ecf37",
            "f831e7e54c6df875",
            "efb7f178ed1f6b26",
            "03cebea42a679530",
            "27aa670fc69b45b7",
            "5f0de1517502ca39",
            "36e9a2f036e7334b",
            "015750733b48bc64",
            "588e07e3dad2b766",
            "bf6925f53b4c8570",
            "dd525c51d46d0aa4",
            "4bb01a6c30ef2a92",
            "a804fb7a5d6a7527",
            "71db1766621ddda7",
            "0de1a0ecc422ca10",
            "7d39f8ccd7f440b3",
            "fac1cb69ad143cb4",
            "89ef93936b21b4ad",
            "6df09440e2cbde59",
            "641205e3cba124d0",
            "ce0842f09f2f02d2",
            "d3b13f915c0880b6",
            "ca02b214332083a0",
            "8badc54fd86df382",
            "8e676426b4739885",
            "20f4bdaa2161ecf0",
            "69862f023088276f",
            "1bbcc63008b599b9",
            "56c89da93c4f8598",
            "5f8e98fada3e3b8c",
            "77a88f7b8594f51e",
            "6e3b43a0f645b2f6",
            "ea1117ddd2426699",
            "ada30cde655edd22",
            "e67d10e3347c9ea9",
            "0fadee83063f1cdd",
            "1ae55c36c954c2d7",
            "a90c1da2e38eb6be",
            "146b75b897bffc80",
            "638f4c5e1eb3ad2d",
            "960107f6763ef6cd",
            "1eda0eb06ded6d9c",
            "97dfea39009105fc",
            "87b33a10e6f432eb",
            "b125cb399a064b5a",
            "637455e25b5e5d1d"
        ],
        "x": 14,
        "y": 39
    },
    {
        "id": "d2e1279b5fd4575d",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata Boolean functions",
        "style": {
            "label": true
        },
        "nodes": [
            "38427db96b1421b0",
            "75c0bd910867dc25",
            "abbe1949232a4942",
            "7f8b843350a69ff0",
            "fbb036fc259bc29a",
            "ab2f2d7a863331b5",
            "8b5fca3b78b019b4",
            "5d9f7b44f2096d0a",
            "dffaf66f56b66b7d"
        ],
        "x": 634,
        "y": 279
    },
    {
        "id": "39b2b5c54232ba3c",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata Array functions",
        "style": {
            "label": true
        },
        "nodes": [
            "1e76e97f96460298",
            "8c521273427ab262",
            "31477f70de39ad61",
            "e49f68a0f36889d6",
            "d32c6167e83986e2",
            "78aca9737c826606",
            "54d5f9cd3c6bf6c0",
            "2234f7ae697a3770",
            "7db3d73f20c5a22a",
            "9a29918bf56cf115",
            "c7c0d71d5016220c",
            "9d70686ae7347700",
            "75d52d47a71233cd",
            "f11869a6d78d66ab",
            "bc71d90bd9775450",
            "99ea95ba592024e3",
            "f3a96c864130a773",
            "b19f7f7a070d3036",
            "96ddc88c25af6454",
            "48342adfa3e091c2",
            "702df9610cf8c931"
        ],
        "x": 634,
        "y": 459
    },
    {
        "id": "3bde9eecc5de0d0d",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata Date/Time functions",
        "style": {
            "label": true
        },
        "nodes": [
            "a423604384b85a61",
            "b649c9e548e52ea6",
            "e1989374d8a86617",
            "7e4537ec98fc0f86",
            "b571e34201ce4301",
            "e18a31afb52a37ad",
            "0850c6f82df14da0",
            "f3564e25cdf6ad3a",
            "5a72be02a7063415",
            "8a6b6c123b69c249",
            "7934417554ab4fca",
            "5743a08375473c86"
        ],
        "x": 634,
        "y": 1259
    },
    {
        "id": "a5b3f3f40f8cdfee",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata Higher order functions",
        "style": {
            "label": true
        },
        "nodes": [
            "bb7a943e8d73a2ee",
            "cb19fabf590bf8a1",
            "2f81648ac0a0dea6",
            "fa2e2c09eaccd887",
            "0a4e2fdb7c155b17",
            "cf842de86d95cf61",
            "0d3fa93f582f57cf",
            "078f7f9446b4018c",
            "6e4a6618668b68c7",
            "3b70c2ca565463f0",
            "e90f56bfc1a1f01a",
            "291158397d7b6794"
        ],
        "x": 1254,
        "y": 59
    },
    {
        "id": "c864efbb6ecdebca",
        "type": "group",
        "z": "48d8e346d91d5802",
        "name": "JSONata Object functions",
        "style": {
            "label": true
        },
        "nodes": [
            "154385cc7d38b19f",
            "0f2d1fb515a787ac",
            "6878dca73600cf5f",
            "b18ce2580dbec5df",
            "d85e15ea98982fb9",
            "88d530abb1a21311",
            "db06b0dde05b4382",
            "98ca6d42e968fa07",
            "f60f4884133da1db",
            "07ccc749b4918554",
            "77e37e87b4f128b7",
            "0a7c053c61e212d5",
            "b70fb99db7d136f1",
            "bc4b6a167433f525",
            "075d773fe41dce15",
            "5a17f977f1edf18c",
            "34523c9d6f3be4d5",
            "a5735d1081eb0e76",
            "d0675dd556e8ccd3",
            "fcee703f7f0dad09",
            "9df1aa0f7557ef67",
            "fd67870234c311fc",
            "c1aba1f2fb4642e5",
            "91e67fc371abd56f",
            "d76d1e54150cd3b8",
            "56ef7e70a1f1e4ba",
            "ff7236162a78dcae",
            "ac14d99250bbcd5d"
        ],
        "x": 634,
        "y": 799
    },
    {
        "id": "3410615f3b6dc27b",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "YYYY/MM/DD",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "2fce7cb011bd49b7",
        "type": "mqtt-broker",
        "name": "",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0b0ef72495ea76b7",
        "type": "ui_tab",
        "name": "Sensors",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4788da44ae885d26",
        "type": "ui_group",
        "name": "Compass Control",
        "tab": "0b0ef72495ea76b7",
        "order": 4,
        "disp": true,
        "width": 6,
        "collapse": true,
        "className": ""
    },
    {
        "id": "cd57f6c083b36098",
        "type": "ui_group",
        "name": "Compass Data",
        "tab": "0b0ef72495ea76b7",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "11e3eb0c2dee2914",
        "type": "ui_group",
        "name": "MASTER DISPLAY",
        "tab": "0b0ef72495ea76b7",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dc3b3657261041d5",
        "type": "ui_group",
        "name": "HIDE ME",
        "tab": "0b0ef72495ea76b7",
        "order": 9,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b7a68ba52d89cce6",
        "type": "ui_group",
        "name": "File I/O",
        "tab": "0b0ef72495ea76b7",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "5ebcfd99175f8777",
        "type": "ui_tab",
        "name": "System Control",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bd4bbe08bdec7c63",
        "type": "ui_group",
        "name": "Control",
        "tab": "5ebcfd99175f8777",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "368a548923a9a211",
        "type": "ui_group",
        "name": "HIDE ME",
        "tab": "5ebcfd99175f8777",
        "order": 3,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ad7b609b1a6f9c2e",
        "type": "ui_spacer",
        "z": "eb746c4729c4813b",
        "name": "spacer",
        "group": "368a548923a9a211",
        "order": 4,
        "width": 3,
        "height": 1
    },
    {
        "id": "9ad53e0e62e39b88",
        "type": "mqtt-broker",
        "name": "",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3fc1c323cecc5e37",
        "type": "ui_group",
        "name": "PalletSpinner",
        "tab": "0b0ef72495ea76b7",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "d560ad2316caa4f9",
        "type": "ui_group",
        "name": "SNR",
        "tab": "0b0ef72495ea76b7",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "ae6e4ee5ad35f1fc",
        "type": "ui_group",
        "name": "SNR-RadarPlot",
        "tab": "0b0ef72495ea76b7",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "18a767c1.885738",
        "type": "ui_group",
        "name": "Default",
        "tab": "60a46907.5b1978",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "60a46907.5b1978",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c57ed009d9586555",
        "type": "ui_group",
        "name": "System Charts",
        "tab": "5ebcfd99175f8777",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "8e78dbfb930b87f5",
        "type": "ui_spacer",
        "z": "278117c520153245",
        "name": "spacer",
        "group": "11e3eb0c2dee2914",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "8234992f9bdfbbe9",
        "type": "ui_spacer",
        "z": "278117c520153245",
        "name": "spacer",
        "group": "11e3eb0c2dee2914",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "d2b04da00ffa6cd7",
        "type": "ui_spacer",
        "z": "278117c520153245",
        "name": "spacer",
        "group": "4788da44ae885d26",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "cdcd499fa4116d94",
        "type": "ui_spacer",
        "z": "278117c520153245",
        "name": "spacer",
        "group": "dc3b3657261041d5",
        "order": 4,
        "width": 3,
        "height": 1
    },
    {
        "id": "3c5da821.6d5638",
        "type": "ui_group",
        "name": "Two dimension Array",
        "tab": "f9ac9e91.20e588",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f9ac9e91.20e588",
        "type": "ui_tab",
        "name": "Table Examples",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "8dc5c81f.94e8c8",
        "type": "ui_template",
        "z": "f26cadb4.8799",
        "group": "18a767c1.885738",
        "name": "other",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "x": 430,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "7f2d69a2.b1d518",
        "type": "switch",
        "z": "f26cadb4.8799",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "init",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 220,
        "wires": [
            [
                "d0265645.ccf6c8"
            ],
            [
                "8dc5c81f.94e8c8"
            ]
        ]
    },
    {
        "id": "d0265645.ccf6c8",
        "type": "ui_template",
        "z": "f26cadb4.8799",
        "group": "18a767c1.885738",
        "name": "init",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "x": 430,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "cb4138c8.c95ff8",
        "type": "ui_ui_control",
        "z": "f26cadb4.8799",
        "name": "",
        "events": "all",
        "x": 240,
        "y": 80,
        "wires": [
            [
                "4586ffa0.c1826"
            ]
        ]
    },
    {
        "id": "88992bb4.2d2cc8",
        "type": "trigger",
        "z": "f26cadb4.8799",
        "name": "",
        "op1": "ON",
        "op2": "OFF",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 320,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "4586ffa0.c1826",
        "type": "switch",
        "z": "f26cadb4.8799",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connect",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "6c9938ae.4d1ac8",
        "type": "change",
        "z": "d7cbba22.e16798",
        "name": "state variable",
        "rules": [
            {
                "t": "set",
                "p": "state_var",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1834cc63.3e0b24",
        "type": "inject",
        "z": "d7cbba22.e16798",
        "name": "polling",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "num"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "0.5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "num",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "e22c352d.21cb28"
            ]
        ]
    },
    {
        "id": "e22c352d.21cb28",
        "type": "function",
        "z": "d7cbba22.e16798",
        "name": "get state variable",
        "func": "msg.payload = flow.get(\"state_var\")||0;\nmsg.topic = \"update\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 220,
        "wires": [
            [
                "c2097870.61ee98"
            ]
        ]
    },
    {
        "id": "c2097870.61ee98",
        "type": "rbe",
        "z": "d7cbba22.e16798",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "db981e13.7d1e1"
            ]
        ]
    },
    {
        "id": "25e06a0c.648e76",
        "type": "function",
        "z": "d7cbba22.e16798",
        "name": "green",
        "func": "msg.payload = {\n    fill:\"green\",\n    shape:\"dot\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "f7d44620.827af8",
        "type": "switch",
        "z": "d7cbba22.e16798",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 320,
        "wires": [
            [
                "25e06a0c.648e76"
            ],
            [
                "fc47f9a0.1b2708"
            ]
        ]
    },
    {
        "id": "db981e13.7d1e1",
        "type": "trigger",
        "z": "d7cbba22.e16798",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "250",
        "extend": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 680,
        "y": 320,
        "wires": [
            [
                "f7d44620.827af8"
            ]
        ]
    },
    {
        "id": "fc47f9a0.1b2708",
        "type": "function",
        "z": "d7cbba22.e16798",
        "name": "off",
        "func": "msg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "b6cbbf22.71cac",
        "type": "comment",
        "z": "d7cbba22.e16798",
        "name": "get the state variable at 2Hz",
        "info": "",
        "x": 200,
        "y": 180,
        "wires": []
    },
    {
        "id": "1ad0d2a1.9e91bd",
        "type": "comment",
        "z": "d7cbba22.e16798",
        "name": "set the state variable",
        "info": "",
        "x": 170,
        "y": 40,
        "wires": []
    },
    {
        "id": "72b11ce870c301f9",
        "type": "exec",
        "z": "a3f9d1c29dc65a55",
        "command": "sudo ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 590,
        "y": 300,
        "wires": [
            [
                "adf5fc5b59e23fc0"
            ],
            [
                "a8b389aaca664ce0"
            ],
            [
                "4126f246a83ebe10"
            ]
        ]
    },
    {
        "id": "adf5fc5b59e23fc0",
        "type": "debug",
        "z": "a3f9d1c29dc65a55",
        "name": "std output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 260,
        "wires": []
    },
    {
        "id": "a8b389aaca664ce0",
        "type": "debug",
        "z": "a3f9d1c29dc65a55",
        "name": "std error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 300,
        "wires": []
    },
    {
        "id": "4126f246a83ebe10",
        "type": "debug",
        "z": "a3f9d1c29dc65a55",
        "name": "return code",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 340,
        "wires": []
    },
    {
        "id": "3f7fe10a005f914f",
        "type": "ui_button",
        "z": "a3f9d1c29dc65a55",
        "name": "",
        "group": "bd4bbe08bdec7c63",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "SHUTDOWN",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "shutdown now",
        "payloadType": "str",
        "topic": "systemcontrol",
        "topicType": "str",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "d084094eccc754c8"
            ]
        ]
    },
    {
        "id": "879baeabd0605a41",
        "type": "ui_button",
        "z": "a3f9d1c29dc65a55",
        "name": "",
        "group": "bd4bbe08bdec7c63",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "REBOOT",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "reboot now",
        "payloadType": "str",
        "topic": "systemcontrol",
        "topicType": "str",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "ac6da18b6ea10b9d",
                "38c370bcf908e26d"
            ]
        ]
    },
    {
        "id": "1f1fb32036c8e72b",
        "type": "ui_button",
        "z": "a3f9d1c29dc65a55",
        "name": "",
        "group": "bd4bbe08bdec7c63",
        "order": 2,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Restart Node Red",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "node-red restart",
        "payloadType": "str",
        "topic": "systemcontrol",
        "topicType": "str",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "3efe02e3e959ae0a"
            ]
        ]
    },
    {
        "id": "da94649cccd63f44",
        "type": "ui_button",
        "z": "a3f9d1c29dc65a55",
        "name": "",
        "group": "bd4bbe08bdec7c63",
        "order": 1,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Disable IPv6",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "sysctl -w net.ipv6.conf.default.disable_ipv6=1",
        "payloadType": "str",
        "topic": "systemcontrol",
        "topicType": "str",
        "x": 350,
        "y": 360,
        "wires": [
            [
                "72b11ce870c301f9"
            ]
        ]
    },
    {
        "id": "ac6da18b6ea10b9d",
        "type": "ui_are_you_sure",
        "z": "a3f9d1c29dc65a55",
        "name": "rebootprompt",
        "group": "368a548923a9a211",
        "iconColor": "#ffcc00",
        "textColor": "#ffffff",
        "backgroundColor": "#000000",
        "icon": "fa fa-exclamation-triangle",
        "title": "CONFIRM REBOOT",
        "description": "Are you sure you want to reboot the system?",
        "timeoutSec": "60",
        "x": 350,
        "y": 280,
        "wires": [
            [
                "72b11ce870c301f9",
                "99a4e8fb4c2711b6"
            ],
            [
                "9e498f69d18fc045"
            ]
        ]
    },
    {
        "id": "d084094eccc754c8",
        "type": "ui_are_you_sure",
        "z": "a3f9d1c29dc65a55",
        "name": "shutdownprompt",
        "group": "368a548923a9a211",
        "iconColor": "#ffcc00",
        "textColor": "#ffffff",
        "backgroundColor": "#000000",
        "icon": "fa fa-exclamation-triangle",
        "title": "CONFIRM SHUTDOWN",
        "description": "Are you sure you want to shutdown the system?",
        "timeoutSec": "60",
        "x": 330,
        "y": 240,
        "wires": [
            [
                "72b11ce870c301f9"
            ],
            []
        ]
    },
    {
        "id": "3efe02e3e959ae0a",
        "type": "ui_are_you_sure",
        "z": "a3f9d1c29dc65a55",
        "name": "restartnoderedprompt",
        "group": "368a548923a9a211",
        "iconColor": "#ffcc00",
        "textColor": "#ffffff",
        "backgroundColor": "#000000",
        "icon": "fa fa-exclamation-triangle",
        "title": "CONFIRM NODE RED RESTART",
        "description": "Are you sure you want to restart the Node Red daemon?",
        "timeoutSec": "60",
        "x": 320,
        "y": 320,
        "wires": [
            [
                "72b11ce870c301f9"
            ],
            []
        ]
    },
    {
        "id": "38c370bcf908e26d",
        "type": "debug",
        "z": "a3f9d1c29dc65a55",
        "name": "std output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 180,
        "wires": []
    },
    {
        "id": "99a4e8fb4c2711b6",
        "type": "debug",
        "z": "a3f9d1c29dc65a55",
        "name": "std output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 200,
        "wires": []
    },
    {
        "id": "9e498f69d18fc045",
        "type": "debug",
        "z": "a3f9d1c29dc65a55",
        "name": "std output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 240,
        "wires": []
    },
    {
        "id": "e44375475937436b",
        "type": "exec",
        "z": "a3f9d1c29dc65a55",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 630,
        "y": 580,
        "wires": [
            [
                "76146e55c5910b11",
                "6820e573601d9bef"
            ],
            [
                "2cba5f6444371ff9"
            ],
            [
                "e27a295bae033d81"
            ]
        ]
    },
    {
        "id": "76146e55c5910b11",
        "type": "debug",
        "z": "a3f9d1c29dc65a55",
        "name": "std output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 500,
        "wires": []
    },
    {
        "id": "2cba5f6444371ff9",
        "type": "debug",
        "z": "a3f9d1c29dc65a55",
        "name": "std error",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 600,
        "wires": []
    },
    {
        "id": "e27a295bae033d81",
        "type": "debug",
        "z": "a3f9d1c29dc65a55",
        "name": "return code",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 640,
        "wires": []
    },
    {
        "id": "deab1ab1fac6ecc0",
        "type": "ui_button",
        "z": "a3f9d1c29dc65a55",
        "name": "",
        "group": "bd4bbe08bdec7c63",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": true,
        "label": "NodeRed Proc Load",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "ps -C node-red -eo cmd,%mem,%cpu,bsdstart,bsdtime | grep \"node-red\"",
        "payloadType": "str",
        "topic": "systemcontrol",
        "topicType": "str",
        "x": 460,
        "y": 580,
        "wires": [
            [
                "e44375475937436b"
            ]
        ]
    },
    {
        "id": "6820e573601d9bef",
        "type": "csv",
        "z": "a3f9d1c29dc65a55",
        "name": "",
        "sep": " ",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 770,
        "y": 560,
        "wires": [
            [
                "e3c6a6bb10513a63"
            ]
        ]
    },
    {
        "id": "f520fa4b009ab9d6",
        "type": "debug",
        "z": "a3f9d1c29dc65a55",
        "name": "std output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 500,
        "wires": []
    },
    {
        "id": "e3c6a6bb10513a63",
        "type": "switch",
        "z": "a3f9d1c29dc65a55",
        "name": "",
        "property": "payload.col1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "node-red",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 890,
        "y": 560,
        "wires": [
            [
                "f6dc71bb0be966a4"
            ]
        ]
    },
    {
        "id": "f6dc71bb0be966a4",
        "type": "change",
        "z": "a3f9d1c29dc65a55",
        "name": "labelcolumns",
        "rules": [
            {
                "t": "move",
                "p": "payload.col1",
                "pt": "msg",
                "to": "payload.processname",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.col21",
                "pt": "msg",
                "to": "payload.mempercusage",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.col23",
                "pt": "msg",
                "to": "payload.currcpuload",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.col25",
                "pt": "msg",
                "to": "payload.starttime",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.col28",
                "pt": "msg",
                "to": "payload.cpuruntime",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 560,
        "wires": [
            [
                "f520fa4b009ab9d6",
                "bdd467cde1321985",
                "d586350585103004"
            ]
        ]
    },
    {
        "id": "284359a299a3b2cc",
        "type": "ui_chart",
        "z": "a3f9d1c29dc65a55",
        "name": "",
        "group": "c57ed009d9586555",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "cpuload",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "100",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1340,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "bdd467cde1321985",
        "type": "change",
        "z": "a3f9d1c29dc65a55",
        "name": "cpuload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.currcpuload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 540,
        "wires": [
            [
                "284359a299a3b2cc",
                "2b9b1eefe1c85271"
            ]
        ]
    },
    {
        "id": "d586350585103004",
        "type": "change",
        "z": "a3f9d1c29dc65a55",
        "name": "memload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.mempercusage",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 580,
        "wires": [
            [
                "5db7e65078786d2c",
                "96c298aa7b2a5661"
            ]
        ]
    },
    {
        "id": "5db7e65078786d2c",
        "type": "ui_chart",
        "z": "a3f9d1c29dc65a55",
        "name": "",
        "group": "c57ed009d9586555",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "memload",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "100",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1340,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "efe783df1b4b5585",
        "type": "trigger",
        "z": "a3f9d1c29dc65a55",
        "name": "every 1s",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "pay",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "OFF",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 260,
        "y": 580,
        "wires": [
            [
                "deab1ab1fac6ecc0"
            ]
        ]
    },
    {
        "id": "407a070517ffede6",
        "type": "ui_switch",
        "z": "a3f9d1c29dc65a55",
        "name": "",
        "label": "System Stats",
        "tooltip": "",
        "group": "c57ed009d9586555",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "sysstat",
        "topicType": "str",
        "style": "",
        "onvalue": "ON",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "OFF",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 110,
        "y": 580,
        "wires": [
            [
                "efe783df1b4b5585"
            ]
        ]
    },
    {
        "id": "2b9b1eefe1c85271",
        "type": "switch",
        "z": "a3f9d1c29dc65a55",
        "name": "cpu over 25%",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "25",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 820,
        "y": 720,
        "wires": [
            [
                "9aeff6161cf8916d",
                "d3286fd2a07d7f73"
            ]
        ]
    },
    {
        "id": "cd11bc115065d992",
        "type": "ui_template",
        "z": "a3f9d1c29dc65a55",
        "group": "368a548923a9a211",
        "name": "switch",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "var status = {{msg.payload}};",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1130,
        "y": 740,
        "wires": [
            [
                "7db5d1b818c2c40f"
            ]
        ]
    },
    {
        "id": "7c95113f15ec9b4c",
        "type": "inject",
        "z": "a3f9d1c29dc65a55",
        "name": "1 minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 620,
        "wires": [
            [
                "deab1ab1fac6ecc0"
            ]
        ]
    },
    {
        "id": "9aeff6161cf8916d",
        "type": "change",
        "z": "a3f9d1c29dc65a55",
        "name": "switch",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 740,
        "wires": [
            [
                "945ab0c665827a5d"
            ]
        ]
    },
    {
        "id": "945ab0c665827a5d",
        "type": "debug",
        "z": "a3f9d1c29dc65a55",
        "name": "std output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 700,
        "wires": []
    },
    {
        "id": "7db5d1b818c2c40f",
        "type": "ui_ui_control",
        "z": "a3f9d1c29dc65a55",
        "name": "",
        "x": 1300,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "96c298aa7b2a5661",
        "type": "switch",
        "z": "a3f9d1c29dc65a55",
        "name": "mem over 50%",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "50",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 820,
        "y": 760,
        "wires": [
            [
                "9aeff6161cf8916d",
                "dbd57a4cf53d568a"
            ]
        ]
    },
    {
        "id": "56b0193a2e8afef5",
        "type": "ui_toast",
        "z": "a3f9d1c29dc65a55",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1170,
        "y": 780,
        "wires": []
    },
    {
        "id": "dbd57a4cf53d568a",
        "type": "change",
        "z": "a3f9d1c29dc65a55",
        "name": "alert",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Memory usage high",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 780,
        "wires": [
            [
                "56b0193a2e8afef5"
            ]
        ]
    },
    {
        "id": "d3286fd2a07d7f73",
        "type": "change",
        "z": "a3f9d1c29dc65a55",
        "name": "alert",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "CPU load high",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 700,
        "wires": [
            [
                "7803d63b46a0c5c9"
            ]
        ]
    },
    {
        "id": "7803d63b46a0c5c9",
        "type": "ui_toast",
        "z": "a3f9d1c29dc65a55",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1170,
        "y": 660,
        "wires": []
    },
    {
        "id": "b2a793bc7f9d5899",
        "type": "link out",
        "z": "f4235684f17b062e",
        "name": "JSON_RemoteBMP_Raw",
        "mode": "link",
        "links": [],
        "x": 1105,
        "y": 520,
        "wires": []
    },
    {
        "id": "d6c0b0a80b39a147",
        "type": "link out",
        "z": "f4235684f17b062e",
        "name": "JSON_Azimuth_Raw",
        "mode": "link",
        "links": [],
        "x": 575,
        "y": 600,
        "wires": []
    },
    {
        "id": "8d06843379c6e8c8",
        "type": "mqtt in",
        "z": "f4235684f17b062e",
        "name": "",
        "topic": "node/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "2fce7cb011bd49b7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 580,
        "wires": [
            [
                "b7668d5cbc7099ab",
                "271c4ccd7ced308b"
            ]
        ]
    },
    {
        "id": "271c4ccd7ced308b",
        "type": "switch",
        "z": "f4235684f17b062e",
        "name": "Sort by topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "node/data",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "node/ponyexpress",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "node/azimuth",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "node/temppress",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 230,
        "y": 580,
        "wires": [
            [
                "7141139e71ca0db1"
            ],
            [
                "89bd515676facdec"
            ],
            [
                "7f2364c011d90b06"
            ],
            [],
            []
        ],
        "inputLabels": [
            "all JSON"
        ],
        "outputLabels": [
            "data",
            "packet",
            "azimuth",
            "temppress",
            "all others"
        ]
    },
    {
        "id": "b7668d5cbc7099ab",
        "type": "debug",
        "z": "f4235684f17b062e",
        "name": "node/#",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "_topic",
        "statusType": "msg",
        "x": 210,
        "y": 660,
        "wires": []
    },
    {
        "id": "7f2364c011d90b06",
        "type": "csv",
        "z": "f4235684f17b062e",
        "name": "AzimuthParser",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "Azimuthmillis,Azimuth,MagnetStr",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 440,
        "y": 600,
        "wires": [
            [
                "d6c0b0a80b39a147"
            ]
        ]
    },
    {
        "id": "ebb4013108104e1f",
        "type": "ui_text",
        "z": "f4235684f17b062e",
        "group": "4788da44ae885d26",
        "order": 9,
        "width": 6,
        "height": 5,
        "name": "",
        "label": "Readout",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 910,
        "y": 680,
        "wires": []
    },
    {
        "id": "5a56c85432f3f128",
        "type": "link out",
        "z": "f4235684f17b062e",
        "name": "JSON_Compass_Raw",
        "mode": "link",
        "links": [
            "352bec218510accb"
        ],
        "x": 1105,
        "y": 480,
        "wires": []
    },
    {
        "id": "dc6ab63af43593d6",
        "type": "debug",
        "z": "f4235684f17b062e",
        "name": "NO MATCH FOUND",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 640,
        "wires": []
    },
    {
        "id": "f591b4df13e236fc",
        "type": "inject",
        "z": "f4235684f17b062e",
        "name": "Packet V2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "H,2FSK,4ED836B2,1F7173A8,RESP,3557,12,7,34.1,3.255,-22,-89,2017,4,24,17,29,23,38.3304,-77.02568",
        "payloadType": "str",
        "x": 140,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "090aea128c583d20",
        "type": "inject",
        "z": "f4235684f17b062e",
        "name": "Packet V1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "H,2FSK,4ED836B2,1F7173A8,RESP,3557,12,7,34.1,3.255,-22,-89,2017,4,24,17,29,23,38.3304,-77.02568",
        "payloadType": "str",
        "x": 140,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "1d63afa563028eef",
        "type": "link out",
        "z": "f4235684f17b062e",
        "name": "V_0_0_6 Header",
        "mode": "link",
        "links": [
            "03320f2801868628",
            "6cf059a672f02aa7",
            "9076d14c6648ceb0"
        ],
        "x": 685,
        "y": 380,
        "wires": []
    },
    {
        "id": "403e94d2b8f9dfa4",
        "type": "switch",
        "z": "f4235684f17b062e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "PacketData",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "xMC5883",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "BMP280",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "MPU6050",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "AS6500",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 710,
        "y": 540,
        "wires": [
            [
                "96cdc1f51fbf0771"
            ],
            [
                "092a9bf777346ffd"
            ],
            [
                "7cddd7bb0732d03c"
            ],
            [
                "2e84c18d7c1c074c"
            ],
            [
                "425e1dcfe1a76428"
            ],
            [
                "dc6ab63af43593d6"
            ]
        ],
        "outputLabels": [
            "PacketRcvd",
            "xMC5883",
            "BMP280",
            "MPU6050",
            "AS6500",
            "NO MATCH"
        ]
    },
    {
        "id": "2e84c18d7c1c074c",
        "type": "change",
        "z": "f4235684f17b062e",
        "name": "Round MPU6050 data",
        "rules": [
            {
                "t": "set",
                "p": "payload.MPU6050.gyroX",
                "pt": "msg",
                "to": "$round($number(payload.MPU6050.gyroX), 4)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.MPU6050.gyroY",
                "pt": "msg",
                "to": "$round($number(payload.MPU6050.gyroY), 4)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.MPU6050.gyroZ",
                "pt": "msg",
                "to": "$round($number(payload.MPU6050.gyroZ), 4)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.MPU6050.Xaccel",
                "pt": "msg",
                "to": "$round($number(payload.MPU6050.Xaccel), 4)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.MPU6050.Yaccel",
                "pt": "msg",
                "to": "$round($number(payload.MPU6050.Yaccel), 4)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.MPU6050.Zaccel",
                "pt": "msg",
                "to": "$round($number(payload.MPU6050.Zaccel), 4)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.MPU6050.temperature",
                "pt": "msg",
                "to": "$round($number(payload.MPU6050.temperature), 2)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 560,
        "wires": [
            [
                "3a82eed78b7e1a25"
            ]
        ]
    },
    {
        "id": "425e1dcfe1a76428",
        "type": "change",
        "z": "f4235684f17b062e",
        "name": "Round AS6500 data",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 600,
        "wires": [
            [
                "8806369f72e658f0"
            ]
        ]
    },
    {
        "id": "8806369f72e658f0",
        "type": "debug",
        "z": "f4235684f17b062e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 600,
        "wires": []
    },
    {
        "id": "7141139e71ca0db1",
        "type": "json",
        "z": "f4235684f17b062e",
        "name": "Parser",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 410,
        "y": 520,
        "wires": [
            [
                "91dfd21dd5d87fba",
                "5713b87793b518d7"
            ]
        ]
    },
    {
        "id": "5713b87793b518d7",
        "type": "change",
        "z": "f4235684f17b062e",
        "name": "header only",
        "rules": [
            {
                "t": "delete",
                "p": "payload.data",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 500,
        "wires": [
            [
                "1d63afa563028eef"
            ]
        ]
    },
    {
        "id": "91dfd21dd5d87fba",
        "type": "change",
        "z": "f4235684f17b062e",
        "name": "data only",
        "rules": [
            {
                "t": "set",
                "p": "sender",
                "pt": "msg",
                "to": "payload.sender",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "time",
                "pt": "msg",
                "to": "payload.time",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "msgcount",
                "pt": "msg",
                "to": "payload.msgcount",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 540,
        "wires": [
            [
                "403e94d2b8f9dfa4"
            ]
        ]
    },
    {
        "id": "fac16a77677fd3fe",
        "type": "csv",
        "z": "f4235684f17b062e",
        "name": "Packet Parser",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "Loc,4300PacketNum,GroupID,UnitID,TempC,Voltage,RcvNoise,RcvRSSI,LastRSSI,LastNoise,GPS",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 1220,
        "y": 820,
        "wires": [
            [
                "cb445f6e40ea7d3f"
            ]
        ]
    },
    {
        "id": "cb445f6e40ea7d3f",
        "type": "link out",
        "z": "f4235684f17b062e",
        "name": "JSON_HealthPacket_Raw",
        "mode": "link",
        "links": [],
        "x": 1345,
        "y": 820,
        "wires": []
    },
    {
        "id": "8539829c1126fbe7",
        "type": "link in",
        "z": "f4235684f17b062e",
        "name": "KevinPacketV1",
        "links": [
            "89bd515676facdec",
            "3a072449c3a3534c"
        ],
        "x": 1095,
        "y": 820,
        "wires": [
            [
                "fac16a77677fd3fe"
            ]
        ]
    },
    {
        "id": "89bd515676facdec",
        "type": "link out",
        "z": "f4235684f17b062e",
        "name": "KevinPacketV1",
        "mode": "link",
        "links": [
            "8539829c1126fbe7"
        ],
        "x": 375,
        "y": 560,
        "wires": []
    },
    {
        "id": "3a072449c3a3534c",
        "type": "link out",
        "z": "f4235684f17b062e",
        "name": "KevinPacketV1",
        "mode": "link",
        "links": [
            "8539829c1126fbe7"
        ],
        "x": 1105,
        "y": 440,
        "wires": []
    },
    {
        "id": "96cdc1f51fbf0771",
        "type": "change",
        "z": "f4235684f17b062e",
        "name": "Extract Payload Data",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.PacketData",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 440,
        "wires": [
            [
                "3a072449c3a3534c"
            ]
        ]
    },
    {
        "id": "092a9bf777346ffd",
        "type": "change",
        "z": "f4235684f17b062e",
        "name": "Round xMC5883 data",
        "rules": [
            {
                "t": "set",
                "p": "payload.xMC5883.heading",
                "pt": "msg",
                "to": "$round(payload.xMC5883.heading, 1)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 480,
        "wires": [
            [
                "5a56c85432f3f128"
            ]
        ]
    },
    {
        "id": "7cddd7bb0732d03c",
        "type": "change",
        "z": "f4235684f17b062e",
        "name": "Round BMP280 data",
        "rules": [
            {
                "t": "set",
                "p": "payload.BMP280.pressure",
                "pt": "msg",
                "to": "$round(payload.BMP280.pressure, 2)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.BMP280.temperature",
                "pt": "msg",
                "to": "$round(payload.BMP280.temperature, 1)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.BMP280.altitude",
                "pt": "msg",
                "to": "$round(payload.BMP280.altitude, 1)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 520,
        "wires": [
            [
                "b2a793bc7f9d5899"
            ]
        ]
    },
    {
        "id": "3a82eed78b7e1a25",
        "type": "link out",
        "z": "f4235684f17b062e",
        "name": "JSON_MPU6050_Raw",
        "mode": "link",
        "links": [],
        "x": 1105,
        "y": 560,
        "wires": []
    },
    {
        "id": "2d4bf5dd18ff4c52",
        "type": "mqtt in",
        "z": "278117c520153245",
        "name": "",
        "topic": "base/announce",
        "qos": "2",
        "datatype": "auto",
        "broker": "2fce7cb011bd49b7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 120,
        "wires": [
            [
                "e81c7795da628234"
            ]
        ]
    },
    {
        "id": "9076d14c6648ceb0",
        "type": "link in",
        "z": "278117c520153245",
        "name": "V_0_0_7 Header",
        "links": [
            "1d63afa563028eef"
        ],
        "x": 425,
        "y": 200,
        "wires": [
            [
                "61cd58378a24ddc4",
                "7f20495af6b0e61e"
            ]
        ]
    },
    {
        "id": "bf5f7ab2fd201ef7",
        "type": "link out",
        "z": "278117c520153245",
        "name": "NewNode_need commandlist and diag",
        "mode": "link",
        "links": [],
        "x": 935,
        "y": 200,
        "wires": []
    },
    {
        "id": "416e71f80dfcaa4e",
        "type": "function",
        "z": "278117c520153245",
        "name": "update nodeobject from payload",
        "func": "// need to divide child nodes into sections: \n// trackers, diagnostics, config, etc\n\nvar nodeid = msg.payload.sender;\nvar firstseen = global.get(\"g_currenttime\");\nvar nodelist = global.get(\"nodeobject\");\nvar nodepayload = {};\nnodepayload.firstseen = firstseen;\nnodepayload.version = msg.payload.payload.version;\nnodepayload.function = msg.payload.payload.function;\nnodepayload.commandtopic = msg.payload.payload.commandtopic;\nnodepayload.wifiavg = 0;\nnodepayload.datamsgcnt = 0;\nnodepayload.totalmsgcnt = 0;\nnodepayload.missedpacketcnt = 0;\nnodepayload.missedconseccnt = 0;\nnodepayload.mystatus = \"ONLINE\";\nvar newnode = {[nodeid]:nodepayload};\nnodelist[nodeid] = nodepayload;\n// WHY is the global context being updated WITHOUT global.set?\n// global.set(\"nodeobject\",nodelist);  \n//msg.payload = nodelist;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 180,
        "wires": [
            [
                "729f97e574db4e36"
            ]
        ]
    },
    {
        "id": "5dd1939e6853fd93",
        "type": "inject",
        "z": "278117c520153245",
        "name": "initialize",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "x",
        "payloadType": "str",
        "x": 1010,
        "y": 80,
        "wires": [
            [
                "670e169d8c7e5e24"
            ]
        ]
    },
    {
        "id": "670e169d8c7e5e24",
        "type": "function",
        "z": "278117c520153245",
        "name": "prefilled example",
        "func": "var nodes  = {\"557c86\":{\"ip\":\"192.168.1.2\",\"function\":8,\"totalmsgcnt\":2048,\"firstseen\":1708352501,\"datamsgcnt\":1800,\"lastmsgrcvd\":1708352501,\"lastdatamsgrcvd\":11345533765,\"wifilast\":-42,\"wifiavg\":-49},\"557c88\":{\"ip\":\"192.168.1.8\",\"function\":0,\"totalmsgcnt\":127,\"datamsgcnt\":120,\"firstseen\":1708351701,\"lastmsgrcvd\":1708352300,\"lastdatamsgrcvd\":1708352300,\"wifilast\":-47,\"wifiavg\":-45}};\nglobal.set(\"nodeobject\",nodes);\nnode.warn(nodes);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "61cd58378a24ddc4",
        "type": "switch",
        "z": "278117c520153245",
        "name": "",
        "property": "nodeobject",
        "propertyType": "global",
        "rules": [
            {
                "t": "hask",
                "v": "payload.sender",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 160,
        "wires": [
            [
                "729f97e574db4e36"
            ],
            [
                "416e71f80dfcaa4e"
            ]
        ],
        "outputLabels": [
            "Already tracking",
            "New node"
        ]
    },
    {
        "id": "729f97e574db4e36",
        "type": "function",
        "z": "278117c520153245",
        "name": "update stats",
        "func": "// form a string with the child object of nodeobject\nvar id = \"nodeobject.\" + msg.payload.sender;\n// perform a global.get based on that string to only \n// retrieve a portion of the nodeobject\nvar targetnode = global.get(id);\nvar currtime = global.get(\"g_currenttime\");\ntargetnode.lastmsgrcvd = currtime;\ntargetnode.lastmsgcount = msg.payload.msgcount;\ntargetnode.wifilast = Number(msg.payload.wificurr);\nvar temp = targetnode.wifiavg * targetnode.totalmsgcnt + targetnode.wifilast;\ntemp = temp / (targetnode.totalmsgcnt + 1);\ntargetnode.wifiavg = Math.round(temp);\n// how are we incrementing datamsgcnt & totalmsgcnt?\ntargetnode.datamsgcnt += 1;\ntargetnode.totalmsgcnt += 1;\ntargetnode.sender = msg.payload.sender;\nmsg.payload = targetnode;\nglobal.set(id, targetnode);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 140,
        "wires": [
            [
                "aa076027466f4398"
            ]
        ]
    },
    {
        "id": "f819c08a3629708d",
        "type": "comment",
        "z": "278117c520153245",
        "name": "autotrigger diagnostics message and complete node info",
        "info": "NEED commandlist, ip, commandtopic, diag, software version, function, etc",
        "x": 1090,
        "y": 220,
        "wires": []
    },
    {
        "id": "b3c2d31d28428ed2",
        "type": "debug",
        "z": "278117c520153245",
        "name": "passthrough",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload.sender",
        "statusType": "msg",
        "x": 250,
        "y": 480,
        "wires": []
    },
    {
        "id": "a66e92306aebe4aa",
        "type": "function",
        "z": "278117c520153245",
        "name": "tabula rasa",
        "func": "var nodeobject = {};\nglobal.set(\"nodeobject\",nodeobject);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "ab5194bedd9d5de1",
        "type": "inject",
        "z": "278117c520153245",
        "name": "initialize",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "x",
        "payloadType": "str",
        "x": 1010,
        "y": 40,
        "wires": [
            [
                "a66e92306aebe4aa"
            ]
        ]
    },
    {
        "id": "e81c7795da628234",
        "type": "json",
        "z": "278117c520153245",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 120,
        "wires": [
            [
                "7e883fbfde3a047f"
            ]
        ]
    },
    {
        "id": "7e883fbfde3a047f",
        "type": "json",
        "z": "278117c520153245",
        "name": "",
        "property": "payload.payload",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 120,
        "wires": [
            [
                "61cd58378a24ddc4"
            ]
        ]
    },
    {
        "id": "7f20495af6b0e61e",
        "type": "debug",
        "z": "278117c520153245",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 280,
        "wires": []
    },
    {
        "id": "aa076027466f4398",
        "type": "link out",
        "z": "278117c520153245",
        "name": "Updated Header",
        "mode": "link",
        "links": [
            "a7dbd4568e7a2fe9"
        ],
        "x": 1115,
        "y": 140,
        "wires": []
    },
    {
        "id": "a7dbd4568e7a2fe9",
        "type": "link in",
        "z": "278117c520153245",
        "name": "Updated Header",
        "links": [
            "aa076027466f4398"
        ],
        "x": 95,
        "y": 540,
        "wires": [
            [
                "b3c2d31d28428ed2"
            ]
        ]
    },
    {
        "id": "9512cfa2f50339b8",
        "type": "function",
        "z": "278117c520153245",
        "name": "update stats",
        "func": "// form a string with the child object of nodeobject\nvar id = \"nodeobject.\" + msg.payload.sender;\n// perform a global.get based on that string to only \n// retrieve a portion of the nodeobject\nvar targetnode = global.get(id);\nvar currtime = global.get(\"g_currenttime\");\ntargetnode.lastmsgrcvd = currtime;\ntargetnode.lastmsgcount = msg.payload.msgcount;\ntargetnode.wifilast = Number(msg.payload.wificurr);\nvar temp = targetnode.wifiavg * targetnode.totalmsgcnt + targetnode.wifilast;\ntemp = temp / (targetnode.totalmsgcnt + 1);\ntargetnode.wifiavg = Math.round(temp);\n// how are we incrementing datamsgcnt & totalmsgcnt?\ntargetnode.datamsgcnt += 1;\ntargetnode.totalmsgcnt += 1;\ntargetnode.sender = msg.payload.sender;\nvar lastpacketnum = msg.payload.lastmsgcount;\nvar currpacketnum = Number(msg.payload.msgcount);\nif (currpacketnum != lastpacketnum + 1) {\n    node.status({text:currpacketnum + \" \" + lastpacketnum})\n    targetnode.missedpacketcnt += 1;\n    targetnode.currpacketnum;\n    // need to build on this to determine if multiple consecutive\n    // missed messages => OFFLINE message\n}\ntargetnode.lastmsgcount = currpacketnum;\nmsg.payload = targetnode;\nglobal.set(id, targetnode);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "f2c5c97ca15cfced",
        "type": "function",
        "z": "278117c520153245",
        "name": "Force NTP Resync?",
        "func": "var nodetime = msg.payload.time;\nvar currtime = global.get(\"g_currenttime\")/1000;\ncurrtime = Math.floor(currtime);\nvar timediff = currtime-nodetime;\nvar sender = msg.payload.sender;\nvar assembledpayload;\nvar maxtimelag = 30;\nif (timediff < -5 || timediff > maxtimelag) {\n  var topic = \"node/\" + sender;\n  msg.topic = topic;\n  assembledpayload = '{\"command\":\"ntpresync\",\"value\":\"true\",\"sender\":\"';\n  assembledpayload+= 'nodered\",\"time\":\"' + currtime + '\"}';\n  msg.payload = assembledpayload;\n  node.status({fill:\"red\",text:timediff});\n  return msg;\n} else {\n  assembledpayload = sender + \" no more than \" + maxtimelag+\"secs behind\";\n  node.status({fill:\"green\",text:assembledpayload});\n  // and don't return a message so nothing gets transmitted\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 240,
        "wires": [
            [
                "f97c668598c4c6e4"
            ]
        ]
    },
    {
        "id": "61efcfe2a7a98cc8",
        "type": "mqtt out",
        "z": "278117c520153245",
        "name": "Send Command",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2fce7cb011bd49b7",
        "x": 1360,
        "y": 240,
        "wires": []
    },
    {
        "id": "f97c668598c4c6e4",
        "type": "trigger",
        "z": "278117c520153245",
        "name": "5sec lockout",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1170,
        "y": 240,
        "wires": [
            [
                "61efcfe2a7a98cc8"
            ]
        ]
    },
    {
        "id": "17d71a82ab709e18",
        "type": "function",
        "z": "fb9d04a3a6c581c3",
        "name": "Force NTP Resync?",
        "func": "var nodetime = msg.payload.time;\nvar currtime = global.get(\"g_currenttime\")/1000;\ncurrtime = Math.floor(currtime);\nvar timediff = currtime-nodetime;\nvar sender = msg.payload.sender;\nvar assembledpayload;\nvar maxtimelag = 30;\nif (timediff < -5 || timediff > maxtimelag) {\n  var topic = \"node/\" + sender;\n  msg.topic = topic;\n  assembledpayload = '{\"command\":\"ntpresync\",\"value\":\"true\",\"sender\":\"';\n  assembledpayload+= 'nodered\",\"time\":\"' + currtime + '\"}';\n  msg.payload = assembledpayload;\n  node.status({fill:\"red\",text:timediff});\n  return msg;\n} else {\n  assembledpayload = sender + \" no more than \" + maxtimelag+\"secs behind\";\n  node.status({fill:\"green\",text:assembledpayload});\n  // and don't return a message so nothing gets transmitted\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 180,
        "wires": [
            [
                "6e8fbbf27f645007"
            ]
        ]
    },
    {
        "id": "6e8fbbf27f645007",
        "type": "trigger",
        "z": "fb9d04a3a6c581c3",
        "name": "5sec lockout",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "5",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 690,
        "y": 180,
        "wires": [
            [
                "4e15bf8c8b271f17",
                "af4637febc77d100"
            ]
        ]
    },
    {
        "id": "4e15bf8c8b271f17",
        "type": "mqtt out",
        "z": "fb9d04a3a6c581c3",
        "name": "Send Command",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2fce7cb011bd49b7",
        "x": 940,
        "y": 140,
        "wires": []
    },
    {
        "id": "03320f2801868628",
        "type": "link in",
        "z": "fb9d04a3a6c581c3",
        "name": "V_0_0_6 Header",
        "links": [
            "1d63afa563028eef"
        ],
        "x": 205,
        "y": 180,
        "wires": [
            [
                "17d71a82ab709e18"
            ]
        ]
    },
    {
        "id": "af4637febc77d100",
        "type": "debug",
        "z": "fb9d04a3a6c581c3",
        "name": "NTP Resync Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "msg",
        "x": 960,
        "y": 200,
        "wires": []
    },
    {
        "id": "07d0adac4c049a06",
        "type": "rbe",
        "z": "fb9d04a3a6c581c3",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 390,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "da8a0a9f8a5725fd",
        "type": "function",
        "z": "fb9d04a3a6c581c3",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "9929f23055e4c553",
        "type": "inject",
        "z": "eb746c4729c4813b",
        "name": "current time",
        "props": [
            {
                "p": "msg.payload.time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 720,
        "y": 180,
        "wires": [
            [
                "4942e9cba25b7cd9",
                "04b5a01b62208ccd"
            ]
        ]
    },
    {
        "id": "6dc7aca57cf35c2d",
        "type": "ui_text",
        "z": "eb746c4729c4813b",
        "group": "11e3eb0c2dee2914",
        "order": 4,
        "width": 2,
        "height": 1,
        "name": "STATUS",
        "label": "",
        "format": "{{payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1300,
        "y": 280,
        "wires": []
    },
    {
        "id": "5890b780fa8bd654",
        "type": "ui_button",
        "z": "eb746c4729c4813b",
        "name": "",
        "group": "11e3eb0c2dee2914",
        "order": 2,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "START",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "START",
        "payloadType": "str",
        "topic": "recordingcontrol",
        "topicType": "str",
        "x": 400,
        "y": 200,
        "wires": [
            [
                "828f769dd1270337",
                "19316da193c048de",
                "399a6fa491842b79"
            ]
        ]
    },
    {
        "id": "daf3606b52adbb7e",
        "type": "ui_button",
        "z": "eb746c4729c4813b",
        "name": "",
        "group": "11e3eb0c2dee2914",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "STOP",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "STOP",
        "payloadType": "str",
        "topic": "recordingcontrol",
        "topicType": "str",
        "x": 250,
        "y": 320,
        "wires": [
            [
                "4342d6f1ab1a84cd"
            ]
        ]
    },
    {
        "id": "e502cac41022dfa2",
        "type": "function",
        "z": "eb746c4729c4813b",
        "name": "Runtime",
        "func": "var starttime = flow.get(\"teststarttime\");\nvar currtime = msg.payload.time;\nvar runtime = (currtime - starttime) / 1000;\nvar remainder = 0;\nvar days = Math.floor(runtime / (60 * 60 * 24));\nif (days == 0) {\n    remainder = runtime;\n} else {\n    remainder = runtime % days;\n}\nvar hours = Math.floor(remainder / (60 * 60));\nif (hours == 0) {\n    remainder = runtime;\n} else {\n    remainder = runtime % hours;\n}\nvar minutes = Math.floor(remainder / (60));\nif (minutes == 0) {\n    remainder = runtime;\n} else {\n    remainder = runtime % minutes;\n}\nvar seconds = Math.floor(remainder);\nvar formattedTime = days+\"d \"+hours+\"h \"+minutes+\"m \"+seconds+\"s\";\nmsg.payload = formattedTime;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 220,
        "wires": [
            [
                "d9142d717aa8e096"
            ]
        ]
    },
    {
        "id": "d9142d717aa8e096",
        "type": "ui_text",
        "z": "eb746c4729c4813b",
        "group": "11e3eb0c2dee2914",
        "order": 1,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "ELAPSED",
        "format": "{{payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1310,
        "y": 220,
        "wires": []
    },
    {
        "id": "4942e9cba25b7cd9",
        "type": "q-gate",
        "z": "eb746c4729c4813b",
        "name": "recording gate",
        "controlTopic": "recordingcontrol",
        "defaultState": "closed",
        "openCmd": "START",
        "closeCmd": "STOP",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": false,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 980,
        "y": 220,
        "wires": [
            [
                "e502cac41022dfa2"
            ]
        ]
    },
    {
        "id": "2dbafed285a8c1a1",
        "type": "function",
        "z": "eb746c4729c4813b",
        "name": "Set Start Time",
        "func": "let msginput = msg.payload;\nvar currtime = global.get(\"g_currenttime\") || 0;\nnode.status({text:msginput});\nif (msginput === \"START\") {\n  flow.set(\"teststarttime\",currtime);\n}\nmsg.payload = msginput;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 260,
        "wires": [
            [
                "4942e9cba25b7cd9",
                "6dc7aca57cf35c2d"
            ]
        ]
    },
    {
        "id": "4342d6f1ab1a84cd",
        "type": "ui_are_you_sure",
        "z": "eb746c4729c4813b",
        "name": "stopprompt",
        "group": "dc3b3657261041d5",
        "iconColor": "#ffcc00",
        "textColor": "#ffffff",
        "backgroundColor": "#000000",
        "icon": "fa fa-exclamation-triangle",
        "title": "STOP RECORDING",
        "description": "Are you sure you want to stop recording data?",
        "timeoutSec": "60",
        "x": 390,
        "y": 320,
        "wires": [
            [
                "828f769dd1270337",
                "5f8379490588856f",
                "d473a018d0be0b7c"
            ],
            []
        ]
    },
    {
        "id": "828f769dd1270337",
        "type": "function",
        "z": "eb746c4729c4813b",
        "name": "join",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 260,
        "wires": [
            [
                "2dbafed285a8c1a1",
                "f60ecc23e744d99b"
            ]
        ],
        "icon": "node-red/join.svg"
    },
    {
        "id": "f60ecc23e744d99b",
        "type": "link out",
        "z": "eb746c4729c4813b",
        "name": "teststatus",
        "mode": "link",
        "links": [
            "1adef04a61d395d9",
            "82b60100d318e9c9"
        ],
        "x": 715,
        "y": 320,
        "wires": []
    },
    {
        "id": "19316da193c048de",
        "type": "change",
        "z": "eb746c4729c4813b",
        "name": "disable",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 100,
        "wires": [
            [
                "ddf6d3136f083bd6"
            ]
        ]
    },
    {
        "id": "399a6fa491842b79",
        "type": "change",
        "z": "eb746c4729c4813b",
        "name": "enable",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 140,
        "wires": [
            [
                "d451d7b7a848f358"
            ]
        ]
    },
    {
        "id": "5f8379490588856f",
        "type": "change",
        "z": "eb746c4729c4813b",
        "name": "disable",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 420,
        "wires": [
            [
                "cee535f3a5468122"
            ]
        ]
    },
    {
        "id": "d473a018d0be0b7c",
        "type": "change",
        "z": "eb746c4729c4813b",
        "name": "enable",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 380,
        "wires": [
            [
                "99e055f8f7359f07"
            ]
        ]
    },
    {
        "id": "ddf6d3136f083bd6",
        "type": "link out",
        "z": "eb746c4729c4813b",
        "name": "startdisablesignal",
        "mode": "link",
        "links": [
            "b0c9df281f380983",
            "ce0a480d8214a8af",
            "9064f9f5fd97fa2d",
            "f170f5985199868a",
            "2d47d40f016f1df8",
            "b2f998c820f5777a",
            "2244b160ccf0839d",
            "db8ba2b5aa4029e9",
            "7e8899d80a8aa97f",
            "16a6fa0b2450d604",
            "0933d58f68f00f95"
        ],
        "x": 705,
        "y": 100,
        "wires": []
    },
    {
        "id": "cee535f3a5468122",
        "type": "link out",
        "z": "eb746c4729c4813b",
        "name": "stopdisablesignal",
        "mode": "link",
        "links": [
            "c8540407d1e6ac98",
            "d981950f36c0eb1f"
        ],
        "x": 725,
        "y": 420,
        "wires": []
    },
    {
        "id": "99e055f8f7359f07",
        "type": "link out",
        "z": "eb746c4729c4813b",
        "name": "stopenablesignal",
        "mode": "link",
        "links": [
            "cdeaf50ebb459a53",
            "9804c14155814e0a",
            "40a51ade16f746f3",
            "2890af46c222f42c",
            "42f081ca34838bca",
            "4109827b3f0ce150",
            "f34421ef94daf75e",
            "42ca4707d4a229cd",
            "17e9b3ec4ea42b59",
            "bc23dca587d2ead3",
            "9256d2ce39e8b2df"
        ],
        "x": 725,
        "y": 380,
        "wires": []
    },
    {
        "id": "d451d7b7a848f358",
        "type": "link out",
        "z": "eb746c4729c4813b",
        "name": "startenablesignal",
        "mode": "link",
        "links": [
            "5d813b1f0b6aa4de",
            "25267f3a1c9ca0ec"
        ],
        "x": 705,
        "y": 140,
        "wires": []
    },
    {
        "id": "b0c9df281f380983",
        "type": "link in",
        "z": "eb746c4729c4813b",
        "name": "startdisable",
        "links": [
            "ddf6d3136f083bd6"
        ],
        "x": 295,
        "y": 180,
        "wires": [
            [
                "5890b780fa8bd654"
            ]
        ]
    },
    {
        "id": "c8540407d1e6ac98",
        "type": "link in",
        "z": "eb746c4729c4813b",
        "name": "stopdisable",
        "links": [
            "cee535f3a5468122"
        ],
        "x": 155,
        "y": 340,
        "wires": [
            [
                "daf3606b52adbb7e"
            ]
        ]
    },
    {
        "id": "5d813b1f0b6aa4de",
        "type": "link in",
        "z": "eb746c4729c4813b",
        "name": "startenable",
        "links": [
            "d451d7b7a848f358"
        ],
        "x": 155,
        "y": 300,
        "wires": [
            [
                "daf3606b52adbb7e"
            ]
        ]
    },
    {
        "id": "cdeaf50ebb459a53",
        "type": "link in",
        "z": "eb746c4729c4813b",
        "name": "stopenable",
        "links": [
            "99e055f8f7359f07"
        ],
        "x": 295,
        "y": 220,
        "wires": [
            [
                "5890b780fa8bd654"
            ]
        ]
    },
    {
        "id": "04b5a01b62208ccd",
        "type": "simpletime",
        "z": "eb746c4729c4813b",
        "name": "",
        "mydate": true,
        "myymd": true,
        "myyear": true,
        "mymonth": true,
        "mymonthn": true,
        "mydom": true,
        "mydoy": true,
        "myday": true,
        "myhourpm": true,
        "myhour": true,
        "mytime": true,
        "mytimes": true,
        "myminute": true,
        "myminutes": true,
        "mysecond": true,
        "mymillis": true,
        "myepoch": true,
        "myrawdate": true,
        "mypm": true,
        "x": 970,
        "y": 120,
        "wires": [
            [
                "52679671baa1ba6f",
                "653a8986dbe01352",
                "4b4aa1082f527a51"
            ]
        ]
    },
    {
        "id": "52679671baa1ba6f",
        "type": "debug",
        "z": "eb746c4729c4813b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 80,
        "wires": []
    },
    {
        "id": "653a8986dbe01352",
        "type": "change",
        "z": "eb746c4729c4813b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "myymd",
                "pt": "global",
                "to": "myymd",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "mytimes",
                "pt": "global",
                "to": "mytimes",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "g_currenttime",
                "pt": "global",
                "to": "payload.time",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4b4aa1082f527a51",
        "type": "function",
        "z": "eb746c4729c4813b",
        "name": "",
        "func": "var filenameDTG = msg.myymd+\"H\"+msg.myhour+\"M\"+msg.myminute+\"S\"+msg.mysecond;\nglobal.set(\"filenameDTG\",filenameDTG);\nvar humanDTG = msg.myymd+\" \"+msg.mytimes;\nglobal.set(\"humanDTG\",humanDTG);\nmsg.payload = humanDTG;\nnode.status({fill:\"green\",text:humanDTG});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "9b45e21d18cd5093",
        "type": "ui_template",
        "z": "eb746c4729c4813b",
        "d": true,
        "group": "bd4bbe08bdec7c63",
        "name": "Title Bar Clock and Text",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<script id=\"clockScript1\" type=\"text/javascript\">\n\nvar home = new Object();\nhome.payload = 'Home'; // This is the payload that goes out\n    \nvar theScope = scope;\nvar clockInterval;\n    \n$(function () {\n    if (clockInterval) return;\n    \n    //add clock\n    var divClock = $('<div />');\n    var p = $('<p />');\n    divClock.append(p);\n    divClock[0].style.margin = '15px';\n   \n    function addZero(i) {\n        if (i < 10) {\n            i = \"0\" + i\n        }\n        return i;\n    }\n\nfunction formatDate(date) {\n        var year = date.getFullYear();\n        var month = addZero(date.getMonth());\n        var day = date.getDate();\n        var hour = addZero(date.getHours());\n        var minute = addZero(date.getMinutes());\n        var second = addZero(date.getSeconds());\n        return year + '-' + month + '-' + day + ' ' + \" \" + hour +':' + minute + ':' + second;\n    }\n \n    function displayTime() {\n        p.text( formatDate( new Date() ) );\n    }\n    \n    clockInterval = setInterval(displayTime, 1000);\n    \n    // add Text\n    var divText = $('<div />');\n    var displaytext = \"PANOPTES\";\n    var t = document.createTextNode(displaytext); // <== add title here\n    divText.append(t)\n    divText[0].style.margin = '40px auto';\n    divText[0].style.size = '40';\n    \n    // add button\n    var divButton = $('<div />');\n    var button = document.createElement(\"BUTTON\");\n    var b = document.createTextNode(\"Home Screen\")\n    button.height=40;\n    button.width=40;\n    button.appendChild(b);\n    button.addEventListener(\"click\", doIT.bind(null,home));\n    divButton.append(button);\n    \n    //\n    // Add Button picture button\n    //\n    \n    //var divPicButton =$('<div />'); //old statement from forum.\n    var divPicButton = document.createElement (\"div\");\n    var btn_Home = document.createElement(\"BUTTON\");\n    btn_Home.setAttribute(\"class\", \"btnHome_class\");\n    \n    var pic = new Image();\n    pic.src = \"/Home1.png\"; // <== add path and filename of picture here\n    pic.height=40;\n    pic.width=40;\n    btn_Home.appendChild(pic);\n    pic.addEventListener(\"click\", doThis.bind(null,home));\n    divPicButton.append(btn_Home);\n        \n    //add to toolbar when it's available\n    var addToToolbarTimer;\n     \n    function addToToolbar() {\n    \n        var toolbar = $('.md-toolbar-tools');\n        if(!toolbar.length) return;\n    \n        // toolbar.append(divButton);\n        toolbar.append(divText);\n        toolbar.append(divClock);\n        //toolbar.append(divPicButton)\n        clearInterval(addToToolbarTimer);\n    }\n    \n    addToToolbarTimer = setInterval(addToToolbar, 100);\n    \n    function doIT(m){\n        theScope.send( m )\n    }\n\n    function doThis(m){\n        theScope.send( m )\n    }\n\n});\n    \n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 630,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "b76374f9970ba886",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "node/#",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "_topic",
        "statusType": "msg",
        "x": 230,
        "y": 440,
        "wires": []
    },
    {
        "id": "0c5563b603dfae5d",
        "type": "ui_gauge",
        "z": "1adadc614d57da99",
        "name": "heading",
        "group": "cd57f6c083b36098",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "compass",
        "title": "gauge",
        "label": "degrees",
        "format": "{{payload.payload.xMC5883.heading}}",
        "min": 0,
        "max": "360",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 720,
        "y": 100,
        "wires": []
    },
    {
        "id": "b190760e5ea219f4",
        "type": "comment",
        "z": "1adadc614d57da99",
        "name": "JSONATA to check for keys",
        "info": "[{\"id\":\"dd3930f9.05cc6\",\"type\":\"change\",\"z\":\"7760f563.ea0324\",\"name\":\"\",\"rules\":[{\"t\":\"set\",\"p\":\"payload\",\"pt\":\"msg\",\"to\":\"$each(\\t   payload,\\t   function($v, $i) {$v = \\\"\\\" ? {$i: false} : {$i: $v}}\\t)\",\"tot\":\"jsonata\"}],\"action\":\"\",\"property\":\"\",\"from\":\"\",\"to\":\"\",\"reg\":false,\"x\":510,\"y\":1320,\"wires\":[[\"d6d6a27b.5b5538\"]]},{\"id\":\"3c8ce754.fda3e\",\"type\":\"inject\",\"z\":\"7760f563.ea0324\",\"name\":\"\",\"props\":[{\"p\":\"payload\"},{\"p\":\"topic\",\"vt\":\"str\"}],\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"onceDelay\":0.1,\"topic\":\"\",\"payload\":\"{\\\"1\\\": true, \\\"2\\\": \\\"\\\", \\\"3\\\": false}\",\"payloadType\":\"json\",\"x\":320,\"y\":1320,\"wires\":[[\"dd3930f9.05cc6\"]]},{\"id\":\"d6d6a27b.5b5538\",\"type\":\"debug\",\"z\":\"7760f563.ea0324\",\"name\":\"\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"true\",\"targetType\":\"full\",\"statusVal\":\"\",\"statusType\":\"auto\",\"x\":710,\"y\":1320,\"wires\":[]}]",
        "x": 140,
        "y": 20,
        "wires": []
    },
    {
        "id": "fe362dc5f3c61117",
        "type": "comment",
        "z": "1adadc614d57da99",
        "name": "template node",
        "info": "[{\"id\":\"d5cc6037.6bc238\",\"type\":\"change\",\"z\":\"7760f563.ea0324\",\"name\":\"\",\"rules\":[{\"t\":\"set\",\"p\":\"payload\",\"pt\":\"msg\",\"to\":\"$count(\\t   $filter(\\t       $split(payload, \\\"\\\\n\\\"),\\t       function($v){$count($split($v,\\\"=\\\")) <= 1}\\t)\\t) < 2 ? payload : false \",\"tot\":\"jsonata\"}],\"action\":\"\",\"property\":\"\",\"from\":\"\",\"to\":\"\",\"reg\":false,\"x\":720,\"y\":1640,\"wires\":[[\"d6d6a27b.5b5538\"]]},{\"id\":\"e56da466.e65728\",\"type\":\"inject\",\"z\":\"7760f563.ea0324\",\"name\":\"\",\"props\":[{\"p\":\"payload\"},{\"p\":\"topic\",\"vt\":\"str\"}],\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"onceDelay\":0.1,\"topic\":\"\",\"payload\":\"[\\\"0x1\\\",\\\"0x67\\\",\\\"0x33\\\",\\\"0x1\\\",\\\"0x2\\\",\\\"0x68\\\",\\\"0x6e\\\"]\",\"payloadType\":\"json\",\"x\":310,\"y\":1640,\"wires\":[[\"4e82f442.bde2e4\"]]},{\"id\":\"4e82f442.bde2e4\",\"type\":\"template\",\"z\":\"7760f563.ea0324\",\"name\":\"\",\"field\":\"payload\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"[Session]\\nkey1=value1\\nkey2\\nkey3=\\nkey4=value4[EOF]\",\"output\":\"str\",\"x\":470,\"y\":1640,\"wires\":[[\"d5cc6037.6bc238\"]]},{\"id\":\"d6d6a27b.5b5538\",\"type\":\"debug\",\"z\":\"7760f563.ea0324\",\"name\":\"\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"true\",\"targetType\":\"full\",\"statusVal\":\"\",\"statusType\":\"auto\",\"x\":710,\"y\":1320,\"wires\":[]}]",
        "x": 90,
        "y": 60,
        "wires": []
    },
    {
        "id": "327c062c9e29b361",
        "type": "mqtt in",
        "z": "1adadc614d57da99",
        "name": "",
        "topic": "node/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "2fce7cb011bd49b7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 400,
        "wires": [
            [
                "86d40a5236d321de",
                "b76374f9970ba886"
            ]
        ]
    },
    {
        "id": "d264fca12369cd67",
        "type": "mqtt out",
        "z": "1adadc614d57da99",
        "name": "557c87",
        "topic": "node/557c87",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2fce7cb011bd49b7",
        "x": 1300,
        "y": 800,
        "wires": []
    },
    {
        "id": "566d870183c6c4b0",
        "type": "ui_button",
        "z": "1adadc614d57da99",
        "name": "",
        "group": "4788da44ae885d26",
        "order": 6,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "NTP",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"command\":\"ntpresync\",\"value\":\"true\"}",
        "payloadType": "str",
        "topic": "node/557c87",
        "topicType": "str",
        "x": 710,
        "y": 740,
        "wires": [
            [
                "d99b5b0c61d5cb46"
            ]
        ]
    },
    {
        "id": "90bc419c5c54171f",
        "type": "ui_button",
        "z": "1adadc614d57da99",
        "name": "",
        "group": "4788da44ae885d26",
        "order": 7,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Reboot",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"command\":\"reboot\",\"value\":\"true\"}",
        "payloadType": "json",
        "topic": "node/557c87",
        "topicType": "str",
        "x": 700,
        "y": 700,
        "wires": [
            [
                "8484bddc0d414807"
            ]
        ]
    },
    {
        "id": "05b64e46e64e0ac1",
        "type": "function",
        "z": "1adadc614d57da99",
        "name": "Format JSON",
        "func": "var reportint = msg.payload;\nvar currtime = global.get(\"g_currenttime\");\nvar sender = \"557c87\"; // msg.payload.sender\nvar assembledpayload;\nnode.status({fill:\"green\",text:reportint});\nif (reportint >= 500 && reportint < 259200000) {\n  var topic = \"node/\" + sender;\n  msg.topic = topic;\n  assembledpayload = '{\"command\":\"reportinterval\",\"value\":\"';\n  assembledpayload += reportint;\n  assembledpayload += '\",\"sender\":\"';\n  assembledpayload+= 'nodered\",\"time\":\"' + currtime + '\"}';\n  msg.payload = assembledpayload;\n  return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 620,
        "wires": [
            [
                "80143ff6b1cfde9b",
                "281ac4770d23f1d7"
            ]
        ]
    },
    {
        "id": "86d40a5236d321de",
        "type": "switch",
        "z": "1adadc614d57da99",
        "name": "Sort by topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "node/data",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "node/azimuth",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "node/ponyexpress",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 250,
        "y": 380,
        "wires": [
            [],
            [
                "d69acc3a45ea52f3"
            ],
            [
                "e62b6268c1546275"
            ],
            []
        ],
        "inputLabels": [
            "all JSON"
        ],
        "outputLabels": [
            "compass",
            "azimuth",
            "packet",
            "all others"
        ]
    },
    {
        "id": "66a6f90a05add99f",
        "type": "ui_button",
        "z": "1adadc614d57da99",
        "name": "",
        "group": "4788da44ae885d26",
        "order": 1,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Node Config",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"command\":\"reportconfig\",\"value\":\"true\"}",
        "payloadType": "json",
        "topic": "node/557c87",
        "topicType": "str",
        "x": 690,
        "y": 780,
        "wires": [
            [
                "d99b5b0c61d5cb46"
            ]
        ]
    },
    {
        "id": "82ef84eb1cfabae8",
        "type": "ui_button",
        "z": "1adadc614d57da99",
        "name": "",
        "group": "4788da44ae885d26",
        "order": 2,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Sensor Config",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"command\":\"sensorconfig\",\"value\":\"true\"}",
        "payloadType": "json",
        "topic": "node/557c87",
        "topicType": "str",
        "x": 680,
        "y": 820,
        "wires": [
            [
                "d99b5b0c61d5cb46"
            ]
        ]
    },
    {
        "id": "9699c03d4419abbf",
        "type": "ui_button",
        "z": "1adadc614d57da99",
        "name": "",
        "group": "4788da44ae885d26",
        "order": 3,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Stats",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"command\":\"reportdiagnostics\",\"value\":\"true\"}",
        "payloadType": "json",
        "topic": "node/557c87",
        "topicType": "str",
        "x": 710,
        "y": 860,
        "wires": [
            [
                "d99b5b0c61d5cb46"
            ]
        ]
    },
    {
        "id": "b9d1914775ff7992",
        "type": "ui_button",
        "z": "1adadc614d57da99",
        "name": "",
        "group": "4788da44ae885d26",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Reset Stats",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"command\":\"resetdiagnostics\",\"value\":\"true\"}",
        "payloadType": "json",
        "topic": "node/557c87",
        "topicType": "str",
        "x": 690,
        "y": 900,
        "wires": [
            [
                "a2138c7abf750430"
            ]
        ]
    },
    {
        "id": "d99b5b0c61d5cb46",
        "type": "change",
        "z": "1adadc614d57da99",
        "name": "net tie",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 800,
        "wires": [
            [
                "d264fca12369cd67"
            ]
        ]
    },
    {
        "id": "6e78c309d620edd2",
        "type": "ui_text_input",
        "z": "1adadc614d57da99",
        "name": "",
        "label": "Interval (msec)",
        "tooltip": "",
        "group": "4788da44ae885d26",
        "order": 4,
        "width": 4,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 680,
        "y": 620,
        "wires": [
            [
                "05b64e46e64e0ac1"
            ]
        ]
    },
    {
        "id": "8484bddc0d414807",
        "type": "ui_are_you_sure",
        "z": "1adadc614d57da99",
        "name": "stopprompt",
        "group": "dc3b3657261041d5",
        "iconColor": "#ffcc00",
        "textColor": "#ffffff",
        "backgroundColor": "#000000",
        "icon": "fa fa-exclamation-triangle",
        "title": "REBOOT NODE?",
        "description": "Are you sure you want to stop reboot the node?",
        "timeoutSec": "60",
        "x": 870,
        "y": 700,
        "wires": [
            [
                "d99b5b0c61d5cb46"
            ],
            []
        ]
    },
    {
        "id": "a2138c7abf750430",
        "type": "ui_are_you_sure",
        "z": "1adadc614d57da99",
        "name": "stopprompt",
        "group": "dc3b3657261041d5",
        "iconColor": "#ffcc00",
        "textColor": "#ffffff",
        "backgroundColor": "#000000",
        "icon": "fa fa-exclamation-triangle",
        "title": "RESET STATISTICS",
        "description": "Are you sure you want to reset statistics?",
        "timeoutSec": "60",
        "x": 870,
        "y": 900,
        "wires": [
            [
                "d99b5b0c61d5cb46"
            ],
            []
        ]
    },
    {
        "id": "46d2827f060ddbe9",
        "type": "change",
        "z": "1adadc614d57da99",
        "name": "Compass Cleanup",
        "rules": [
            {
                "t": "delete",
                "p": "payload.description",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.heading",
                "pt": "msg",
                "to": "payload.payload.xMC5883.heading",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload.payload",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.title",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.time",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.sender",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "compass",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$number(payload.heading)\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 340,
        "wires": [
            [
                "1d442a7ba19f074b",
                "bfc28c8e3a5e4d86"
            ]
        ]
    },
    {
        "id": "80143ff6b1cfde9b",
        "type": "mqtt out",
        "z": "1adadc614d57da99",
        "name": "557c87",
        "topic": "node/557c87",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2fce7cb011bd49b7",
        "x": 1080,
        "y": 620,
        "wires": []
    },
    {
        "id": "281ac4770d23f1d7",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "reportint",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 580,
        "wires": []
    },
    {
        "id": "952c1402c3a650b8",
        "type": "function",
        "z": "1adadc614d57da99",
        "name": "sortinghat",
        "func": "//return [ null, msg ];\n// payload.title\nvar nodefunction = msg.payload.title;\nvar nodefunctext = \"\";\nvar msgarray= [];\nnodefunction = Number(nodefunction);\n//node.status({fill:\"green\",text:(nodefunction & 8)});\nif ((nodefunction & 1) ) {\n    msgarray [0] = msg.payload;\n    nodefunctext += \"packet\";\n} else {\n    msgarray [0] = null;\n}\nif ((nodefunction & 2) == 2) {\n    msgarray [1] = msg.payload;\n    nodefunctext += \"ina\";\n} else {\n    msgarray [1] = null;\n}\nif ((nodefunction & 4) ) {\n    msgarray [2] = msg.payload;\n    nodefunctext += \"neo\";\n} else {\n    msgarray [2] = null;\n}\nif ((nodefunction & 8) == 8) {\n    msgarray [3] = msg.payload;\n    nodefunctext += \"compass\";\n} else {\n    msgarray [3] = null;\n}\nnode.status({fill:\"green\",text:nodefunction+\":\"+nodefunctext});\nmsg = msgarray;\nreturn msg;\n//return [ null, null, null, msg, null, null, null, null, null ];",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1340,
        "wires": [
            [
                "e0fc8596fd30eba3"
            ],
            [
                "128224524d46f1c5"
            ],
            [
                "a96c5a47a5a68d77"
            ],
            [
                "7fbf556973cc3c78"
            ],
            [
                "092ef2ce7951a19d"
            ],
            [
                "5753ca10ccb031e0"
            ],
            [
                "4c1d051259ddf93e"
            ],
            [
                "2f8428c70c5082ae"
            ],
            [
                "74868f3a6635b807"
            ]
        ],
        "outputLabels": [
            "PacketFwd",
            "INA3221",
            "NEO6_7",
            "xMC5883",
            "BMP280",
            "BMP680",
            "MPU6050",
            "ADXL345",
            "AS5600"
        ],
        "info": "#define defFuncPacketFwd false                        // defNodeFunction bit 1 (1) (LSB)\r\n#define defFuncINA3221 false                          // defNodeFunction bit 2 (2)\r\n#define defFuncNEO6_7 false                           // defNodeFunction bit 3 (4)\r\n#define defFuncHMC5883 true                           // defNodeFunction bit 4 (8)\r\n#define defFuncBMP280 false                           // defNodeFunction bit 5 (16)\r\n#define defFuncBMP680 false                           // defNodeFunction bit 6 (32)\r\n#define defFuncMPU6050 false                          // defNodeFunction bit 7 (64)\r\n#define defFuncADXL345 false                          // defNodeFunction bit 8 (128)\r\n#define defFuncAS6500 false                           // defNodeFunction bit 9 (256)"
    },
    {
        "id": "f23c0fec41b1a89a",
        "type": "inject",
        "z": "1adadc614d57da99",
        "name": "8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"title\":\"8\",\"sender\":\"557c87\",\"description\":\"data\",\"time\":\"1706544854\",\"payload\":{\"xMC5883\":{\"heading\":\"27.6\"}}}",
        "payloadType": "json",
        "x": 130,
        "y": 1380,
        "wires": [
            [
                "0e4743376517e6aa"
            ]
        ]
    },
    {
        "id": "84d994f98c16bd6a",
        "type": "inject",
        "z": "1adadc614d57da99",
        "name": "9",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"title\":\"9\",\"sender\":\"557c87\",\"description\":\"data\",\"time\":\"1706544854\",\"payload\":{\"xMC5883\":{\"heading\":\"27.6\"}}}",
        "payloadType": "json",
        "x": 130,
        "y": 1420,
        "wires": [
            [
                "0e4743376517e6aa"
            ]
        ]
    },
    {
        "id": "4f5fb91dd2d3c239",
        "type": "inject",
        "z": "1adadc614d57da99",
        "name": "3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"title\":\"3\",\"sender\":\"557c87\",\"description\":\"data\",\"time\":\"1706544854\",\"payload\":{\"xMC5883\":{\"heading\":\"27.6\"}}}",
        "payloadType": "json",
        "x": 130,
        "y": 1280,
        "wires": [
            [
                "0e4743376517e6aa"
            ]
        ]
    },
    {
        "id": "18f9e0c8bf99db7a",
        "type": "inject",
        "z": "1adadc614d57da99",
        "name": "5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"title\":\"5\",\"sender\":\"557c87\",\"description\":\"data\",\"time\":\"1706544854\",\"payload\":{\"xMC5883\":{\"heading\":\"27.6\"}}}",
        "payloadType": "json",
        "x": 130,
        "y": 1320,
        "wires": [
            [
                "0e4743376517e6aa"
            ]
        ]
    },
    {
        "id": "7fbf556973cc3c78",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "compass",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1300,
        "wires": []
    },
    {
        "id": "74868f3a6635b807",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "as5600",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1500,
        "wires": []
    },
    {
        "id": "e0fc8596fd30eba3",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "packetfwd",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1180,
        "wires": []
    },
    {
        "id": "128224524d46f1c5",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "ina3221",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1220,
        "wires": []
    },
    {
        "id": "092ef2ce7951a19d",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "bmp280",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1340,
        "wires": []
    },
    {
        "id": "a96c5a47a5a68d77",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "neo",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1260,
        "wires": []
    },
    {
        "id": "2f8428c70c5082ae",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "adxl",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1460,
        "wires": []
    },
    {
        "id": "4c1d051259ddf93e",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "mpu",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1420,
        "wires": []
    },
    {
        "id": "5753ca10ccb031e0",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "bmp680",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1380,
        "wires": []
    },
    {
        "id": "74a8738b386d083f",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "payloadtitle",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload.title",
        "statusType": "msg",
        "x": 530,
        "y": 1200,
        "wires": []
    },
    {
        "id": "0e4743376517e6aa",
        "type": "function",
        "z": "1adadc614d57da99",
        "name": "join",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1340,
        "wires": [
            [
                "952c1402c3a650b8",
                "74a8738b386d083f"
            ]
        ]
    },
    {
        "id": "06b7e3f65355f2d5",
        "type": "link out",
        "z": "1adadc614d57da99",
        "name": "datafeed",
        "mode": "link",
        "links": [
            "509551df3408bd1a",
            "5c539b602b0c4198",
            "958bacad9036bf8c",
            "73330ebeb2eab215"
        ],
        "x": 1275,
        "y": 540,
        "wires": []
    },
    {
        "id": "9064f9f5fd97fa2d",
        "type": "link in",
        "z": "1adadc614d57da99",
        "name": "startdisable",
        "links": [
            "ddf6d3136f083bd6"
        ],
        "x": 555,
        "y": 600,
        "wires": [
            [
                "6e78c309d620edd2"
            ]
        ]
    },
    {
        "id": "40a51ade16f746f3",
        "type": "link in",
        "z": "1adadc614d57da99",
        "name": "stopenable",
        "links": [
            "99e055f8f7359f07"
        ],
        "x": 555,
        "y": 920,
        "wires": [
            [
                "b9d1914775ff7992"
            ]
        ]
    },
    {
        "id": "42f081ca34838bca",
        "type": "link in",
        "z": "1adadc614d57da99",
        "name": "stopenable",
        "links": [
            "99e055f8f7359f07"
        ],
        "x": 555,
        "y": 640,
        "wires": [
            [
                "6e78c309d620edd2"
            ]
        ]
    },
    {
        "id": "4109827b3f0ce150",
        "type": "link in",
        "z": "1adadc614d57da99",
        "name": "stopenable",
        "links": [
            "99e055f8f7359f07"
        ],
        "x": 555,
        "y": 720,
        "wires": [
            [
                "90bc419c5c54171f"
            ]
        ]
    },
    {
        "id": "2d47d40f016f1df8",
        "type": "link in",
        "z": "1adadc614d57da99",
        "name": "startdisable",
        "links": [
            "ddf6d3136f083bd6"
        ],
        "x": 555,
        "y": 880,
        "wires": [
            [
                "b9d1914775ff7992"
            ]
        ]
    },
    {
        "id": "b2f998c820f5777a",
        "type": "link in",
        "z": "1adadc614d57da99",
        "name": "startdisable",
        "links": [
            "ddf6d3136f083bd6"
        ],
        "x": 555,
        "y": 680,
        "wires": [
            [
                "90bc419c5c54171f"
            ]
        ]
    },
    {
        "id": "e62b6268c1546275",
        "type": "csv",
        "z": "1adadc614d57da99",
        "name": "Packet Parser",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "Loc,4300PacketNum,GroupID,UnitID,TempC,Voltage,RcvNoise,RcvRSSI,LastRSSI,LastNoise,GPS",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 460,
        "y": 420,
        "wires": [
            [
                "893ad8c15ade3895"
            ]
        ]
    },
    {
        "id": "d69acc3a45ea52f3",
        "type": "csv",
        "z": "1adadc614d57da99",
        "name": "AzimuthParser",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "Azimuthmillis,Azimuth,MagnetStr",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 460,
        "y": 380,
        "wires": [
            [
                "d081df75e716c246"
            ]
        ]
    },
    {
        "id": "1d442a7ba19f074b",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "compass(clean)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 320,
        "wires": []
    },
    {
        "id": "a461ef4fa8289b6e",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "azimuth(clean)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 440,
        "wires": []
    },
    {
        "id": "6169148b78512380",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "packet(clean)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 540,
        "wires": []
    },
    {
        "id": "d081df75e716c246",
        "type": "change",
        "z": "1adadc614d57da99",
        "name": "Azimuth Cleanup",
        "rules": [
            {
                "t": "delete",
                "p": "payload.Azimuthmillis",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.MagnetStr",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "palletspinner",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.Azimuth",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 420,
        "wires": [
            [
                "a461ef4fa8289b6e",
                "bfc28c8e3a5e4d86",
                "6663cf206b151900"
            ]
        ]
    },
    {
        "id": "893ad8c15ade3895",
        "type": "change",
        "z": "1adadc614d57da99",
        "name": "Packet Cleanup",
        "rules": [
            {
                "t": "delete",
                "p": "payload.Voltage",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.Loc",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.TempC",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.LastRSSI",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.LastNoise",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.GPS",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "packet",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "parts",
                "pt": "msg",
                "to": "complete",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$number(payload.RcvRSSI)-$number(payload.RcvNoise)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 520,
        "wires": [
            [
                "6169148b78512380",
                "bfc28c8e3a5e4d86",
                "26983f1ba4dd8b53"
            ]
        ]
    },
    {
        "id": "bfc28c8e3a5e4d86",
        "type": "join",
        "z": "1adadc614d57da99",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1130,
        "y": 400,
        "wires": [
            [
                "0a9a23a21527f47e",
                "06b7e3f65355f2d5",
                "a73246475bb17d9d"
            ]
        ]
    },
    {
        "id": "0a9a23a21527f47e",
        "type": "debug",
        "z": "1adadc614d57da99",
        "name": "join",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 320,
        "wires": []
    },
    {
        "id": "6663cf206b151900",
        "type": "ui_gauge",
        "z": "1adadc614d57da99",
        "name": "palletspinner",
        "group": "3fc1c323cecc5e37",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "compass",
        "title": "Pallet Spinner",
        "label": "degrees",
        "format": "{{payload}}",
        "min": 0,
        "max": "360",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 930,
        "y": 380,
        "wires": []
    },
    {
        "id": "26983f1ba4dd8b53",
        "type": "ui_chart",
        "z": "1adadc614d57da99",
        "name": "",
        "group": "d560ad2316caa4f9",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "SNR",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "100",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1030,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "a73246475bb17d9d",
        "type": "function",
        "z": "1adadc614d57da99",
        "name": "",
        "func": "var snrarray = flow.get(\"snrarray\") || [];\nvar roundazto = 10;\nvar azarray = [0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350];\nvar currazsector = msg.payload.palletspinner;\ncurrazsector = Math.floor(currazsector/roundazto); // 359 -> 35.9 -> 35 .. 1 -> 0.1 -> 0 .. 9.9 -> 0.99 -> 0 .. 10.1 -> 1.01 -> 1\n// currazsector will correlate directly to the index of snrarray\nvar lastazsector = flow.get(\"lastazsector\");\nvar azsectorsamplecount = flow.get(\"azsectorsamplecount\") || 0;\nif (lastazsector == currazsector) {\n    //now average with existing snrarray value, weighted\n    node.status({fill:\"green\",text:snrarray[currazsector]});\n    var temp = msg.payload.packet + snrarray[currazsector] * azsectorsamplecount;\n    azsectorsamplecount++;\n    temp = Math.round(temp/azsectorsamplecount);\n    snrarray[currazsector] = temp;\n} else {\n    // we entered a new sector\n    azsectorsamplecount = 0;\n    snrarray[currazsector]=msg.payload.packet;\n}\nflow.set(\"azsectorsamplecount\",azsectorsamplecount);\nflow.set(\"lastazsector\",currazsector);\nflow.set(\"snrarray\",snrarray);\n\n// now, set up the message so the radar plot will display properly\nvar m = {};\nm.labels = azarray;\nm.data = [snrarray];\nm.series = ['Most Recent'];\nreturn {payload:[m],topic:msg.topic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 400,
        "wires": [
            [
                "a68d32356d4352df"
            ]
        ]
    },
    {
        "id": "a68d32356d4352df",
        "type": "ui_chart",
        "z": "1adadc614d57da99",
        "name": "",
        "group": "ae6e4ee5ad35f1fc",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "MyRadar",
        "chartType": "radar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "MyRadar",
        "dot": false,
        "ymin": "-100",
        "ymax": "-70",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": "30",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1460,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "352bec218510accb",
        "type": "link in",
        "z": "1adadc614d57da99",
        "name": "JSON_Compass_Raw",
        "links": [
            "5a56c85432f3f128",
            "6f88fed0285c9343"
        ],
        "x": 565,
        "y": 120,
        "wires": [
            [
                "0c5563b603dfae5d",
                "46d2827f060ddbe9"
            ]
        ]
    },
    {
        "id": "509551df3408bd1a",
        "type": "link in",
        "z": "f0b4407fe9f47f93",
        "name": "Recording",
        "links": [
            "06b7e3f65355f2d5"
        ],
        "x": 625,
        "y": 560,
        "wires": [
            [
                "8e20f4a9068a8681",
                "834db2d25933ea26"
            ]
        ]
    },
    {
        "id": "8e20f4a9068a8681",
        "type": "q-gate",
        "z": "f0b4407fe9f47f93",
        "name": "data gate",
        "controlTopic": "datacontrol",
        "defaultState": "closed",
        "openCmd": "START",
        "closeCmd": "STOP",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": false,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 780,
        "y": 560,
        "wires": [
            [
                "48ea1642b2544e5e"
            ]
        ]
    },
    {
        "id": "8b9b103f98654155",
        "type": "csv",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 1110,
        "y": 560,
        "wires": [
            [
                "9888d456a1ae84a4",
                "bcfdf2b8ea0242f3"
            ]
        ]
    },
    {
        "id": "87a5d7b15e84ecc6",
        "type": "function",
        "z": "f0b4407fe9f47f93",
        "name": "Process Filename",
        "func": "var rcvdmsgtype = msg.topic;\nvar fileprefix;\nnode.status({fill:\"green\",text:rcvdmsgtype});\nif (rcvdmsgtype == \"shortdesc\") {\n    fileprefix = msg.payload;\n    flow.set(\"fileprefix\", fileprefix);\n}\nif (rcvdmsgtype == \"longdesc\") {\n    flow.set(\"testdescription\",msg.payload);\n}\nif (rcvdmsgtype == \"lograw\") {\n    flow.set(\"lograw\",msg.payload);\n}\nif (rcvdmsgtype == \"logdiag\") {\n    flow.set(\"logdiag\",msg.payload);\n}\nif (rcvdmsgtype == \"apply\") {\n    fileprefix = flow.get(\"fileprefix\") || \"unspecified\";\n    var testdesc = flow.get(\"testdescription\") || \"No entry from user\";\n    var currtime = global.get(\"filenameDTG\");\n    var filename = fileprefix + \"_\" + currtime;\n    var lograw = flow.get(\"lograw\") || false;\n    var logdiag = flow.get(\"logdiag\") || false;\n    msg.payload = {};\n    msg.payload.lograw = lograw;\n    if (lograw) {\n        msg.payload.lograwfilename = filename + \"_raw.txt\";\n        flow.set(\"lograwfilename\",msg.payload.lograwfilename);\n    } else {\n        flow.set(\"lograwfilename\",\"none\");\n    }\n    msg.payload.logdiag = logdiag;\n    if (logdiag) {\n        msg.payload.logdiagfilename = filename + \"_diag.txt\";\n        flow.set(\"logdiagfilename\",msg.payload.logdiagfilename);\n    } else {\n        flow.set(\"logdiagfilename\",\"none\");\n    }\n    msg.payload.starttime = currtime;\n    msg.payload.testdesc = testdesc;\n    msg.payload.datafilename = filename + \".csv\";\n    msg.payload.configfilename = filename + \"_config.txt\";\n    flow.set(\"datafilename\",msg.payload.datafilename);\n    flow.set(\"configfilename\",msg.payload.configfilename);\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 260,
        "wires": [
            [
                "4997aab514b2874d",
                "5caa285e10afb8f4",
                "5fc88cefa9b5b2b9"
            ]
        ]
    },
    {
        "id": "79740ba48dd06672",
        "type": "ui_text_input",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "label": "Short Desc",
        "tooltip": "Prefix to filename. Keep it filename friendly.",
        "group": "b7a68ba52d89cce6",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "0",
        "topic": "shortdesc",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 410,
        "y": 120,
        "wires": [
            [
                "b10f7a819945123c"
            ]
        ]
    },
    {
        "id": "4997aab514b2874d",
        "type": "ui_text",
        "z": "f0b4407fe9f47f93",
        "group": "b7a68ba52d89cce6",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "Filename",
        "format": "{{payload.datafilename}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1140,
        "y": 260,
        "wires": []
    },
    {
        "id": "c602c20bfbb2a615",
        "type": "ui_text_input",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "label": "Long Desc",
        "tooltip": "[optional] Full description included in the config file. KEEP IT UNCLASS!",
        "group": "b7a68ba52d89cce6",
        "order": 4,
        "width": 6,
        "height": 3,
        "passthru": false,
        "mode": "text",
        "delay": "0",
        "topic": "longdesc",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 410,
        "y": 200,
        "wires": [
            [
                "8aa212d857bbb22e"
            ]
        ]
    },
    {
        "id": "2244b160ccf0839d",
        "type": "link in",
        "z": "f0b4407fe9f47f93",
        "name": "startdisable",
        "links": [
            "ddf6d3136f083bd6"
        ],
        "x": 285,
        "y": 100,
        "wires": [
            [
                "79740ba48dd06672"
            ]
        ]
    },
    {
        "id": "f34421ef94daf75e",
        "type": "link in",
        "z": "f0b4407fe9f47f93",
        "name": "stopenable",
        "links": [
            "99e055f8f7359f07"
        ],
        "x": 285,
        "y": 140,
        "wires": [
            [
                "79740ba48dd06672"
            ]
        ]
    },
    {
        "id": "db8ba2b5aa4029e9",
        "type": "link in",
        "z": "f0b4407fe9f47f93",
        "name": "startdisable",
        "links": [
            "ddf6d3136f083bd6"
        ],
        "x": 285,
        "y": 180,
        "wires": [
            [
                "c602c20bfbb2a615"
            ]
        ]
    },
    {
        "id": "42ca4707d4a229cd",
        "type": "link in",
        "z": "f0b4407fe9f47f93",
        "name": "stopenable",
        "links": [
            "99e055f8f7359f07"
        ],
        "x": 285,
        "y": 220,
        "wires": [
            [
                "c602c20bfbb2a615"
            ]
        ]
    },
    {
        "id": "b10f7a819945123c",
        "type": "change",
        "z": "f0b4407fe9f47f93",
        "name": "set topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "shortdesc",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 120,
        "wires": [
            [
                "87a5d7b15e84ecc6"
            ]
        ]
    },
    {
        "id": "8aa212d857bbb22e",
        "type": "change",
        "z": "f0b4407fe9f47f93",
        "name": "set topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "longdesc",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 200,
        "wires": [
            [
                "87a5d7b15e84ecc6"
            ]
        ]
    },
    {
        "id": "a9d67b185e88d68b",
        "type": "change",
        "z": "f0b4407fe9f47f93",
        "name": "set topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "apply",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 440,
        "wires": [
            [
                "87a5d7b15e84ecc6"
            ]
        ]
    },
    {
        "id": "5f2b7a25ebc11d82",
        "type": "ui_switch",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "label": "Record Raw Data",
        "tooltip": "",
        "group": "b7a68ba52d89cce6",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 390,
        "y": 280,
        "wires": [
            [
                "568eca9c36359446"
            ]
        ]
    },
    {
        "id": "568eca9c36359446",
        "type": "change",
        "z": "f0b4407fe9f47f93",
        "name": "set topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "lograw",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 280,
        "wires": [
            [
                "87a5d7b15e84ecc6"
            ]
        ]
    },
    {
        "id": "5deaa707621ddadb",
        "type": "ui_switch",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "label": "Record Diagnostics",
        "tooltip": "",
        "group": "b7a68ba52d89cce6",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 390,
        "y": 360,
        "wires": [
            [
                "d27fe048d9b8418a"
            ]
        ]
    },
    {
        "id": "d27fe048d9b8418a",
        "type": "change",
        "z": "f0b4407fe9f47f93",
        "name": "set topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "logdiag",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 360,
        "wires": [
            [
                "87a5d7b15e84ecc6"
            ]
        ]
    },
    {
        "id": "16a6fa0b2450d604",
        "type": "link in",
        "z": "f0b4407fe9f47f93",
        "name": "startdisable",
        "links": [
            "ddf6d3136f083bd6"
        ],
        "x": 205,
        "y": 260,
        "wires": [
            [
                "5f2b7a25ebc11d82"
            ]
        ]
    },
    {
        "id": "bc23dca587d2ead3",
        "type": "link in",
        "z": "f0b4407fe9f47f93",
        "name": "stopenable",
        "links": [
            "99e055f8f7359f07"
        ],
        "x": 205,
        "y": 300,
        "wires": [
            [
                "5f2b7a25ebc11d82"
            ]
        ]
    },
    {
        "id": "0933d58f68f00f95",
        "type": "link in",
        "z": "f0b4407fe9f47f93",
        "name": "startdisable",
        "links": [
            "ddf6d3136f083bd6"
        ],
        "x": 205,
        "y": 340,
        "wires": [
            [
                "5deaa707621ddadb"
            ]
        ]
    },
    {
        "id": "9256d2ce39e8b2df",
        "type": "link in",
        "z": "f0b4407fe9f47f93",
        "name": "stopenable",
        "links": [
            "99e055f8f7359f07"
        ],
        "x": 205,
        "y": 380,
        "wires": [
            [
                "5deaa707621ddadb"
            ]
        ]
    },
    {
        "id": "82b60100d318e9c9",
        "type": "link in",
        "z": "f0b4407fe9f47f93",
        "name": "Recording",
        "links": [
            "f60ecc23e744d99b"
        ],
        "x": 205,
        "y": 440,
        "wires": [
            [
                "2965a48f906987af"
            ]
        ]
    },
    {
        "id": "5caa285e10afb8f4",
        "type": "debug",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 200,
        "wires": []
    },
    {
        "id": "2965a48f906987af",
        "type": "switch",
        "z": "f0b4407fe9f47f93",
        "name": "START/STOP",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "START",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "STOP",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 440,
        "wires": [
            [
                "a9d67b185e88d68b"
            ],
            [
                "988945641eafdbef"
            ]
        ],
        "outputLabels": [
            "start",
            "stop"
        ]
    },
    {
        "id": "5fc88cefa9b5b2b9",
        "type": "link out",
        "z": "f0b4407fe9f47f93",
        "name": "filenameout",
        "mode": "link",
        "links": [
            "2eccfcc7d36f3422",
            "6e6819c230f9f31c"
        ],
        "x": 1095,
        "y": 320,
        "wires": []
    },
    {
        "id": "2eccfcc7d36f3422",
        "type": "link in",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "links": [
            "5fc88cefa9b5b2b9"
        ],
        "x": 1005,
        "y": 420,
        "wires": [
            [
                "4ea05ca48d2f34a0"
            ]
        ]
    },
    {
        "id": "4ea05ca48d2f34a0",
        "type": "change",
        "z": "f0b4407fe9f47f93",
        "name": "configfile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload.configfilename",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 420,
        "wires": [
            [
                "7c48d063e69a4f7d"
            ]
        ]
    },
    {
        "id": "7c48d063e69a4f7d",
        "type": "file",
        "z": "f0b4407fe9f47f93",
        "name": "configfile",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1300,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "f31a598d.9fd2c8",
        "type": "function",
        "z": "f0b4407fe9f47f93",
        "name": "Set base path",
        "func": "//restrict to c:\\temp\\\nvar basePath = \"/home/nodered/\";\nvar filename = msg.req.params.fn;\n\n\nif(filename.includes(\"..\\\\\")){\n    msg.payload = \"Illegal file path\";\n    msg.statusCode = 405;//not allowed\n    return [null, msg];//fire output 2\n} else if(filename.includes(\"../\")){\n    msg.payload = \"Illegal file path\";\n    msg.statusCode = 405;//not allowed\n    return [null, msg];//fire output 2\n} \n//TODO: add more checks\n\nmsg.filename = basePath + filename;\nreturn [msg, null];//fire output 1\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 760,
        "wires": [
            [
                "34dc99e5.495466"
            ],
            [
                "98261154.3006"
            ]
        ]
    },
    {
        "id": "98261154.3006",
        "type": "http response",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1010,
        "y": 800,
        "wires": []
    },
    {
        "id": "34dc99e5.495466",
        "type": "file in",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 850,
        "y": 740,
        "wires": [
            [
                "98261154.3006"
            ]
        ]
    },
    {
        "id": "38d65d59.1d8aa2",
        "type": "catch",
        "z": "f0b4407fe9f47f93",
        "d": true,
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 480,
        "y": 840,
        "wires": [
            [
                "3b8014a.86ad8ec",
                "5b18a8e7.fb8da8"
            ]
        ]
    },
    {
        "id": "3b8014a.86ad8ec",
        "type": "function",
        "z": "f0b4407fe9f47f93",
        "name": "Set 404",
        "func": "msg.payload = msg.error;\nmsg.statusCode = 404;//resource not found\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 840,
        "wires": [
            [
                "98261154.3006"
            ]
        ]
    },
    {
        "id": "5b18a8e7.fb8da8",
        "type": "debug",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 510,
        "y": 880,
        "wires": []
    },
    {
        "id": "5de7cbb4.fa21a4",
        "type": "comment",
        "z": "f0b4407fe9f47f93",
        "name": "Create http endpoint <nodered>/files/xxx  where xxx is the file name to download",
        "info": "",
        "x": 700,
        "y": 700,
        "wires": []
    },
    {
        "id": "67ecfa7f.3f0e24",
        "type": "http in",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "url": "/ui/:fn",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 480,
        "y": 760,
        "wires": [
            [
                "f31a598d.9fd2c8"
            ]
        ]
    },
    {
        "id": "9888d456a1ae84a4",
        "type": "file",
        "z": "f0b4407fe9f47f93",
        "name": "processeddata",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1280,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "48ea1642b2544e5e",
        "type": "change",
        "z": "f0b4407fe9f47f93",
        "name": "processeddata",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "procfilename",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "columns",
                "pt": "msg",
                "to": "palletspinner,compass,packet",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 560,
        "wires": [
            [
                "8b9b103f98654155"
            ]
        ]
    },
    {
        "id": "6e6819c230f9f31c",
        "type": "link in",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "links": [
            "5fc88cefa9b5b2b9"
        ],
        "x": 425,
        "y": 620,
        "wires": [
            [
                "fc45f1115e5d096a"
            ]
        ]
    },
    {
        "id": "fc45f1115e5d096a",
        "type": "change",
        "z": "f0b4407fe9f47f93",
        "name": "startdatafile",
        "rules": [
            {
                "t": "set",
                "p": "procfilename",
                "pt": "flow",
                "to": "payload.datafilename",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "datacontrol",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "START",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 620,
        "wires": [
            [
                "8e20f4a9068a8681"
            ]
        ]
    },
    {
        "id": "7326a4b8a8473e05",
        "type": "debug",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 500,
        "wires": []
    },
    {
        "id": "988945641eafdbef",
        "type": "change",
        "z": "f0b4407fe9f47f93",
        "name": "stopdatafile",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "datacontrol",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "STOP",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 500,
        "wires": [
            [
                "8e20f4a9068a8681",
                "cc3e9d8b6c1810fd"
            ]
        ]
    },
    {
        "id": "cc3e9d8b6c1810fd",
        "type": "function",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "func": "var config = flow.get(\"configfilename\");\nvar data = flow.get(\"datafilename\");\nvar diag = flow.get(\"logdiagfilename\");\nvar raw = flow.get(\"lograwfilename\");\nvar assembledtemplate = '<div>\\n'\nassembledtemplate += '<a href=\"' + config + '\">config</a>\\n';\nassembledtemplate += '<a href=\"' + data + '\">data</a>\\n';\nif (diag != \"none\") {\n    assembledtemplate += '<a href=\"' + diag + '\">diag</a>\\n';\n}\nif (raw != \"none\") {\n    assembledtemplate += '<a href=\"' + raw + '\">raw</a>\\n';\n}\nassembledtemplate += '</div>';\nmsg.payload = assembledtemplate;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 500,
        "wires": [
            [
                "7326a4b8a8473e05",
                "ae2158719ef46735"
            ]
        ]
    },
    {
        "id": "ae2158719ef46735",
        "type": "ui_template",
        "z": "f0b4407fe9f47f93",
        "group": "b7a68ba52d89cce6",
        "name": "present download links",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "834db2d25933ea26",
        "type": "debug",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 620,
        "wires": []
    },
    {
        "id": "bcfdf2b8ea0242f3",
        "type": "debug",
        "z": "f0b4407fe9f47f93",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 680,
        "wires": []
    },
    {
        "id": "18403f4e8cb4b2c8",
        "type": "udp in",
        "z": "4d79f821c7bfa7e5",
        "name": "listener",
        "iface": "",
        "port": "8266",
        "multicast": "true",
        "group": "224.0.1.3",
        "datatype": "buffer",
        "x": 70,
        "y": 240,
        "wires": [
            [
                "dfcb5da6e769cdb4",
                "3f2d4ec657bae659"
            ]
        ]
    },
    {
        "id": "32d0f335adda4efc",
        "type": "debug",
        "z": "4d79f821c7bfa7e5",
        "name": "SENT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "ip",
        "statusType": "msg",
        "x": 1230,
        "y": 260,
        "wires": []
    },
    {
        "id": "dfcb5da6e769cdb4",
        "type": "switch",
        "z": "4d79f821c7bfa7e5",
        "name": "if mqtt query",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "mqtt-query",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 240,
        "wires": [
            [
                "d180789459a56f61"
            ]
        ]
    },
    {
        "id": "49456b1c72f12e8c",
        "type": "inject",
        "z": "4d79f821c7bfa7e5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "ip",
                "v": "127.0.0.1",
                "vt": "str"
            },
            {
                "p": "port",
                "v": "8266",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "mqtt-query",
        "payloadType": "str",
        "x": 340,
        "y": 480,
        "wires": [
            [
                "57eb0004392a0656"
            ]
        ]
    },
    {
        "id": "57eb0004392a0656",
        "type": "udp out",
        "z": "4d79f821c7bfa7e5",
        "name": "send",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "8266",
        "base64": false,
        "multicast": "false",
        "x": 490,
        "y": 500,
        "wires": []
    },
    {
        "id": "9a2521744461c327",
        "type": "udp out",
        "z": "4d79f821c7bfa7e5",
        "name": "send",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "8266",
        "base64": false,
        "multicast": "false",
        "x": 1230,
        "y": 220,
        "wires": []
    },
    {
        "id": "3f2d4ec657bae659",
        "type": "debug",
        "z": "4d79f821c7bfa7e5",
        "name": "RCVD",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "ip",
        "statusType": "msg",
        "x": 210,
        "y": 280,
        "wires": []
    },
    {
        "id": "5843a5c53a46ab5c",
        "type": "inject",
        "z": "4d79f821c7bfa7e5",
        "name": "manual response",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "ip",
                "v": "192.168.1.8",
                "vt": "str"
            },
            {
                "p": "port",
                "v": "8266",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "192.168.1.6",
        "payloadType": "str",
        "x": 320,
        "y": 520,
        "wires": [
            [
                "57eb0004392a0656"
            ]
        ]
    },
    {
        "id": "5366eda80351522d",
        "type": "comment",
        "z": "4d79f821c7bfa7e5",
        "name": "For troubleshooting UDP query and responses",
        "info": "",
        "x": 350,
        "y": 420,
        "wires": []
    },
    {
        "id": "681bd37a0617be63",
        "type": "comment",
        "z": "4d79f821c7bfa7e5",
        "name": "UDP auto discovery",
        "info": "Listens for packets on set UDP IP 224.0.1.3 at port 8266\nIf payload is \"mqtt-query\", then we:\n  set the interface name we'll query (wlan0)\n  use the interface name to format command line\n  issue command to CLI\n  parse response\n  set payload to my IP\n  purge unnecessary stuff for cleanliness\n  send it",
        "x": 130,
        "y": 180,
        "wires": []
    },
    {
        "id": "34c07e4db87d2cae",
        "type": "template",
        "z": "4d79f821c7bfa7e5",
        "name": "Set commands",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "ifconfig {{localinterface}} | grep '\\<inet\\>' | sed -n '1p' | tr -s ' ' | cut -d ' ' -f3 | cut -d ':' -f2;\nifconfig {{localinterface}} | grep '\\<inet\\>' | sed -n '1p' | tr -s ' ' | cut -d ' ' -f5;\nifconfig {{localinterface}} | grep 'ether' | tr -s ' ' | cut -d ' ' -f3",
        "output": "str",
        "x": 560,
        "y": 240,
        "wires": [
            [
                "fb4138247c067e13"
            ]
        ]
    },
    {
        "id": "fb4138247c067e13",
        "type": "exec",
        "z": "4d79f821c7bfa7e5",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get IP",
        "x": 710,
        "y": 240,
        "wires": [
            [
                "200e4a636e3b6808"
            ],
            [],
            []
        ]
    },
    {
        "id": "200e4a636e3b6808",
        "type": "csv",
        "z": "4d79f821c7bfa7e5",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "d04f9e78d1ef4d3c"
            ]
        ]
    },
    {
        "id": "d04f9e78d1ef4d3c",
        "type": "change",
        "z": "4d79f821c7bfa7e5",
        "name": "Set payload and cleanup",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0].col1",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "rc",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "localinterface",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "columns",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 220,
        "wires": [
            [
                "9a2521744461c327",
                "32d0f335adda4efc"
            ]
        ]
    },
    {
        "id": "d180789459a56f61",
        "type": "change",
        "z": "4d79f821c7bfa7e5",
        "name": "set interface",
        "rules": [
            {
                "t": "set",
                "p": "localinterface",
                "pt": "msg",
                "to": "wlan0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 240,
        "wires": [
            [
                "34c07e4db87d2cae"
            ]
        ]
    },
    {
        "id": "0ce5095a0280410a",
        "type": "inject",
        "z": "555b7e6ec5d6387b",
        "name": "Packet V2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "H,2FSK,4ED836B2,1F7173A8,RESP,3557,12,7,34.1,3.255,-22,-89,2017,4,24,17,29,23,38.3304,-77.02568",
        "payloadType": "str",
        "x": 240,
        "y": 680,
        "wires": [
            [
                "9a5acf9ea119d901"
            ]
        ]
    },
    {
        "id": "7211b171770f60d8",
        "type": "inject",
        "z": "555b7e6ec5d6387b",
        "name": "Azimuth",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"millis\":1,\"azimuth\":1,\"turnrate\":1}",
        "payloadType": "json",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "3577fb0aeaa7e1a9"
            ]
        ],
        "info": "Data Payload: CSV\r\nmillis = unsigned long integer\r\nazimuth = nnn.n float\r\ndegrees per sec = nn.n float"
    },
    {
        "id": "5d1bb0e904f80dfb",
        "type": "inject",
        "z": "555b7e6ec5d6387b",
        "name": "AzimuthDiagostic",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "MAGNET too weak,ff,00,00",
        "payloadType": "str",
        "x": 180,
        "y": 220,
        "wires": [
            [
                "cb6d2a52c96ff667"
            ]
        ],
        "info": "Diagnostic Payload: CSV\r\nmagnet status (string) OR magnet strength (integer)\r\nagc level ff\r\ncurrent hysteresis level 00\r\ncurrent offset value 00\r\n\r\nSample MAC 30AEA4070D64"
    },
    {
        "id": "9cf7b2a1ef1e877b",
        "type": "inject",
        "z": "555b7e6ec5d6387b",
        "name": "Trigger Az Reset",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "dd7a0afcb245446c"
            ]
        ]
    },
    {
        "id": "3577fb0aeaa7e1a9",
        "type": "function",
        "z": "555b7e6ec5d6387b",
        "name": "Increment Azimuth Counters",
        "func": "var azimuthenabled = flow.get('azimuthenabled');\nif (typeof azimuthenabled == \"undefined\")\n    azimuthenabled = 0;  // default to off\nif (azimuthenabled == 1) {\n    var azimuthmillis = flow.get('azimuthmillis');\n    if (typeof azimuthmillis == \"undefined\")\n        azimuthmillis = 0;\n    var azimuthvalue = flow.get('azimuthvalue');\n    if (typeof azimuthvalue == \"undefined\")\n        azimuthvalue = 0;\n    var turnratevalue = flow.get('turnratevalue');\n    if (typeof turnratevalue == \"undefined\")\n        turnratevalue = 3;\n    azimuthmillis += 100;\n    azimuthvalue += 0.5;\n    if (azimuthvalue > 360)\n      azimuthvalue = azimuthvalue-360;\n    msg.payload.millis = azimuthmillis;\n    flow.set('azimuthmillis', azimuthmillis);\n    msg.payload.azimuth = azimuthvalue;\n    flow.set('azimuthvalue', azimuthvalue);\n    msg.payload.turnrate = turnratevalue;\n} else {\n    msg.payload = \"azimuth system disabled\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 160,
        "wires": [
            [
                "9eebac9e3aacd5ca"
            ]
        ]
    },
    {
        "id": "dd7a0afcb245446c",
        "type": "function",
        "z": "555b7e6ec5d6387b",
        "name": "Reset Azimuth Counters",
        "func": "flow.set('azimuthmillis',0);\nflow.set('azimuthvalue', 0);\nflow.set('turnratevalue', 3);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 100,
        "wires": [
            [
                "9eebac9e3aacd5ca"
            ]
        ]
    },
    {
        "id": "2ab570e5d3fbc545",
        "type": "debug",
        "z": "555b7e6ec5d6387b",
        "name": "Azimuth Values",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 120,
        "wires": []
    },
    {
        "id": "1d1d8960def21791",
        "type": "function",
        "z": "555b7e6ec5d6387b",
        "name": "Toggle Azimuth System",
        "func": "var azimuthenabled = flow.get('azimuthenabled');\nif (typeof azimuthenabled == \"undefined\")\n    azimuthenabled = 1;\nif (azimuthenabled == 1) {\n    //  block of code to be executed if the condition is true\n    azimuthenabled = 0;\n} else {\n    //  block of code to be executed if the condition is false\n    azimuthenabled = 1;\n}\nflow.set('azimuthenabled', azimuthenabled);\nmsg.payload = azimuthenabled;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 40,
        "wires": [
            [
                "d08d6b5a13cf53fd"
            ]
        ]
    },
    {
        "id": "0985ae0f66cf1efe",
        "type": "inject",
        "z": "555b7e6ec5d6387b",
        "name": "Toggle Azimuth System",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 200,
        "y": 40,
        "wires": [
            [
                "1d1d8960def21791"
            ]
        ]
    },
    {
        "id": "d08d6b5a13cf53fd",
        "type": "debug",
        "z": "555b7e6ec5d6387b",
        "name": "Azimuth Enabled?",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 40,
        "wires": []
    },
    {
        "id": "4e7d3a4fbd5712ea",
        "type": "debug",
        "z": "555b7e6ec5d6387b",
        "name": "Azimuth Diagnostics Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 220,
        "wires": []
    },
    {
        "id": "cb6d2a52c96ff667",
        "type": "function",
        "z": "555b7e6ec5d6387b",
        "name": "Broadcast Azimuth Diagnostics",
        "func": "var azimuthenabled = flow.get('azimuthenabled');\nif (typeof azimuthenabled == \"undefined\")\n    azimuthenabled = 0;  // default to off\nif (azimuthenabled == 1) {\n    // do stuff\n    msg.payload = \"MAGNET too weak,ff,00,00\";\n} else {\n    msg.payload = \"azimuth system disabled\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 220,
        "wires": [
            [
                "bc3c3e3a05e4f919"
            ]
        ]
    },
    {
        "id": "bc3c3e3a05e4f919",
        "type": "switch",
        "z": "555b7e6ec5d6387b",
        "name": "ENABLED?",
        "property": "azimuthenabled",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 220,
        "wires": [
            [
                "4e7d3a4fbd5712ea"
            ],
            []
        ],
        "outputLabels": [
            "ENABLED",
            "DISABLED"
        ]
    },
    {
        "id": "9eebac9e3aacd5ca",
        "type": "switch",
        "z": "555b7e6ec5d6387b",
        "name": "ENABLED?",
        "property": "azimuthenabled",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 140,
        "wires": [
            [
                "2ab570e5d3fbc545",
                "63a5346d1d76bbe8"
            ],
            []
        ],
        "outputLabels": [
            "ENABLED",
            "DISABLED"
        ]
    },
    {
        "id": "b73b19af3616f58c",
        "type": "function",
        "z": "555b7e6ec5d6387b",
        "name": "Toggle Beacon",
        "func": "var beacon1enabled = flow.get('beacon1enabled');\nif (typeof beacon1enabled == \"undefined\")\n    beacon1enabled = 1;\nif (beacon1enabled == 1) {\n    //  block of code to be executed if the condition is true\n    beacon1enabled = 0;\n} else {\n    //  block of code to be executed if the condition is false\n    beacon1enabled = 1;\n    var beacon1packet = flow.get('beacon1packet') || 0;\n    flow.set(\"beacon1packet\", 0);\n}\nflow.set('beacon1enabled', beacon1enabled);\nmsg.payload = beacon1enabled;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 320,
        "wires": [
            [
                "4aed472e26e29cad"
            ]
        ]
    },
    {
        "id": "01853f70a4613f8f",
        "type": "inject",
        "z": "555b7e6ec5d6387b",
        "name": "Toggle Beacon",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 180,
        "y": 320,
        "wires": [
            [
                "b73b19af3616f58c"
            ]
        ]
    },
    {
        "id": "4aed472e26e29cad",
        "type": "debug",
        "z": "555b7e6ec5d6387b",
        "name": "Beacon Enabled?",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 320,
        "wires": []
    },
    {
        "id": "4d768c4aebc8eb44",
        "type": "inject",
        "z": "555b7e6ec5d6387b",
        "name": "Packet V1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1.5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Loc\":\"H\",\"PacketNum\":73,\"GroupID\":8,\"UnitID\":4,\"TempC\":28.6,\"Voltage\":3.312,\"RcvNoise\":-191,\"RcvRSSI\":-42,\"LastRSSI\":-29,\"LastNoise\":-129,\"GPS\":0}",
        "payloadType": "json",
        "x": 210,
        "y": 480,
        "wires": [
            [
                "8a47fe263e42b087"
            ]
        ]
    },
    {
        "id": "8a47fe263e42b087",
        "type": "function",
        "z": "555b7e6ec5d6387b",
        "name": "Update Beacon 1",
        "func": "var beacon1enabled = flow.get('beacon1enabled') || 0;\nif (beacon1enabled == 1) {\n    // Loc,PacketNum,GroupID,UnitID,TempC,Voltage,\n    // RcvNoise,RcvRSSI,LastRSSI,LastNoise,GPS\n    var beacon1packet = flow.get('beacon1packet') || 0;\n    var temperaturevalue = flow.get('temperaturevalue') || 0;\n    var voltagevalue = flow.get('voltagevalue') || 0;\n    var rcvnoisevalue = flow.get('rcvnoisevalue') || 0;\n    var rcvrssievalue = flow.get('rcvrssievalue') || 0;\n    var lastnoisevalue = flow.get('lastnoisevalue') || 0;\n    var lastrssivalue = flow.get('lastrssivalue') || 0;\n    beacon1packet += 1;\n    temperaturevalue = 20 + (Math.round(Math.random() * 30)) / 10;\n    voltagevalue = 3 + (Math.round(Math.random() * 1000)) / 1000;\n    rcvnoisevalue = -27 - (Math.round(Math.random() * 9));\n    rcvrssievalue = -107 - (Math.round(Math.random() * 16));\n    lastnoisevalue = -30 - (Math.round(Math.random() * 7));\n    lastrssivalue = -118 - (Math.round(Math.random() * 12));\n    msg.payload.Loc = \"H\";\n    msg.payload.PacketNum = beacon1packet;\n    flow.set(\"beacon1packet\", beacon1packet);\n    msg.payload.GroupID = 8;\n    msg.payload.UnitID = 4;\n    msg.payload.TempC = temperaturevalue;\n    flow.set(\"temperaturevalue\", temperaturevalue);\n    msg.payload.Voltage = voltagevalue;\n    flow.set(\"voltagevalue\", voltagevalue);\n    msg.payload.RcvNoise = rcvnoisevalue;\n    flow.set(\"rcvnoisevalue\", rcvnoisevalue);\n    msg.payload.RcvRSSI = rcvrssievalue;\n    flow.set(\"rcvrssievalue\", rcvrssievalue);\n    msg.payload.LastNoise = lastnoisevalue;\n    flow.set(\"lastnoisevalue\", lastnoisevalue);\n    msg.payload.LastRSSI = lastrssivalue;\n    flow.set(\"lastrssivalue\", lastrssivalue);\n    msg.payload.GPS = 0;\n} else {\n    msg.payload = \"beacon 1 system disabled\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 480,
        "wires": [
            [
                "3d63aa3301001a6c"
            ]
        ]
    },
    {
        "id": "3d63aa3301001a6c",
        "type": "switch",
        "z": "555b7e6ec5d6387b",
        "name": "ENABLED?",
        "property": "beacon1enabled",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 480,
        "wires": [
            [
                "8d7fce91bf3c97a4",
                "4e02d4c05ddf29c6"
            ],
            []
        ],
        "outputLabels": [
            "ENABLED",
            "DISABLED"
        ]
    },
    {
        "id": "4e02d4c05ddf29c6",
        "type": "debug",
        "z": "555b7e6ec5d6387b",
        "name": "Packet V1 Randomized in JSON",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 520,
        "wires": []
    },
    {
        "id": "e0b2deaa7c771218",
        "type": "debug",
        "z": "555b7e6ec5d6387b",
        "name": "PacketV2 Plain Ouput",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 660,
        "wires": []
    },
    {
        "id": "9a5acf9ea119d901",
        "type": "csv",
        "z": "555b7e6ec5d6387b",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "Loc,PacketNum,GroupID,UnitID,TempC,Voltage,RcvNoise,RcvRSSI,LastRSSI,LastNoise,GPS",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 410,
        "y": 680,
        "wires": [
            [
                "b93481bea61e1856"
            ]
        ]
    },
    {
        "id": "72d35fc4b13559af",
        "type": "mqtt out",
        "z": "555b7e6ec5d6387b",
        "name": "PacketV1 MQTT",
        "topic": "node/ponyexpress",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2fce7cb011bd49b7",
        "x": 1220,
        "y": 460,
        "wires": []
    },
    {
        "id": "3e3d151a41a2941b",
        "type": "mqtt out",
        "z": "555b7e6ec5d6387b",
        "name": "PacketV2 MQTT",
        "topic": "node/ponyexpress",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9ad53e0e62e39b88",
        "x": 1120,
        "y": 700,
        "wires": []
    },
    {
        "id": "1aed09a0d505ec97",
        "type": "mqtt out",
        "z": "555b7e6ec5d6387b",
        "name": "Azimuth MQTT",
        "topic": "node/azimuth",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2fce7cb011bd49b7",
        "x": 1020,
        "y": 160,
        "wires": []
    },
    {
        "id": "8d7fce91bf3c97a4",
        "type": "csv",
        "z": "555b7e6ec5d6387b",
        "name": "JSONtoCSV",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "Loc,PacketNum,GroupID,UnitID,TempC,Voltage,RcvNoise,RcvRSSI,LastRSSI,LastNoise,GPS",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 850,
        "y": 440,
        "wires": [
            [
                "8127c1796d839c5b"
            ]
        ]
    },
    {
        "id": "63a5346d1d76bbe8",
        "type": "csv",
        "z": "555b7e6ec5d6387b",
        "name": "JSONtoCSV",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "millis,azimuth,turnrate",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 830,
        "y": 160,
        "wires": [
            [
                "1aed09a0d505ec97",
                "fc3c10f9c61981b2"
            ]
        ]
    },
    {
        "id": "2a8b823318ce95a5",
        "type": "debug",
        "z": "555b7e6ec5d6387b",
        "name": "Packet V1 MQTT Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 420,
        "wires": []
    },
    {
        "id": "e40bf808286e602e",
        "type": "comment",
        "z": "555b7e6ec5d6387b",
        "name": "KNOWN BUG",
        "info": "Known bug in the randomized voltage.\n\nSometimes causes outputs with over \n10 decimal places of output VS x.xxx\n\nSeems to be something with Javascript's \nhandling of the Math.Round function. \n\nDOES NOT have the same problem with the \nother randomized values. So...wtf?",
        "x": 630,
        "y": 420,
        "wires": []
    },
    {
        "id": "b93481bea61e1856",
        "type": "switch",
        "z": "555b7e6ec5d6387b",
        "name": "ENABLED?",
        "property": "beacon1enabled",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 680,
        "wires": [
            [
                "b6ff5e032a3b0c7d"
            ],
            []
        ],
        "outputLabels": [
            "ENABLED",
            "DISABLED"
        ]
    },
    {
        "id": "8127c1796d839c5b",
        "type": "q-gate",
        "z": "555b7e6ec5d6387b",
        "name": "data gate",
        "controlTopic": "packetcontrol",
        "defaultState": "closed",
        "openCmd": "START",
        "closeCmd": "STOP",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": false,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 1020,
        "y": 440,
        "wires": [
            [
                "2a8b823318ce95a5",
                "72d35fc4b13559af"
            ]
        ]
    },
    {
        "id": "d185838310148daf",
        "type": "inject",
        "z": "555b7e6ec5d6387b",
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "packetcontrol",
        "payload": "START",
        "payloadType": "str",
        "x": 870,
        "y": 400,
        "wires": [
            [
                "8127c1796d839c5b"
            ]
        ]
    },
    {
        "id": "ac02588be78244f1",
        "type": "inject",
        "z": "555b7e6ec5d6387b",
        "name": "stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "packetcontrol",
        "payload": "STOP",
        "payloadType": "str",
        "x": 870,
        "y": 480,
        "wires": [
            [
                "8127c1796d839c5b"
            ]
        ]
    },
    {
        "id": "b6ff5e032a3b0c7d",
        "type": "q-gate",
        "z": "555b7e6ec5d6387b",
        "name": "data gate",
        "controlTopic": "packetcontrol",
        "defaultState": "closed",
        "openCmd": "START",
        "closeCmd": "STOP",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "1",
        "keepNewest": false,
        "qToggle": false,
        "persist": false,
        "storeName": "memory",
        "x": 920,
        "y": 680,
        "wires": [
            [
                "3e3d151a41a2941b",
                "e0b2deaa7c771218"
            ]
        ]
    },
    {
        "id": "d1b7d290e0bd2591",
        "type": "inject",
        "z": "555b7e6ec5d6387b",
        "name": "stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "packetcontrol",
        "payload": "STOP",
        "payloadType": "str",
        "x": 770,
        "y": 720,
        "wires": [
            [
                "b6ff5e032a3b0c7d"
            ]
        ]
    },
    {
        "id": "602e69d37a12fa29",
        "type": "inject",
        "z": "555b7e6ec5d6387b",
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "packetcontrol",
        "payload": "START",
        "payloadType": "str",
        "x": 770,
        "y": 640,
        "wires": [
            [
                "b6ff5e032a3b0c7d"
            ]
        ]
    },
    {
        "id": "fc3c10f9c61981b2",
        "type": "debug",
        "z": "555b7e6ec5d6387b",
        "name": "Azimuth String",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 120,
        "wires": []
    },
    {
        "id": "1627c684d108dc45",
        "type": "inject",
        "z": "ef09b2ee949083c7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "b754b2d0054328b3"
            ]
        ]
    },
    {
        "id": "bf71f6ef79db01cb",
        "type": "inject",
        "z": "ef09b2ee949083c7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 230,
        "y": 220,
        "wires": [
            [
                "b754b2d0054328b3"
            ]
        ]
    },
    {
        "id": "b754b2d0054328b3",
        "type": "ui_template",
        "z": "ef09b2ee949083c7",
        "group": "368a548923a9a211",
        "name": "switch",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "var status = {{msg.payload}};",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 430,
        "y": 140,
        "wires": [
            [
                "190ebda3696e67ac"
            ]
        ]
    },
    {
        "id": "190ebda3696e67ac",
        "type": "ui_ui_control",
        "z": "ef09b2ee949083c7",
        "name": "",
        "x": 600,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "52d387075434ab0b",
        "type": "comment",
        "z": "ef09b2ee949083c7",
        "name": "Switches tabs for some reason",
        "info": "injecting payload is causing page to switch between ",
        "x": 370,
        "y": 100,
        "wires": []
    },
    {
        "id": "de96c11163c680c1",
        "type": "inject",
        "z": "ef09b2ee949083c7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "num",
        "x": 230,
        "y": 280,
        "wires": [
            [
                "b754b2d0054328b3"
            ]
        ]
    },
    {
        "id": "44960a3a9b43846a",
        "type": "inject",
        "z": "ef09b2ee949083c7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 230,
        "y": 120,
        "wires": [
            [
                "b754b2d0054328b3"
            ]
        ]
    },
    {
        "id": "f9929356e7ed6f88",
        "type": "mqtt in",
        "z": "ef09b2ee949083c7",
        "name": "",
        "topic": "node/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "2fce7cb011bd49b7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 580,
        "wires": [
            [
                "ef1a0facdd2f26bd",
                "0f5cbd30bb03d32d"
            ]
        ]
    },
    {
        "id": "ef1a0facdd2f26bd",
        "type": "switch",
        "z": "ef09b2ee949083c7",
        "name": "Sort by topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "node/data",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "node/azimuth",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "node/ponyexpress",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "node/temppress",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 390,
        "y": 560,
        "wires": [
            [
                "9fd537b470bfb122"
            ],
            [
                "d5c95e7b71942b0e"
            ],
            [
                "0dd1766dbb4fbcf2"
            ],
            [
                "2d22cfa77f550b68"
            ],
            [
                "d7af4ed6ebf2631c"
            ]
        ],
        "inputLabels": [
            "all JSON"
        ],
        "outputLabels": [
            "compass",
            "azimuth",
            "packet",
            "temppress",
            "all others"
        ]
    },
    {
        "id": "0f5cbd30bb03d32d",
        "type": "debug",
        "z": "ef09b2ee949083c7",
        "name": "node/#",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "_topic",
        "statusType": "msg",
        "x": 370,
        "y": 620,
        "wires": []
    },
    {
        "id": "6937f03083f7f7a2",
        "type": "ui_text",
        "z": "ef09b2ee949083c7",
        "group": "4788da44ae885d26",
        "order": 10,
        "width": 6,
        "height": 5,
        "name": "",
        "label": "Readout",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 660,
        "y": 780,
        "wires": []
    },
    {
        "id": "d7af4ed6ebf2631c",
        "type": "debug",
        "z": "ef09b2ee949083c7",
        "name": "NO MATCH FOUND",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 740,
        "wires": []
    },
    {
        "id": "2d22cfa77f550b68",
        "type": "csv",
        "z": "ef09b2ee949083c7",
        "name": "RemoteBMPParser",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "bmpmillis,bmppacketnum,bmpwifirssi,temp-C,pressure-Pa,altitude-m",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "0dd1766dbb4fbcf2",
        "type": "csv",
        "z": "ef09b2ee949083c7",
        "name": "Packet Parser",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "Loc,4300PacketNum,GroupID,UnitID,TempC,Voltage,RcvNoise,RcvRSSI,LastRSSI,LastNoise,GPS",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": true,
        "x": 700,
        "y": 600,
        "wires": [
            [
                "499fbb78e3e811db"
            ]
        ]
    },
    {
        "id": "d5c95e7b71942b0e",
        "type": "csv",
        "z": "ef09b2ee949083c7",
        "name": "AzimuthParser",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "Azimuthmillis,Azimuth,MagnetStr",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 700,
        "y": 500,
        "wires": [
            [
                "296b50b83b734fc0"
            ]
        ]
    },
    {
        "id": "9fd537b470bfb122",
        "type": "json",
        "z": "ef09b2ee949083c7",
        "name": "Compass Parser",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 690,
        "y": 400,
        "wires": [
            [
                "1f9c8ba367612f51"
            ]
        ]
    },
    {
        "id": "7e09752296390048",
        "type": "link out",
        "z": "ef09b2ee949083c7",
        "name": "JSON_RemoteBMP_Raw",
        "mode": "link",
        "links": [],
        "x": 855,
        "y": 680,
        "wires": []
    },
    {
        "id": "782c09f905e468cc",
        "type": "link out",
        "z": "ef09b2ee949083c7",
        "name": "JSON_HealthPacket_Raw",
        "mode": "link",
        "links": [],
        "x": 855,
        "y": 580,
        "wires": []
    },
    {
        "id": "499fbb78e3e811db",
        "type": "debug",
        "z": "ef09b2ee949083c7",
        "name": "Packet Parsed",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 920,
        "y": 620,
        "wires": []
    },
    {
        "id": "522b8044d779fe5e",
        "type": "link out",
        "z": "ef09b2ee949083c7",
        "name": "JSON_Azimuth_Raw",
        "mode": "link",
        "links": [],
        "x": 855,
        "y": 480,
        "wires": []
    },
    {
        "id": "296b50b83b734fc0",
        "type": "debug",
        "z": "ef09b2ee949083c7",
        "name": "Azimuth Parsed",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 920,
        "y": 520,
        "wires": []
    },
    {
        "id": "6f88fed0285c9343",
        "type": "link out",
        "z": "ef09b2ee949083c7",
        "name": "JSON_Compass_Raw",
        "mode": "link",
        "links": [
            "352bec218510accb"
        ],
        "x": 855,
        "y": 380,
        "wires": []
    },
    {
        "id": "1f9c8ba367612f51",
        "type": "debug",
        "z": "ef09b2ee949083c7",
        "name": "Compass Parsed",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 930,
        "y": 420,
        "wires": []
    },
    {
        "id": "1e921026874406db",
        "type": "delay",
        "z": "ef09b2ee949083c7",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 940,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "eb64b1160ba43f79",
        "type": "inject",
        "z": "ef09b2ee949083c7",
        "name": "Go",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 190,
        "y": 920,
        "wires": [
            [
                "dea3caec097552fd"
            ]
        ]
    },
    {
        "id": "dea3caec097552fd",
        "type": "function",
        "z": "ef09b2ee949083c7",
        "name": "build array (2)",
        "func": "var arr =[[\"Paul\",\"Doe\",24],[\"Greg\",\"Jones\",31],[\"Able\",\"Smith\",29]];\nmsg.payload = arr;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 920,
        "wires": [
            [
                "307b6a1bf3cc61d5"
            ]
        ]
    },
    {
        "id": "a53044126f6727e7",
        "type": "debug",
        "z": "ef09b2ee949083c7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 890,
        "y": 920,
        "wires": []
    },
    {
        "id": "307b6a1bf3cc61d5",
        "type": "ui_template",
        "z": "ef09b2ee949083c7",
        "group": "3c5da821.6d5638",
        "name": "Two dimension array table",
        "order": 1,
        "width": "6",
        "height": "6",
        "format": "<table id=\"table\" border=\"1\">\n <tr>\n <th>First Name</th> \n <th>Last Name</th>\n <th>Age</th>\n </tr>\n <tbody>\n <tr ng-repeat=\"row in msg.payload\">\n <td ng-repeat=\"item in row\" >{{item}}</td>\n </tr>\n </tbody>\n</table>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 580,
        "y": 920,
        "wires": [
            [
                "a53044126f6727e7"
            ]
        ]
    },
    {
        "id": "b6f144760c8c2ac0",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 100,
        "wires": [
            [
                "a2ed76e51d9d45d4"
            ]
        ]
    },
    {
        "id": "4b3e82218503d28a",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 100,
        "wires": []
    },
    {
        "id": "a2ed76e51d9d45d4",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "$sum(arr)",
        "func": "// $sum(array)\n\nconst data = {\n    example: [\n        { value: 4 },\n        { value: 7 },\n        { value: 13 },\n        { value: 10 },\n    ],\n};\n\nmsg.topic = (data.example[0].value + data.example[1].value + data.example[2].value + data.example[3].value);\n\n// Returns the arithmetic sum of an array of numbers\nconst expression = jsonata(\"$sum(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 100,
        "wires": [
            [
                "4b3e82218503d28a"
            ]
        ]
    },
    {
        "id": "124bdd42fad50ccc",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "$max(arr)",
        "func": "// $max(array)\n\nconst data = {\n    \"example\": {\n        \"value\": [ 4, 7, 13 ],\n    },\n};\n\n// Returns the maximum number in an array of numbers\nconst expression = jsonata(\"$max(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 140,
        "wires": [
            [
                "95b7b4d1463f8ba2"
            ]
        ]
    },
    {
        "id": "f00555d99d713808",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 140,
        "wires": [
            [
                "124bdd42fad50ccc"
            ]
        ]
    },
    {
        "id": "95b7b4d1463f8ba2",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 140,
        "wires": []
    },
    {
        "id": "76ab1b459ad7557d",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "$min(arr)",
        "func": "// $min(array)\n\nconst data = {\n    \"example\": {\n        \"value\": [ 4, 7, 13 ],\n    },\n};\n\n// Returns the minimum number in an array of numbers\nconst expression = jsonata(\"$min(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 180,
        "wires": [
            [
                "27ae951f78f80e9f"
            ]
        ]
    },
    {
        "id": "133de034e18f2e08",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "$average(arr)",
        "func": "// $average(array)\n\nconst value = [];\nvalue[0] = 4;\nvalue[1] = 7;\nvalue[2] = 13;\n\nconst data = { \"example\": { value }};\n\n// Returns the mean value of an array of numbers\nconst expression = jsonata(\"$average(example.value)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 220,
        "wires": [
            [
                "64bf6cca123277d6"
            ]
        ]
    },
    {
        "id": "9895cc964f49ae00",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 180,
        "wires": [
            [
                "76ab1b459ad7557d"
            ]
        ]
    },
    {
        "id": "f06124c947a5414c",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 730,
        "y": 220,
        "wires": [
            [
                "133de034e18f2e08"
            ]
        ]
    },
    {
        "id": "27ae951f78f80e9f",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 180,
        "wires": []
    },
    {
        "id": "64bf6cca123277d6",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "31710161af1f85fc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 220,
        "wires": []
    },
    {
        "id": "8daced1e49b8e444",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$number(arg)",
        "func": "// $number(argument)\n// Argument can be string or boolean\n\nconst example = [];\nexample[0] = true;\nexample[1] = false;\nexample[2] = \"2\";\n\n// Casts the arg parameter to a number\nconst expression = [];\nexpression[0] = jsonata(`$number(${example[0]})`);\nexpression[1] = jsonata(`$number(${example[1]})`);\nexpression[2] = jsonata(`$number(${example[2]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 980,
        "wires": [
            [
                "d7445651ceb1befb"
            ]
        ]
    },
    {
        "id": "d7445651ceb1befb",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 980,
        "wires": []
    },
    {
        "id": "0c47d4e5f41185ff",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$abs(num)",
        "func": "// $abs(number)\n\nconst example = [];\nexample[0] = 2;\nexample[1] = -3;\n\n// Returns the absolute value of the number\nconst expression = [];\nexpression[0] = jsonata(`$abs(${example[0]})`);\nexpression[1] = jsonata(`$abs(${example[1]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1020,
        "wires": [
            [
                "40cd56ab50d99edd"
            ]
        ]
    },
    {
        "id": "2915de67bb436aec",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 980,
        "wires": [
            [
                "8daced1e49b8e444"
            ]
        ]
    },
    {
        "id": "f816ab6ce130373d",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1020,
        "wires": [
            [
                "0c47d4e5f41185ff"
            ]
        ]
    },
    {
        "id": "40cd56ab50d99edd",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1020,
        "wires": []
    },
    {
        "id": "3c64a396557c2169",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$floor(num)",
        "func": "// $floor(number)\n\nconst example = [];\nexample[0] = 4;\nexample[1] = 4.4;\nexample[2] = 4.8;\nexample[3] = -4.4;\n\n// Returns the value of number rounded down to the nearest integer\nconst expression = [];\nexpression[0] = jsonata(`$floor(${example[0]})`);\nexpression[1] = jsonata(`$floor(${example[1]})`);\nexpression[2] = jsonata(`$floor(${example[2]})`);\nexpression[3] = jsonata(`$floor(${example[3]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1060,
        "wires": [
            [
                "a092319ec2068dcb"
            ]
        ]
    },
    {
        "id": "42412dbf82022ed6",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$ceil(num)",
        "func": "// $ceil(number)\n\nconst example = [];\nexample[0] = 4;\nexample[1] = 4.4;\nexample[2] = 4.8;\nexample[3] = -4.4;\n\n// Returns the value of number rounded up to the nearest integer\nconst expression = [];\nexpression[0] = jsonata(`$ceil(${example[0]})`);\nexpression[1] = jsonata(`$ceil(${example[1]})`);\nexpression[2] = jsonata(`$ceil(${example[2]})`);\nexpression[3] = jsonata(`$ceil(${example[3]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "4fa5326a67572fba"
            ]
        ]
    },
    {
        "id": "be9e933624cfc9b9",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$round(num, pre)",
        "func": "// $round(num [, precision])\n\nconst example = [];\nexample[0] = 3.14159265;\nexample[1] = 425;\n\n// Returns the value of the number parameter\n// rounded to decimal places specified by optional precision parameter\nconst expression = [];\nexpression[0] = jsonata(`$round(${example[0]})`);\nexpression[1] = jsonata(`$round(${example[0]},2)`);\nexpression[2] = jsonata(`$round(${example[1]},-1)`);\nexpression[3] = jsonata(`$round(${example[1]},-2)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 1140,
        "wires": [
            [
                "0efc16b8ad0a4a06"
            ]
        ]
    },
    {
        "id": "506c5164d419415a",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1060,
        "wires": [
            [
                "3c64a396557c2169"
            ]
        ]
    },
    {
        "id": "bd4e27a24441e29a",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1100,
        "wires": [
            [
                "42412dbf82022ed6"
            ]
        ]
    },
    {
        "id": "78ed3050cffbee5f",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1140,
        "wires": [
            [
                "be9e933624cfc9b9"
            ]
        ]
    },
    {
        "id": "a092319ec2068dcb",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1060,
        "wires": []
    },
    {
        "id": "0efc16b8ad0a4a06",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1140,
        "wires": []
    },
    {
        "id": "4fa5326a67572fba",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1100,
        "wires": []
    },
    {
        "id": "3d892df51ef07041",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$power(base , exp)",
        "func": "// $power(base , exponent)\n\nconst example = 5;\n\n// Returns the value of base raised to the power of exponent\nconst expression = [];\nexpression[0] = jsonata(`$power(${example}, 0)`);\nexpression[1] = jsonata(`$power(${example}, 1)`);\nexpression[2] = jsonata(`$power(${example}, 2)`);\nexpression[3] = jsonata(`$power(${example}, -1)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 1180,
        "wires": [
            [
                "a9f54d592da16259"
            ]
        ]
    },
    {
        "id": "d8cc71bf7a1cef6e",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1180,
        "wires": [
            [
                "3d892df51ef07041"
            ]
        ]
    },
    {
        "id": "a9f54d592da16259",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1180,
        "wires": []
    },
    {
        "id": "c211cee8f26830fb",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$sqrt(num)",
        "func": "const example = [];\nexample[0] = 16;\nexample[1] = 25;\n\n// Returns the square root of the value of the number\nconst expression = [];\nexpression[0] = jsonata(`$sqrt(${example[0]})`);\nexpression[1] = jsonata(`$sqrt(${example[1]})`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1220,
        "wires": [
            [
                "9129250d27e12100"
            ]
        ]
    },
    {
        "id": "3f468cb3641e5db2",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1220,
        "wires": [
            [
                "c211cee8f26830fb"
            ]
        ]
    },
    {
        "id": "9129250d27e12100",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1220,
        "wires": []
    },
    {
        "id": "35468424f2a1649a",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$random()",
        "func": "// $random()\n\n// Returns a pseudo random number (0 ≤ n < 1)\nconst expression = jsonata(\"$random()\");\n\nmsg.payload = [];\nmsg.payload[0] = expression.evaluate();\nmsg.payload[1] = jsonata(\"$random()\").evaluate();\nmsg.payload[2] = jsonata(`$round(${msg.payload[1]}, 2)`).evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 1260,
        "wires": [
            [
                "6deec1748014b6c6"
            ]
        ]
    },
    {
        "id": "1a901ddcf487d332",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1260,
        "wires": [
            [
                "35468424f2a1649a"
            ]
        ]
    },
    {
        "id": "6deec1748014b6c6",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1260,
        "wires": []
    },
    {
        "id": "6a945003fb6a19fe",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$formatNumber(num, pic)",
        "func": "// $formatNumber(num, picture [, options])\n\nconst example = [];\nexample[0] = 3.14159265;\nexample[1] = 1234.5678;\n\n// Casts the number to a string and formats it to a decimal representation \n// as specified by the picture string\nconst expression = [];\nexpression[0] = jsonata(`$formatNumber(${example[0]}, \"#.#\")`);\nexpression[1] = jsonata(`$formatNumber(${example[0]}, \"#.00\")`);\nexpression[2] = jsonata(`$formatNumber(${example[1]}, \"#,###.##\")`);\nexpression[3] = jsonata(`$formatNumber(${example[1]}, \"0,000.00%\")`);\nexpression[4] = jsonata(`$formatNumber(${example[1]}, \"#,###.####pm\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 1300,
        "wires": [
            [
                "19592f83ca197954"
            ]
        ]
    },
    {
        "id": "354dc0515a3a8c0c",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1300,
        "wires": [
            [
                "6a945003fb6a19fe"
            ]
        ]
    },
    {
        "id": "19592f83ca197954",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1300,
        "wires": []
    },
    {
        "id": "e96d13cd9c516780",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$formatBase(num, rad)",
        "func": "// $formatBase(num, radix)\n// If radix is not specified, then it defaults to base 10\n// radix can be between 2 and 36\n\nconst example = [];\nexample[0] = 10;\nexample[1] = 15;\n\n// Casts the number to a string and formats it to an integer\n// represented in the number base specified by the radix\nconst expression = [];\nexpression[0] = jsonata(`$formatBase(${example[0]})`);\nexpression[1] = jsonata(`$formatBase(${example[0]}, 2)`);\nexpression[2] = jsonata(`$formatBase(${example[0]}, 16)`);\nexpression[3] = jsonata(`$formatBase(${example[1]}, 2)`);\nexpression[4] = jsonata(`$formatBase(${example[1]}, 16)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 1340,
        "wires": [
            [
                "6536ce65bd593f2a"
            ]
        ]
    },
    {
        "id": "1caa81e91f5593bd",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1340,
        "wires": [
            [
                "e96d13cd9c516780"
            ]
        ]
    },
    {
        "id": "6536ce65bd593f2a",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1340,
        "wires": []
    },
    {
        "id": "5b35e2d318a492ab",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$formatInteger(num, pic)",
        "func": "// $formatInteger(num, picture)\n\nconst example = [];\nexample[0] = 12;\nexample[1] = 115;\n\n// Casts the number to a string, formats it to an integer representation as specified by the picture\nconst expression = [];\nexpression[0] = jsonata(`$formatInteger(${example[0]}, \"w\")`);\nexpression[1] = jsonata(`$formatInteger(${example[0]}, \"I\")`);\nexpression[2] = jsonata(`$formatInteger(${example[1]}, \"w\")`);\nexpression[3] = jsonata(`$formatInteger(${example[1]}, \"I\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 1380,
        "wires": [
            [
                "ced7657e6cdca47c"
            ]
        ]
    },
    {
        "id": "fd6e660561b21348",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 1380,
        "wires": [
            [
                "5b35e2d318a492ab"
            ]
        ]
    },
    {
        "id": "ced7657e6cdca47c",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1380,
        "wires": []
    },
    {
        "id": "c277731a9bcd97b7",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "$parseInteger(str, pic)",
        "func": "// $parseInteger(string, picture)\n\nconst example = [];\nexample[0] = \"five\";\nexample[1] = \"two thousand, one hundred and fifteen\";\nexample[2] = \"123,456,789\";\nexample[3] = \"VIII\";\n\n// Parses the contents of the string parameter to an integer\n// using the format specified by the picture\nconst expression = [];\nexpression[0] = jsonata(`$parseInteger(\"${example[0]}\", \"w\")`);\nexpression[1] = jsonata(`$parseInteger(\"${example[1]}\", \"w\")`);\nexpression[2] = jsonata(`$parseInteger(\"${example[2]}\", \"#,###,##0\")`);\nexpression[3] = jsonata(`$parseInteger(\"${example[3]}\", \"I\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 1420,
        "wires": [
            [
                "92e8c4c7ae1a5c67"
            ]
        ]
    },
    {
        "id": "9e58844dd14dc104",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 1420,
        "wires": [
            [
                "c277731a9bcd97b7"
            ]
        ]
    },
    {
        "id": "92e8c4c7ae1a5c67",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3f2375f314164a1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1420,
        "wires": []
    },
    {
        "id": "0f7cc1cbf53be959",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "7b9707e1fdb83b97"
            ]
        ]
    },
    {
        "id": "89305a8bf17ce1f4",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 80,
        "wires": []
    },
    {
        "id": "7b9707e1fdb83b97",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$string(arg, pre)",
        "func": "// $string(arg, prettify)\n// Argument can be boolean, number, array, null\n// Prettify is boolean, if true, then \"prettified\" JSON is produced\n\nconst example = [];\nexample[0] = true;\nexample[1] = [ 1, \"'false'\", false ];\nexample[2] = null;\nexample[3] = new Date();\nconst data = {\n    example: {\n        test: {\n            pos1: \"success\",\n            pos2: \"failure\",\n        },\n    },\n};\n\n// Casts the arg parameter to a string\nconst expression = [];\nexpression[0] = jsonata(`$string(\"${example[0]}\")`);\nexpression[1] = jsonata(`$string(\"${example[1]}\")`);\nexpression[2] = jsonata(`$string(\"${example[2]}\")`);\nexpression[3] = jsonata(`$string(\"${example[3]}\")`);\nexpression[4] = jsonata(\"$string(example)\");\nexpression[5] = jsonata(\"$string(example, true)\");\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate(data);\nmsg.payload[5] = expression[5].evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 80,
        "wires": [
            [
                "89305a8bf17ce1f4"
            ]
        ]
    },
    {
        "id": "33eb18d77c98742f",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "97b05ca3aea965ff"
            ]
        ]
    },
    {
        "id": "2b10b22d75bb2d81",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 120,
        "wires": []
    },
    {
        "id": "97b05ca3aea965ff",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$length(str)",
        "func": "// $length(string)\n\nconst example = [];\nexample[0] = \"hello world\";\nexample[1] = [\"test array\"];\nexample[2] = false;\nexample[3] = null;\n\n// Returns the number of characters in the string\nconst expression = [];\nexpression[0] = jsonata(`$length(\"${example[0]}\")`);\nexpression[1] = jsonata(`$length(\"${example[1]}\")`);\nexpression[2] = jsonata(`$length(\"${example[2]}\")`);\nexpression[3] = jsonata(`$length(\"${example[3]}\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 290,
        "y": 120,
        "wires": [
            [
                "2b10b22d75bb2d81"
            ]
        ]
    },
    {
        "id": "574029ce9d53b3e7",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$substring(str ,sta, len)",
        "func": "// $substring(string, start[, length])\n\nconst example = [ \"hello world\", \"goodbye friend\" ];\n\n// Returns a string containing the characters from start\n// If length is specified, then the substring will be equal to the length in characters\n// If start is negative then it indicates the number of characters from the end\nconst expression = [];\nexpression[0] = jsonata(`$substring(\"${example[0]}\", 2)`);\nexpression[1] = jsonata(`$substring(\"${example[0]}\", 3, 5)`);\nexpression[2] = jsonata(`$substring(\"${example[0]}\", -5)`);\nexpression[3] = jsonata(`$substring(\"${example[0]}\", -5, 3)`);\nexpression[5] = jsonata(`$substring(\"${example[1]}\", 4, 3)`);\nexpression[4] = jsonata(`$substring(\"${example[1]}\", -10, 3)`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\nmsg.payload[5] = expression[5].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 160,
        "wires": [
            [
                "4552c8db8906bd64"
            ]
        ]
    },
    {
        "id": "0f406e4fb437596e",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "574029ce9d53b3e7"
            ]
        ]
    },
    {
        "id": "4552c8db8906bd64",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "5fc0599c484f2382",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$substringBefore(str ,cha)",
        "func": "// $substringBefore(string, characters)\n\nconst example = [];\nexample[0] = `hello \nworld`;\n\n// Returns the substring before the first occurrence of the character sequence\nconst expression = [];\nexpression[0] = jsonata(`$substringBefore(\"${example[0]}\", \" \")`);\nexpression[1] = jsonata(`$substringBefore(\"${example[0]}\", \"l\")`);\nexpression[2] = jsonata(`$substringBefore(\"${example[0]}\", \"o\")`);\nexpression[3] = jsonata(`$substringBefore(\"${example[0]}\", \"r\")`);\nexpression[4] = jsonata(`$substringBefore(\"${example[0]}\", \"\\n\")`);\n\nmsg.payload = [];\nmsg.payload[0] = expression[0].evaluate();\nmsg.payload[1] = expression[1].evaluate();\nmsg.payload[2] = expression[2].evaluate();\nmsg.payload[3] = expression[3].evaluate();\nmsg.payload[4] = expression[4].evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 200,
        "wires": [
            [
                "d7b47f2422eb5d41"
            ]
        ]
    },
    {
        "id": "61eacfc6b05617af",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "5fc0599c484f2382"
            ]
        ]
    },
    {
        "id": "d7b47f2422eb5d41",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 200,
        "wires": []
    },
    {
        "id": "d12bb701c54a51b7",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$substringAfter(str ,cha)",
        "func": "// $substringAfter(string, characters)\n\nconst example = [`hello \nworld`];\n\n// Returns the substring after the first occurrence of the character sequence\nconst expression = [\n    jsonata(`$substringAfter(\"${example[0]}\", \" \")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"l\")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"o\")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"r\")`),\n    jsonata(`$substringAfter(\"${example[0]}\", \"\\n\")`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n    expression[2].evaluate(),\n    expression[3].evaluate(),\n    expression[4].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 240,
        "wires": [
            [
                "25da3fbb5cb8a783"
            ]
        ]
    },
    {
        "id": "25da3fbb5cb8a783",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 240,
        "wires": []
    },
    {
        "id": "bc87e57a88fd8fc9",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "d12bb701c54a51b7"
            ]
        ]
    },
    {
        "id": "79f3a0a75f765aa5",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$uppercase(str)",
        "func": "// $uppercase(string)\n\nconst example = \"Hello World\";\n\n// Returns a string with all the characters converted to uppercase\nconst expression = jsonata(`$uppercase(\"${example}\")`);\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 280,
        "wires": [
            [
                "f03d559a1b4ecf37"
            ]
        ]
    },
    {
        "id": "5263c4f5189e5eaf",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "79f3a0a75f765aa5"
            ]
        ]
    },
    {
        "id": "f03d559a1b4ecf37",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 280,
        "wires": []
    },
    {
        "id": "f831e7e54c6df875",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$lowercase(str)",
        "func": "// $lowercase(string)\n\nconst example = \"Hello World\";\n\n// Returns a string with all the characters converted to lowercase\nconst expression = jsonata(`$lowercase(\"${example}\")`);\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 320,
        "wires": [
            [
                "03cebea42a679530"
            ]
        ]
    },
    {
        "id": "efb7f178ed1f6b26",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "f831e7e54c6df875"
            ]
        ]
    },
    {
        "id": "03cebea42a679530",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 320,
        "wires": []
    },
    {
        "id": "27aa670fc69b45b7",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$trim(str)",
        "func": "// $trim(string)\n\nconst example = `Hello\nWorld\n`;\n\n// Normalizes and trims all whitespace characters in string\n// All tabs, carriage returns, and line feeds are replaced with spaces.\n// Contiguous sequences of spaces are reduced to a single space.\n// Trailing and leading spaces are removed\nconst expression = jsonata(`$trim(\"${example}\")`);\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 280,
        "y": 360,
        "wires": [
            [
                "36e9a2f036e7334b"
            ]
        ]
    },
    {
        "id": "5f0de1517502ca39",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "27aa670fc69b45b7"
            ]
        ]
    },
    {
        "id": "36e9a2f036e7334b",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 360,
        "wires": []
    },
    {
        "id": "015750733b48bc64",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$pad(str, wid, cha)",
        "func": "// $pad(string, width [, character])\n\nconst data = {\n    example: \"Hello\",\n    char: \"X\",\n    width: -7,\n};\n\n// Returns a copy of the string str with extra padding\n// It's total number of characters is at least the absolute value of the width\n// If width is a positive number, then the string is padded to the right\n// If negative, it is padded to the left\n// char argument specifies the padding character, default is space\nconst expression = [\n    jsonata(\"$pad(example, 7)\"),\n    jsonata(\"$pad(example, -7)\"),\n    jsonata(\"$pad(example, 7, '#')\"),\n    jsonata(\"$pad(example, width, char)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 400,
        "wires": [
            [
                "bf6925f53b4c8570"
            ]
        ]
    },
    {
        "id": "588e07e3dad2b766",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "015750733b48bc64"
            ]
        ]
    },
    {
        "id": "bf6925f53b4c8570",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 400,
        "wires": []
    },
    {
        "id": "dd525c51d46d0aa4",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$contains(str, pat)",
        "func": "// $contains(string, pattern)\n// pattern can be a string or a regular expression (regex)\n\nconst example = \"Hello World\";\nconst regex = [ /wo/, /wo/i ];\n\n// Returns true if str is matched by pattern, otherwise it returns false\nconst expression = [\n    jsonata(`$contains(\"${example}\", \"orl\")`),\n    jsonata(`$contains(\"${example}\", \"goodbye\")`),\n    jsonata(`$contains(\"${example}\", ${regex[0]})`),\n    jsonata(`$contains(\"${example}\", ${regex[1]})`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n    expression[2].evaluate(),\n    expression[3].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 440,
        "wires": [
            [
                "0de1a0ecc422ca10"
            ]
        ]
    },
    {
        "id": "4bb01a6c30ef2a92",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$split(str, sep, lim)",
        "func": "// $split(string, separator [, limit])\n// Separator parameter can either be a string or a regular expression (regex)\n// Limit parameter is a number that specifies the maximum of substrings to include in the result\n\nconst example = \"Hello World\";\nconst regex = /l/;\n\n// Splits the str parameter into an array of substrings by the separator parameter\nconst expression = [\n    jsonata(`$split(\"${example}\", \" \")`),\n    jsonata(`$split(\"${example}\", \"l\")`),\n    jsonata(`$split(\"${example}\", \"l\", 2)`),\n    jsonata(`$split(\"${example}\", ${regex})`),\n    jsonata(`$split(\"${example}\", ${regex}, 3)`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n    expression[2].evaluate(),\n    expression[3].evaluate(),\n    expression[4].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 480,
        "wires": [
            [
                "7d39f8ccd7f440b3"
            ]
        ]
    },
    {
        "id": "a804fb7a5d6a7527",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "dd525c51d46d0aa4"
            ]
        ]
    },
    {
        "id": "71db1766621ddda7",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 480,
        "wires": [
            [
                "4bb01a6c30ef2a92"
            ]
        ]
    },
    {
        "id": "0de1a0ecc422ca10",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 440,
        "wires": []
    },
    {
        "id": "7d39f8ccd7f440b3",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 480,
        "wires": []
    },
    {
        "id": "fac1cb69ad143cb4",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$join(arr, sep)",
        "func": "// $join(array[, separator])\n\nconst data = {\n    example: [ \"Hello\", \"World\", \"Goodbye\", \"Moon\" ],\n};\n\n// Joins an array of component strings into a single concatenated string\nconst expression = [\n    jsonata(\"$join(example)\"),\n    jsonata(\"$join(example, '-')\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 520,
        "wires": [
            [
                "6df09440e2cbde59"
            ]
        ]
    },
    {
        "id": "89ef93936b21b4ad",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 520,
        "wires": [
            [
                "fac1cb69ad143cb4"
            ]
        ]
    },
    {
        "id": "6df09440e2cbde59",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 520,
        "wires": []
    },
    {
        "id": "641205e3cba124d0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$match(str, pat, lim)",
        "func": "// $match(str, pattern [, limit])\n\nlet data = {\n    example: \"ababbabbcc\",\n};\n\n// Applies the string to the pattern regular expression and returns an array of objects\nconst expression = [\n    jsonata(\"$match(example, /a(b+)/)\"),\n    jsonata(\"$match(example, /a(b+)/, 1)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 310,
        "y": 560,
        "wires": [
            [
                "d3b13f915c0880b6"
            ]
        ]
    },
    {
        "id": "ce0842f09f2f02d2",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "641205e3cba124d0"
            ]
        ]
    },
    {
        "id": "d3b13f915c0880b6",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 560,
        "wires": []
    },
    {
        "id": "ca02b214332083a0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$replace(str, pat, rep, lim)",
        "func": "// $replace(string, pattern, replacement [, limit])\n// Pattern parameter can either be a string or a regular expression (regex)\n\nconst example = \"Hello world\";\nconst example2 = \"Billy Bob\";\nconst regex = /(\\w+)\\s(\\w+)/;\n\n// Finds occurrences of pattern within string and replaces them with replacement\nconst expression = [\n    jsonata(`$replace(\"${example}\", \"Hello\", \"Goodbye cruel\")`),\n    jsonata(`$replace(\"${example2}\", ${regex}, \"$2, $1\")`),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 330,
        "y": 600,
        "wires": [
            [
                "8e676426b4739885"
            ]
        ]
    },
    {
        "id": "8badc54fd86df382",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 600,
        "wires": [
            [
                "ca02b214332083a0"
            ]
        ]
    },
    {
        "id": "8e676426b4739885",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 600,
        "wires": []
    },
    {
        "id": "20f4bdaa2161ecf0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$eval(exp, con)",
        "func": "// $eval(expression [, context])\n// Expression parameter must be a string\n\nconst data = {\n    example: [ 4, 5, 6 ],\n};\n\n// Parses and evaluates expression which contains literal JSON\n// or a JSONata expression using the current context as the context for evaluation.\nconst expression = [\n    jsonata(\"$eval('[1,2,3]')\"),\n    jsonata(\"$eval('example')\"),\n    jsonata(\"$eval('[$string(7),$string(8),$string(9)]')\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(),\n    expression[1].evaluate(data),\n    expression[2].evaluate(),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 640,
        "wires": [
            [
                "1bbcc63008b599b9"
            ]
        ]
    },
    {
        "id": "69862f023088276f",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "20f4bdaa2161ecf0"
            ]
        ]
    },
    {
        "id": "1bbcc63008b599b9",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 640,
        "wires": []
    },
    {
        "id": "56c89da93c4f8598",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$base64encode(str)",
        "func": "// $base64encode(string)\n\nconst data = {\n    example: [\n    \"Hello world\",\n    \"This is my secret phrase.\",\n    \"{theKey: 'This is a JSON string example'};\",\n    ],\n};\n\n// Converts an ASCII string to a base 64 representation\nconst expression = [\n    jsonata(\"$base64encode(example[0])\"),\n    jsonata(\"$base64encode(example[1])\"),\n    jsonata(\"$base64encode(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 680,
        "wires": [
            [
                "77a88f7b8594f51e"
            ]
        ]
    },
    {
        "id": "5f8e98fada3e3b8c",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 680,
        "wires": [
            [
                "56c89da93c4f8598"
            ]
        ]
    },
    {
        "id": "77a88f7b8594f51e",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 680,
        "wires": []
    },
    {
        "id": "6e3b43a0f645b2f6",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$base64decode(str)",
        "func": "// $base64decode(string)\n\nconst data = {\n    example: [\n    \"SGVsbG8gd29ybGQ=\",\n    \"VGhpcyBpcyBteSBzZWNyZXQgcGhyYXNlLg==\",\n    \"e3RoZUtleTogJ1RoaXMgaXMgYSBKU09OIHN0cmluZyBleGFtcGxlJ307\",\n    ],\n};\n\n// Converts base 64 encoded bytes to a string, using a UTF-8 Unicode codepage\nconst expression = [\n    jsonata(\"$base64decode(example[0])\"),\n    jsonata(\"$base64decode(example[1])\"),\n    jsonata(\"$base64decode(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 320,
        "y": 720,
        "wires": [
            [
                "ada30cde655edd22"
            ]
        ]
    },
    {
        "id": "ea1117ddd2426699",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 720,
        "wires": [
            [
                "6e3b43a0f645b2f6"
            ]
        ]
    },
    {
        "id": "ada30cde655edd22",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 720,
        "wires": []
    },
    {
        "id": "e67d10e3347c9ea9",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$encodeUrlComponent(str)",
        "func": "// $encodeUrlComponent(string)\n\nconst data = {\n    example: [\n    \"https://www.youtube.com/watch?v=ksGeUD26Mw0\",\n    \"?v=ksGeUD26Mw0\",\n    \"{theKey: 'This is a JSON string example'};\",\n    ],\n};\n\n// Encodes URL component by replacing certain characters with the UTF-8 encoding of the character using escape sequences\nconst expression = [\n    jsonata(\"$encodeUrlComponent(example[0])\"),\n    jsonata(\"$encodeUrlComponent(example[1])\"),\n    jsonata(\"$encodeUrlComponent(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 340,
        "y": 760,
        "wires": [
            [
                "146b75b897bffc80"
            ]
        ]
    },
    {
        "id": "0fadee83063f1cdd",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$encodeUrl(str)",
        "func": "// $encodeUrl(string)\n\nconst data = {\n    example: [\n    \"Hello world\",\n    \"https://nodered.org/docs/ & not a real url \",\n    \"{theKey: 'This is a JSON string example'};\",\n    ],\n};\n\n// Encodes URL by replacing certain characters with the UTF-8 encoding of the character using escape sequences\nconst expression = [\n    jsonata(\"$encodeUrl(example[0])\"),\n    jsonata(\"$encodeUrl(example[1])\"),\n    jsonata(\"$encodeUrl(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 840,
        "wires": [
            [
                "638f4c5e1eb3ad2d"
            ]
        ]
    },
    {
        "id": "1ae55c36c954c2d7",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "e67d10e3347c9ea9"
            ]
        ]
    },
    {
        "id": "a90c1da2e38eb6be",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 840,
        "wires": [
            [
                "0fadee83063f1cdd"
            ]
        ]
    },
    {
        "id": "146b75b897bffc80",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 760,
        "wires": []
    },
    {
        "id": "638f4c5e1eb3ad2d",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 840,
        "wires": []
    },
    {
        "id": "960107f6763ef6cd",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$decodeUrlComponent(str)",
        "func": "// $decodeUrlComponent(string)\n\nconst data = {\n    example: [\n    \"https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DksGeUD26Mw0\",\n    \"%3Fv%3DksGeUD26Mw0\",\n    \"%7BtheKey%3A%20'This%20is%20a%20JSON%20string%20example'%7D%3B\",\n    ],\n};\n\n// Decodes a URL component previously created by encodeUrlComponent\nconst expression = [\n    jsonata(\"$decodeUrlComponent(example[0])\"),\n    jsonata(\"$decodeUrlComponent(example[1])\"),\n    jsonata(\"$decodeUrlComponent(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 340,
        "y": 800,
        "wires": [
            [
                "97dfea39009105fc"
            ]
        ]
    },
    {
        "id": "1eda0eb06ded6d9c",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "960107f6763ef6cd"
            ]
        ]
    },
    {
        "id": "97dfea39009105fc",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 800,
        "wires": []
    },
    {
        "id": "87b33a10e6f432eb",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "$decodeUrl(str)",
        "func": "// $decodeUrl(string)\n\nconst data = {\n    example: [\n    \"Hello%20world\",\n    \"https://nodered.org/docs/%20&%20not%20a%20real%20url%20\",\n    \"%7BtheKey:%20'This%20is%20a%20JSON%20string%20example'%7D;\",\n    ],\n};\n\n// Decodes a URL previously created by encodeUrl\nconst expression = [\n    jsonata(\"$decodeUrl(example[0])\"),\n    jsonata(\"$decodeUrl(example[1])\"),\n    jsonata(\"$decodeUrl(example[2])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 300,
        "y": 880,
        "wires": [
            [
                "637455e25b5e5d1d"
            ]
        ]
    },
    {
        "id": "b125cb399a064b5a",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 880,
        "wires": [
            [
                "87b33a10e6f432eb"
            ]
        ]
    },
    {
        "id": "637455e25b5e5d1d",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "5858953d941e2128",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 880,
        "wires": []
    },
    {
        "id": "38427db96b1421b0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "$boolean(arg)",
        "func": "// $boolean(arg)\n\n/*\nArgument type\t    Result\nBoolean\t            unchanged\nstring: empty\t    false\nstring: non-empty\ttrue\nnumber: 0\t        false\nnumber: non-zero\ttrue\nnull\t            false\narray: empty\t    false\narray: any true\t    true\narray: all false\tfalse\nobject: empty\t    false\nobject: non-empty\ttrue\nfunction\t        false\n*/\n\nconst data = {\n    example: [\n    true,\n    false,\n    \"\",\n    \"Hello world\",\n    0,\n    1,\n    null,\n    [],\n    [ false, true ],\n    [false],\n    {},\n    { \"non\": \"empty\" },\n    function test() { return; },\n    ],\n};\n\n// Casts the argument to a Boolean\nconst expression = [\n    jsonata(\"$boolean(example[0])\"),\n    jsonata(\"$boolean(example[1])\"),\n    jsonata(\"$boolean(example[2])\"),\n    jsonata(\"$boolean(example[3])\"),\n    jsonata(\"$boolean(example[4])\"),\n    jsonata(\"$boolean(example[5])\"),\n    jsonata(\"$boolean(example[6])\"),\n    jsonata(\"$boolean(example[7])\"),\n    jsonata(\"$boolean(example[8])\"),\n    jsonata(\"$boolean(example[9])\"),\n    jsonata(\"$boolean(example[10])\"),\n    jsonata(\"$boolean(example[11])\"),\n    jsonata(\"$boolean(example[12])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n    expression[8].evaluate(data),\n    expression[9].evaluate(data),\n    expression[10].evaluate(data),\n    expression[11].evaluate(data),\n    expression[12].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 320,
        "wires": [
            [
                "abbe1949232a4942"
            ]
        ]
    },
    {
        "id": "75c0bd910867dc25",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 320,
        "wires": [
            [
                "38427db96b1421b0"
            ]
        ]
    },
    {
        "id": "abbe1949232a4942",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 320,
        "wires": []
    },
    {
        "id": "7f8b843350a69ff0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "$not(arg)",
        "func": "// $not(arg)\n\n/*\nArgument type\t    Result\nBoolean\t            opposite\nstring: empty\t    true\nstring: non-empty\tfalse\nnumber: 0\t        true\nnumber: non-zero\tfalse\nnull\t            true\narray: empty\t    true\narray: any true\t    false\narray: all false\ttrue\nobject: empty\t    true\nobject: non-empty\tfalse\nfunction\t        true\n*/\n\nconst data = {\n    example: [\n    true,\n    false,\n    \"\",\n    \"Hello world\",\n    0,\n    1,\n    null,\n    [],\n    [ false, true ],\n    [false],\n    {},\n    { \"non\": \"empty\" },\n    function test() { return; },\n    ],\n};\n\n// Returns Boolean NOT on the argument, the revese of $boolean()\nconst expression = [\n    jsonata(\"$not(example[0])\"),\n    jsonata(\"$not(example[1])\"),\n    jsonata(\"$not(example[2])\"),\n    jsonata(\"$not(example[3])\"),\n    jsonata(\"$not(example[4])\"),\n    jsonata(\"$not(example[5])\"),\n    jsonata(\"$not(example[6])\"),\n    jsonata(\"$not(example[7])\"),\n    jsonata(\"$not(example[8])\"),\n    jsonata(\"$not(example[9])\"),\n    jsonata(\"$not(example[10])\"),\n    jsonata(\"$not(example[11])\"),\n    jsonata(\"$not(example[12])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n    expression[8].evaluate(data),\n    expression[9].evaluate(data),\n    expression[10].evaluate(data),\n    expression[11].evaluate(data),\n    expression[12].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 360,
        "wires": [
            [
                "ab2f2d7a863331b5"
            ]
        ]
    },
    {
        "id": "fbb036fc259bc29a",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 360,
        "wires": [
            [
                "7f8b843350a69ff0"
            ]
        ]
    },
    {
        "id": "ab2f2d7a863331b5",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 360,
        "wires": []
    },
    {
        "id": "8b5fca3b78b019b4",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "$exists(arg)",
        "func": "// $exists(arg)\n\nconst data = {\n    example: [\n    true,\n    false,\n    \"\",\n    \"Hello world\",\n    0,\n    1,\n    null,\n    [],\n    [ false, true ],\n    [false],\n    {},\n    { \"non\": \"empty\" },\n    function test() { return; },\n    ],\n};\n\n// Returns Boolean, true if the arg expression evaluates to a value\n// or false if the expression does not match anything\nconst expression = [\n    jsonata(\"$exists(example[0])\"),\n    jsonata(\"$exists(example[1])\"),\n    jsonata(\"$exists(example[2])\"),\n    jsonata(\"$exists(example[3])\"),\n    jsonata(\"$exists(example[4])\"),\n    jsonata(\"$exists(example[5])\"),\n    jsonata(\"$exists(example[6])\"),\n    jsonata(\"$exists(example[7])\"),\n    jsonata(\"$exists(example[8])\"),\n    jsonata(\"$exists(example[9])\"),\n    jsonata(\"$exists(example[10])\"),\n    jsonata(\"$exists(example[11])\"),\n    jsonata(\"$exists(example[12])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n    expression[8].evaluate(data),\n    expression[9].evaluate(data),\n    expression[10].evaluate(data),\n    expression[11].evaluate(data),\n    expression[12].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 400,
        "wires": [
            [
                "dffaf66f56b66b7d"
            ]
        ]
    },
    {
        "id": "5d9f7b44f2096d0a",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 400,
        "wires": [
            [
                "8b5fca3b78b019b4"
            ]
        ]
    },
    {
        "id": "dffaf66f56b66b7d",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "d2e1279b5fd4575d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 400,
        "wires": []
    },
    {
        "id": "1e76e97f96460298",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "$count(arr)",
        "func": "// $count(array)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [\"Hello World\"],\n    example3: [ true, null, \"\", {}],\n};\n\n// Returns the number of items in the array\nconst expression = [\n    jsonata(\"$count(example1)\"),\n    jsonata(\"$count(example2)\"),\n    jsonata(\"$count(example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 500,
        "wires": [
            [
                "31477f70de39ad61"
            ]
        ]
    },
    {
        "id": "8c521273427ab262",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 500,
        "wires": [
            [
                "1e76e97f96460298"
            ]
        ]
    },
    {
        "id": "31477f70de39ad61",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 500,
        "wires": []
    },
    {
        "id": "e49f68a0f36889d6",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "$append(arr1, arr2)",
        "func": "// $append(array1, array2)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [\"Hello World\"],\n    example3: [ true, null, \"\", {}],\n};\n\n// Returns an array containing the values in array1 followed by the values in array2.\n// If either parameter is not an array, then it is treated as a singleton array containing that value\nconst expression = [\n    jsonata(\"$append(example1, [6,7,8,9])\"),\n    jsonata(\"$append(example2, 'This is JSONata')\"),\n    jsonata(\"$append(example3, false)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 540,
        "wires": [
            [
                "78aca9737c826606"
            ]
        ]
    },
    {
        "id": "d32c6167e83986e2",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 540,
        "wires": [
            [
                "e49f68a0f36889d6"
            ]
        ]
    },
    {
        "id": "78aca9737c826606",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 540,
        "wires": []
    },
    {
        "id": "54d5f9cd3c6bf6c0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "$sort(arr, fun)",
        "func": "// $sort(array [, function])\n\nconst data = {\n    example1: [ 4, 3, 5, 1, 2 ],\n    example2: [ \"Hello World\", \"a\", \"test\" ],\n};\n\n// Returns an array containing all the values in the array, but sorted into order\nconst expression = [\n    jsonata(\"$sort(example1, function($l, $r) {$l > $r})\"),\n    jsonata(\"$sort(example1, function($l, $r) {$l < $r})\"),\n    jsonata(\"$sort(example2, function($l, $r) {$l < $r})\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 580,
        "wires": [
            [
                "7db3d73f20c5a22a"
            ]
        ]
    },
    {
        "id": "2234f7ae697a3770",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 580,
        "wires": [
            [
                "54d5f9cd3c6bf6c0"
            ]
        ]
    },
    {
        "id": "7db3d73f20c5a22a",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 580,
        "wires": []
    },
    {
        "id": "9a29918bf56cf115",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "$reverse(arr)",
        "func": "// $reverse(array)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [ \"A\", \"B\", \"C\", \"D\" ],\n};\n\n// Returns an array containing all the values from the array, but in reverse order\nconst expression = [\n    jsonata(\"$reverse(example1)\"),\n    jsonata(\"$reverse(example2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 620,
        "wires": [
            [
                "9d70686ae7347700"
            ]
        ]
    },
    {
        "id": "c7c0d71d5016220c",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 620,
        "wires": [
            [
                "9a29918bf56cf115"
            ]
        ]
    },
    {
        "id": "9d70686ae7347700",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 620,
        "wires": []
    },
    {
        "id": "75d52d47a71233cd",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "$shuffle(arr)",
        "func": "// $shuffle(array)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [ \"A\", \"B\", \"C\", \"D\" ],\n};\n\n// Returns an array containing all the values in the array, but shuffled into random order\nconst expression = [\n    jsonata(\"$shuffle(example1)\"),\n    jsonata(\"$shuffle(example2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 660,
        "wires": [
            [
                "bc71d90bd9775450"
            ]
        ]
    },
    {
        "id": "f11869a6d78d66ab",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 660,
        "wires": [
            [
                "75d52d47a71233cd"
            ]
        ]
    },
    {
        "id": "bc71d90bd9775450",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 660,
        "wires": []
    },
    {
        "id": "99ea95ba592024e3",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "$distinct(arr)",
        "func": "// $distinct(array)\n\nconst data = {\n    example1: [ 1, 2, 1, 2, 3, 4, 1, 5, 4 ],\n    example2: [ \"A\", \"A\", \"B\", \"C\", \"D\", \"D\" ],\n};\n\n// Returns an array containing all the values in the array, but with any duplicates removed\nconst expression = [\n    jsonata(\"$distinct(example1)\"),\n    jsonata(\"$distinct(example2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 700,
        "wires": [
            [
                "b19f7f7a070d3036"
            ]
        ]
    },
    {
        "id": "f3a96c864130a773",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 700,
        "wires": [
            [
                "99ea95ba592024e3"
            ]
        ]
    },
    {
        "id": "b19f7f7a070d3036",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 700,
        "wires": []
    },
    {
        "id": "96ddc88c25af6454",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "$zip(arr1, ...)",
        "func": "// $zip(array1, ...)\n\nconst data = {\n    example1: [ 1, 2, 3, 4, 5 ],\n    example2: [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns a convolved (zipped) array containing grouped arrays \n// of values from the array1 ... arrayN arguments from index 0, 1, 2, etc\nconst expression = [\n    jsonata(\"$zip(example1, example2)\"),\n    jsonata(\"$zip(example2, example1)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 740,
        "wires": [
            [
                "702df9610cf8c931"
            ]
        ]
    },
    {
        "id": "48342adfa3e091c2",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 740,
        "wires": [
            [
                "96ddc88c25af6454"
            ]
        ]
    },
    {
        "id": "702df9610cf8c931",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "39b2b5c54232ba3c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 740,
        "wires": []
    },
    {
        "id": "a423604384b85a61",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "$now()",
        "func": "// $now([picture [, timezone]])\n\nconst data = {\n    example1: \"[M01]/[D01]/[Y0001] [h#1]:[m01][P]\",\n    example2: \"[H01]:[m01]:[s01] [z]\",\n    example3: \"-0600\",\n};\n\n// Generates a UTC timestamp in ISO 8601 compatible format and returns it as a string\n// If the optional picture and timezone parameters are supplied,\n// then the current timestamp is formatted as described by the $fromMillis() function\nconst expression = [\n    jsonata(\"$now()\"),\n    jsonata(\"$now(example1, example3)\"),\n    jsonata(\"$now(example2, example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 890,
        "y": 1300,
        "wires": [
            [
                "e1989374d8a86617"
            ]
        ]
    },
    {
        "id": "b649c9e548e52ea6",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1300,
        "wires": [
            [
                "a423604384b85a61"
            ]
        ]
    },
    {
        "id": "e1989374d8a86617",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1300,
        "wires": []
    },
    {
        "id": "7e4537ec98fc0f86",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "$millis()",
        "func": "// $millis()\n\n// Returns the number of milliseconds since the Unix Epoch (1 January, 1970 UTC) as a number\nconst expression = jsonata(\"$millis()\");\n\nmsg.payload = expression.evaluate();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 1340,
        "wires": [
            [
                "e18a31afb52a37ad"
            ]
        ]
    },
    {
        "id": "b571e34201ce4301",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1340,
        "wires": [
            [
                "7e4537ec98fc0f86"
            ]
        ]
    },
    {
        "id": "e18a31afb52a37ad",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1340,
        "wires": []
    },
    {
        "id": "0850c6f82df14da0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "$fromMillis(num, pic, tim)",
        "func": "// $fromMillis(number [, picture [, timezone]])\n\nconst data = {\n    number: 1647393801477,\n    picture1: \"[M01]/[D01]/[Y0001] [h#1]:[m01][P]\",\n    picture2: \"[H01]:[m01]:[s01] [z]\",\n    timezone: \"-0600\",\n};\n\n// Generates a UTC timestamp in ISO 8601 compatible format and returns it as a string\n// If the optional picture and timezone parameters are supplied,\n// then the current timestamp is formatted as described by the $fromMillis() function\nconst expression = [\n    jsonata(\"$fromMillis(number)\"),\n    jsonata(\"$fromMillis(number, picture1)\"),\n    jsonata(\"$fromMillis(number, picture2, timezone)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 950,
        "y": 1380,
        "wires": [
            [
                "5a72be02a7063415"
            ]
        ]
    },
    {
        "id": "f3564e25cdf6ad3a",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1380,
        "wires": [
            [
                "0850c6f82df14da0"
            ]
        ]
    },
    {
        "id": "5a72be02a7063415",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1380,
        "wires": []
    },
    {
        "id": "8a6b6c123b69c249",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "$toMillis(tim, pic)",
        "func": "// $toMillis(timestamp [, picture])\n\nconst data = {\n    number1: \"2022-03-16T01:23:21.477Z\",\n    number2: \"03/16/2022 1:23am\",\n    number3: \"19:23:21\",\n    picture1: \"[M01]/[D01]/[Y0001] [h#1]:[m01][P]\",\n    picture2: \"[H01]:[m01]:[s01]\",\n};\n\n// Generates a UTC timestamp in ISO 8601 compatible format and returns it as a string\n// If the optional picture and timezone parameters are supplied,\n// then the current timestamp is formatted as described by the $fromMillis() function\nconst expression = [\n    jsonata(\"$toMillis(number1)\"),\n    jsonata(\"$toMillis(number2, picture1)\"),\n    jsonata(\"$toMillis(number3, picture2)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 1420,
        "wires": [
            [
                "5743a08375473c86"
            ]
        ]
    },
    {
        "id": "7934417554ab4fca",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1420,
        "wires": [
            [
                "8a6b6c123b69c249"
            ]
        ]
    },
    {
        "id": "5743a08375473c86",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "3bde9eecc5de0d0d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1420,
        "wires": []
    },
    {
        "id": "bb7a943e8d73a2ee",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "$map(arr, fun)",
        "func": "// $map(array, function)\n// function(value [, index [, array]])\n\nconst data = {\n    \"example1\": [ 1, 2, 3, 4, 5 ],\n    \"example2\": [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns an array containing the results of applying the function parameter to each value in the array parameter\nconst expression = [\n    jsonata(\"$map(example1, $string)\"),\n    jsonata(\"$map(example1, function($v, $i, $a) { $v + 2 })\"),\n    jsonata(\"$map(example2, function($v, $i, $a) { 'Item ' & ($i+1) & ' of ' & $count($a) & ': ' & $v })\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1540,
        "y": 100,
        "wires": [
            [
                "2f81648ac0a0dea6"
            ]
        ]
    },
    {
        "id": "cb19fabf590bf8a1",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 100,
        "wires": [
            [
                "bb7a943e8d73a2ee"
            ]
        ]
    },
    {
        "id": "2f81648ac0a0dea6",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 100,
        "wires": []
    },
    {
        "id": "fa2e2c09eaccd887",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "$filter(arr, fun)",
        "func": "// $filter(array, function)\n// function(value [, index [, array]])\n\nconst data = {\n    \"example1\": [ 1, 2, 3, 4, 5 ],\n    \"example2\": [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns an array containing only the values in the array parameter that satisfy the function predicate\nconst expression = [\n    jsonata(\"$filter(example1, function($v, $i, $a) { $v > 2 })\"),\n    jsonata(\"$filter(example2, function($v, $i, $a) { $v != 'C' })\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1540,
        "y": 140,
        "wires": [
            [
                "cf842de86d95cf61"
            ]
        ]
    },
    {
        "id": "0a4e2fdb7c155b17",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 140,
        "wires": [
            [
                "fa2e2c09eaccd887"
            ]
        ]
    },
    {
        "id": "cf842de86d95cf61",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 140,
        "wires": []
    },
    {
        "id": "0d3fa93f582f57cf",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "$single(arr, fun)",
        "func": "// $single(array, function)\n// function(value [, index [, array]])\n\nconst data = {\n    \"example1\": [ 1, 2, 3, 4, 5 ],\n    \"example2\": [ \"A\", \"B\", \"C\", \"D\", \"E\" ],\n};\n\n// Returns the one and only one value in the array parameter that satisfy the function predicate\n// Throws an exception if the number of matching values is not exactly one\nconst expression = [\n    jsonata(\"$single(example1, function($v, $i, $a) { $v = 2 })\"),\n    jsonata(\"$single(example2, function($v, $i, $a) { $v = 'C' })\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1540,
        "y": 180,
        "wires": [
            [
                "6e4a6618668b68c7"
            ]
        ]
    },
    {
        "id": "078f7f9446b4018c",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 180,
        "wires": [
            [
                "0d3fa93f582f57cf"
            ]
        ]
    },
    {
        "id": "6e4a6618668b68c7",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 180,
        "wires": []
    },
    {
        "id": "3b70c2ca565463f0",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "$reduce(arr, fun, ini)",
        "func": "// $reduce(array, function [, init])\n// function($accumulator, $value[, $index[, $array]])\n\nconst data = {\n    \"example\": [ 1, 2, 3, 4, 5 ],\n};\n\n// Returns an aggregated value derived from applying the function parameter successively to each value in array\n// in combination with the result of the previous application of the function\nconst expression = [\n    jsonata(\"$reduce(example, function($i, $j){$i + $j})\"),\n    jsonata(\"$reduce(example, function($i, $j){$i * $j})\"),\n    jsonata(\"$reduce(example, function($i, $j){$i + $j}, 405)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 1560,
        "y": 220,
        "wires": [
            [
                "291158397d7b6794"
            ]
        ]
    },
    {
        "id": "e90f56bfc1a1f01a",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1350,
        "y": 220,
        "wires": [
            [
                "3b70c2ca565463f0"
            ]
        ]
    },
    {
        "id": "291158397d7b6794",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "a5b3f3f40f8cdfee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 220,
        "wires": []
    },
    {
        "id": "154385cc7d38b19f",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$keys(obj)",
        "func": "// $keys(object)\n\nconst data = {\n    example1: {\n        \"A\": 1,\n        \"B\": 2,\n        \"C\": 3,\n        \"D\": 4,\n        \"E\": 5,\n    },\n    example2: {\n        \"payload\": \"Success\",\n        \"topic\": \"test\",\n    },\n    example3: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"A\": 3 },\n        { \"C\": 4 },\n        { \"B\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Returns an array containing the keys in the object.\n// If the argument is an array of objects, then the returned contains\n// a de-duplicated list of all the keys in all of the objects.\nconst expression = [\n    jsonata(\"$keys(example1)\"),\n    jsonata(\"$keys(example2)\"),\n    jsonata(\"$keys(example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 840,
        "wires": [
            [
                "6878dca73600cf5f"
            ]
        ]
    },
    {
        "id": "0f2d1fb515a787ac",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 840,
        "wires": [
            [
                "154385cc7d38b19f"
            ]
        ]
    },
    {
        "id": "6878dca73600cf5f",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 840,
        "wires": []
    },
    {
        "id": "b18ce2580dbec5df",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$lookup(obj, key)",
        "func": "// $lookup(object, key)\n\nconst data = {\n    example1: {\n        \"A\": 1,\n        \"B\": 2,\n        \"C\": 3,\n        \"D\": 4,\n        \"E\": 5,\n    },\n    example2: {\n        \"payload\": \"Success\",\n        \"topic\": \"test\",\n    },\n    example3: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"C\": 3 },\n        { \"D\": 4 },\n        { \"E\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Returns the value associated with key in object.\n// If the first argument is an array of objects,\n// then all objects in the array are searched,\n// and the values associated with all occurrences of key are returned\nconst expression = [\n    jsonata(\"$lookup(example1, 'B')\"),\n    jsonata(\"$lookup(example2, 'payload')\"),\n    jsonata(\"$lookup(example3, 'A')\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 880,
        "wires": [
            [
                "88d530abb1a21311"
            ]
        ]
    },
    {
        "id": "d85e15ea98982fb9",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 880,
        "wires": [
            [
                "b18ce2580dbec5df"
            ]
        ]
    },
    {
        "id": "88d530abb1a21311",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 880,
        "wires": []
    },
    {
        "id": "db06b0dde05b4382",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$spread(obj)",
        "func": "// $spread(object)\n\nconst data = {\n    example1: {\n        \"A\": 1,\n        \"B\": 2,\n        \"C\": 3,\n        \"D\": 4,\n        \"E\": 5,\n    },\n    example2: {\n        \"payload\": \"Success\",\n        \"topic\": \"test\",\n    },\n    example3: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"C\": 3 },\n        { \"D\": 4 },\n        { \"E\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Splits an object containing key/value pairs into an array of objects,\n// each of which has a single key/value pair from the input object.\n// If the parameter is an array of objects,\n// then the resultant array contains an object for every key/value pair in every object in the array\nconst expression = [\n    jsonata(\"$spread(example1)\"),\n    jsonata(\"$spread(example2)\"),\n    jsonata(\"$spread(example3)\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 920,
        "wires": [
            [
                "f60f4884133da1db"
            ]
        ]
    },
    {
        "id": "98ca6d42e968fa07",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 920,
        "wires": [
            [
                "db06b0dde05b4382"
            ]
        ]
    },
    {
        "id": "f60f4884133da1db",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 920,
        "wires": []
    },
    {
        "id": "07ccc749b4918554",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$merge([obj])",
        "func": "// $merge(array<object>)\n\nconst data = {\n    example1: [\n        { \"A\": 1 },\n        { \"B\": 2 },\n        { \"C\": 3 },\n        { \"D\": 4 },\n        { \"E\": 5 },\n        { \"A\": 6 },\n    ],\n};\n\n// Merges an array of objects into a single object containing all the key/value pairs\n// from each of the objects in the input array.\n// If any of the input objects contain the same key,\n// then the returned object will contain the value of the last one in the array.\n// It is an error if the input array contains an item that is not an object.\nconst expression = jsonata(\"$merge(example1)\");\n\nmsg.payload = expression.evaluate(data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 960,
        "wires": [
            [
                "0a7c053c61e212d5"
            ]
        ]
    },
    {
        "id": "77e37e87b4f128b7",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 960,
        "wires": [
            [
                "07ccc749b4918554"
            ]
        ]
    },
    {
        "id": "0a7c053c61e212d5",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 960,
        "wires": []
    },
    {
        "id": "b70fb99db7d136f1",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$type(val)",
        "func": "// $type(value)\n\nconst data = {\n    example: [\n    null,\n    1,\n    \"Hello world\",\n    true,\n    [ 0, 1, 2 ],\n    { \"payload\": \"success\" },\n    function test() { return; },\n    undefined,\n    ],\n};\n\n// Evaluates the type of value and returns it's type as a string\n// Returns(non - string) undefined when value is undefined\nconst expression = [\n    jsonata(\"$type(example[0])\"),\n    jsonata(\"$type(example[1])\"),\n    jsonata(\"$type(example[2])\"),\n    jsonata(\"$type(example[3])\"),\n    jsonata(\"$type(example[4])\"),\n    jsonata(\"$type(example[5])\"),\n    jsonata(\"$type(example[6])\"),\n    jsonata(\"$type(example[7])\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n    expression[3].evaluate(data),\n    expression[4].evaluate(data),\n    expression[5].evaluate(data),\n    expression[6].evaluate(data),\n    expression[7].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 900,
        "y": 1200,
        "wires": [
            [
                "075d773fe41dce15"
            ]
        ]
    },
    {
        "id": "bc4b6a167433f525",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1200,
        "wires": [
            [
                "b70fb99db7d136f1"
            ]
        ]
    },
    {
        "id": "075d773fe41dce15",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1200,
        "wires": []
    },
    {
        "id": "5a17f977f1edf18c",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$sift(obj, fun)",
        "func": "// $sift(object, function)\n// The function that is supplied must have the following signature:\n// function(value [, key [, object]])\n\nconst data = {\n    \"Customer1\": {\n        \"CustomerID\": 12345,\n        \"Name\": \"Billy Bob\",\n        \"Model\": \"Y\",\n    },\n    \"Employee1\": {\n        \"EmployeeID\": 24680,\n        \"Name\": \"Fred Rock\",\n        \"Model\": \"3\",\n    },\n    \"Employee2\": {\n        \"EmployeeID\": 13579,\n        \"Name\": \"Ash Luis\",\n        \"Model\": \"S\",\n    },\n    \"Customer2\": {\n        \"CustomerID\": 54321,\n        \"Name\": \"Amber Daniels\",\n        \"Model\": \"X\",\n    },\n    \"Customer3\": {\n        \"CustomerID\": 98765,\n        \"Name\": \"April Star\",\n        \"Model\": \"3\",\n    },\n};\n\n// Returns an object that contains only the key/value pairs from the object parameter\n// that satisfy the predicate function passed in as the second parameter.\n// If object is not specified, then the context value is used as the value of object.\nconst expression = [\n    jsonata(\"$sift(function($v, $k) {$k ~> /^Customer/})\"),\n    jsonata(\"$sift(function($v, $k) {$k ~> /^Employee/})\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 1000,
        "wires": [
            [
                "a5735d1081eb0e76"
            ]
        ]
    },
    {
        "id": "34523c9d6f3be4d5",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1000,
        "wires": [
            [
                "5a17f977f1edf18c"
            ]
        ]
    },
    {
        "id": "a5735d1081eb0e76",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d0675dd556e8ccd3",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$each(obj, fun)",
        "func": "// $each(object, function)\n// function(value, name)\n\nconst data = {\n    \"Customer1\": {\n        \"CustomerID\": 12345,\n        \"Name\": \"Billy Bob\",\n        \"Model\": \"Y\",\n    },\n    \"Employee1\": {\n        \"EmployeeID\": 24680,\n        \"Name\": \"Fred Rock\",\n        \"Model\": \"3\",\n    },\n    \"Employee2\": {\n        \"EmployeeID\": 13579,\n        \"Name\": \"Ash Luis\",\n        \"Model\": \"S\",\n    },\n    \"Customer2\": {\n        \"CustomerID\": 54321,\n        \"Name\": \"Amber Daniels\",\n        \"Model\": \"X\",\n    },\n    \"Customer3\": {\n        \"CustomerID\": 98765,\n        \"Name\": \"April Star\",\n        \"Model\": \"3\",\n    },\n};\n\n// Returns an array of the values return by the function\n// when applied to each key/value pair in the object.\nconst expression = [\n    jsonata(\"$each(function($v, $k) {$k & ': ' & $v})\"),\n    jsonata(\"$each(function($v, $k) {$k})\"),\n    jsonata(\"$each(function($v, $k) {$v})\"),\n];\n\nmsg.payload = [\n    expression[0].evaluate(data),\n    expression[1].evaluate(data),\n    expression[2].evaluate(data),\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 920,
        "y": 1040,
        "wires": [
            [
                "9df1aa0f7557ef67"
            ]
        ]
    },
    {
        "id": "fcee703f7f0dad09",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1040,
        "wires": [
            [
                "d0675dd556e8ccd3"
            ]
        ]
    },
    {
        "id": "9df1aa0f7557ef67",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1040,
        "wires": []
    },
    {
        "id": "fd67870234c311fc",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$error(mes)",
        "func": "// $error(message)\n\n// HACKY WORKAROUND for message parameter to be usable\nnode.error(jsonata(\"$error('Error 12345')\").ast().arguments[0].value);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 910,
        "y": 1080,
        "wires": [
            [
                "91e67fc371abd56f"
            ]
        ]
    },
    {
        "id": "c1aba1f2fb4642e5",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 1080,
        "wires": [
            [
                "fd67870234c311fc"
            ]
        ]
    },
    {
        "id": "91e67fc371abd56f",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1080,
        "wires": []
    },
    {
        "id": "d76d1e54150cd3b8",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 730,
        "y": 1120,
        "wires": [
            [
                "ac14d99250bbcd5d"
            ]
        ]
    },
    {
        "id": "56ef7e70a1f1e4ba",
        "type": "inject",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 730,
        "y": 1160,
        "wires": [
            [
                "ac14d99250bbcd5d"
            ]
        ]
    },
    {
        "id": "ff7236162a78dcae",
        "type": "debug",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1140,
        "wires": []
    },
    {
        "id": "ac14d99250bbcd5d",
        "type": "function",
        "z": "48d8e346d91d5802",
        "g": "c864efbb6ecdebca",
        "name": "$assert(con, mes)",
        "func": "// $assert(condition, message)\n\n// If condition is true, the function returns { \"payload\": \"assertation is true\" }.\n// If condition is false, an error is thrown, with the message as the message of the error.\nmsg.payload = jsonata(`$assert(${msg.payload} % 2 = 0, \"Number must be even\")`);\n\n// HACKY WORKAROUND for message parameter to be usable\n// 'if condition' must be relevant to 'assert condition'\nif (msg.payload.ast().arguments[0].lhs.lhs.value % 2 == 0) return { \"payload\": \"assertation is true\" };\nelse node.error(`${msg.payload.ast().arguments[1].value}`);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 930,
        "y": 1140,
        "wires": [
            [
                "ff7236162a78dcae"
            ]
        ]
    },
    {
        "id": "6708898f07c01758",
        "type": "comment",
        "z": "48d8e346d91d5802",
        "name": "This flow requires the npm module jsonata",
        "info": "run 'npm i jsonata' from your .node-red directory\nand set functionExternalModules to true in your settings.js file",
        "x": 800,
        "y": 40,
        "wires": []
    }
]